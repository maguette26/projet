{
    "sourceFile": "src/services/serviceUtilisateur.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1749940402984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749940475914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,21 +63,18 @@\n     }\r\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n-    const userInfo = getCurrentUserInfo();\r\n-    if (!userInfo || !userInfo.id) {\r\n-        throw new Error(\"User ID not available. Please log in.\");\r\n-    }\r\n     try {\r\n-        const response = await api.get(`/reservations/mes`);\r\n+        const response = await api.get('/mes-reservations');\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n };\r\n \r\n+\r\n // 🔁 Cette fonction est utilisée dans MesReservations.jsx\r\n export const getMesReservations = getReservationsUtilisateur;\r\n \r\n export const annulerReservationUtilisateur = async (reservationId) => {\r\n"
                },
                {
                    "date": 1749940556405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-        const response = await api.get('/mes-reservations');\r\n+        const response = await api.get('/reservationsmes-reservations');\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n         throw error;\r\n"
                },
                {
                    "date": 1749940634465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-        const response = await api.get('/reservationsmes-reservations');\r\n+        const response = await api.get('/reservations/mes-reservations');\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n         throw error;\r\n"
                },
                {
                    "date": 1749944369106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,10 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-        const response = await api.get('/reservations/mes-reservations');\r\n+        const response = await api.get('/api/reservations/mes-reservations');\r\n+\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n         throw error;\r\n"
                },
                {
                    "date": 1749944595768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,9 @@\n     }\r\n };\r\n \r\n \r\n-// 🔁 Cette fonction est utilisée dans MesReservations.jsx\r\n-export const getMesReservations = getReservationsUtilisateur;\r\n+ \r\n \r\n export const annulerReservationUtilisateur = async (reservationId) => {\r\n     const userInfo = getCurrentUserInfo();\r\n     if (!userInfo || !userInfo.id) {\r\n"
                },
                {
                    "date": 1749944602348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,10 @@\n     }\r\n };\r\n \r\n \r\n- \r\n+// 🔁 Cette fonction est utilisée dans MesReservations.jsx\r\n+export const getMesReservations = getReservationsUtilisateur;\r\n \r\n export const annulerReservationUtilisateur = async (reservationId) => {\r\n     const userInfo = getCurrentUserInfo();\r\n     if (!userInfo || !userInfo.id) {\r\n"
                },
                {
                    "date": 1749944609565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-        const response = await api.get('/api/reservations/mes-reservations');\r\n+        const response = await api.get('/reservations/mes-reservations');\r\n \r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n@@ -74,10 +74,9 @@\n     }\r\n };\r\n \r\n \r\n-// 🔁 Cette fonction est utilisée dans MesReservations.jsx\r\n-export const getMesReservations = getReservationsUtilisateur;\r\n+ \r\n \r\n export const annulerReservationUtilisateur = async (reservationId) => {\r\n     const userInfo = getCurrentUserInfo();\r\n     if (!userInfo || !userInfo.id) {\r\n"
                },
                {
                    "date": 1749944619886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,12 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-        const response = await api.get('/reservations/mes-reservations');\r\n+     // Ne pas dupliquer \"/api\"\r\n+const response = await api.get('/reservations/mes-reservations');\r\n \r\n+\r\n         return response.data;\r\n     } catch (error) {\r\n         console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n         throw error;\r\n"
                },
                {
                    "date": 1749944628564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n };\r\n \r\n export const getReservationsUtilisateur = async () => {\r\n     try {\r\n-     // Ne pas dupliquer \"/api\"\r\n+    \r\n const response = await api.get('/reservations/mes-reservations');\r\n \r\n \r\n         return response.data;\r\n"
                },
                {
                    "date": 1750170256377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     }\r\n };\r\n \r\n // --- Réservations ---\r\n-export const reserverConsultation = async (reservationData) => {\r\n+µexport const reserverConsultation = async (reservationData) => {\r\n     try {\r\n         const response = await api.post('/reservations', reservationData);\r\n         return response.data;\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1750170268675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,19 @@\n export const ajouterHumeur = async (humeurData) => {\r\n     const response = await api.post('/humeurs', humeurData);\r\n     return response.data;\r\n };\r\n+export const modifierHumeur = async (id, humeurData) => {\r\n+    const response = await api.put(`/humeurs/${id}`, humeurData);\r\n+    return response.data;\r\n+};\r\n \r\n+// Supprimer une humeur existante (par id)\r\n+export const supprimerHumeur = async (id) => {\r\n+    const response = await api.delete(`/humeurs/${id}`);\r\n+    return response.data;\r\n+};\r\n+\r\n // --- Profil utilisateur ---\r\n export const getProfil = async () => {\r\n     try {\r\n         const authMeResponse = await api.get('/auth/me');\r\n@@ -52,9 +62,9 @@\n     }\r\n };\r\n \r\n // --- Réservations ---\r\n-µexport const reserverConsultation = async (reservationData) => {\r\n+/*export const reserverConsultation = async (reservationData) => {\r\n     try {\r\n         const response = await api.post('/reservations', reservationData);\r\n         return response.data;\r\n     } catch (error) {\r\n@@ -89,9 +99,9 @@\n     } catch (error) {\r\n         console.error(\"Erreur annulation réservation:\", error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n-};\r\n+};*/\r\n \r\n // --- Consultations utilisateur ---\r\n export const getConsultationsUtilisateur = async () => {\r\n     try {\r\n"
                },
                {
                    "date": 1750177840121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,22 +87,9 @@\n };\r\n \r\n \r\n  \r\n-\r\n-export const annulerReservationUtilisateur = async (reservationId) => {\r\n-    const userInfo = getCurrentUserInfo();\r\n-    if (!userInfo || !userInfo.id) {\r\n-        throw new Error(\"User ID not available. Please log in.\");\r\n-    }\r\n-    try {\r\n-        await api.delete(`/reservations/annuler/${reservationId}`);\r\n-    } catch (error) {\r\n-        console.error(\"Erreur annulation réservation:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};*/\r\n-\r\n+ \r\n // --- Consultations utilisateur ---\r\n export const getConsultationsUtilisateur = async () => {\r\n     try {\r\n         const response = await api.get('/consultations/utilisateur');\r\n"
                },
                {
                    "date": 1750177867511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+// src/services/serviceUtilisateur.js\r\n+import api from './api';\r\n+import { getCurrentUserInfo } from './serviceAuth';\r\n+\r\n+// --- Mood Tracking ---\r\n+export const getSuiviHumeur = async () => {\r\n+    const response = await api.get('/humeurs');\r\n+    return response.data;\r\n+};\r\n+\r\n+export const ajouterHumeur = async (humeurData) => {\r\n+    const response = await api.post('/humeurs', humeurData);\r\n+    return response.data;\r\n+};\r\n+export const modifierHumeur = async (id, humeurData) => {\r\n+    const response = await api.put(`/humeurs/${id}`, humeurData);\r\n+    return response.data;\r\n+};\r\n+\r\n+// Supprimer une humeur existante (par id)\r\n+export const supprimerHumeur = async (id) => {\r\n+    const response = await api.delete(`/humeurs/${id}`);\r\n+    return response.data;\r\n+};\r\n+\r\n+// --- Profil utilisateur ---\r\n+export const getProfil = async () => {\r\n+    try {\r\n+        const authMeResponse = await api.get('/auth/me');\r\n+        const authMeData = authMeResponse.data;\r\n+        const storedUserInfo = getCurrentUserInfo();\r\n+\r\n+        const fullProfil = {\r\n+            ...storedUserInfo,\r\n+            ...authMeData\r\n+        };\r\n+\r\n+        if (fullProfil.authenticated && !fullProfil.id) {\r\n+            console.warn(\"getProfil: User ID is missing in profile data.\");\r\n+        }\r\n+\r\n+        return fullProfil;\r\n+    } catch (error) {\r\n+        console.error(\"Erreur profil:\", error.response ? error.response.data : error.message);\r\n+        return getCurrentUserInfo();\r\n+    }\r\n+};\r\n+\r\n+export const modifierProfil = async (profilData) => {\r\n+    if (!profilData) throw new Error(\"Profile data missing.\");\r\n+    try {\r\n+        const response = await api.put('/auth/profile', profilData);\r\n+        const currentStoredInfo = getCurrentUserInfo();\r\n+        if (currentStoredInfo) {\r\n+            const updatedInfo = { ...currentStoredInfo, ...profilData };\r\n+            localStorage.setItem('currentUserInfo', JSON.stringify(updatedInfo));\r\n+        }\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(\"Erreur modification profil:\", error.response?.data?.message || error.message);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n+// --- Réservations ---\r\n+/*export const reserverConsultation = async (reservationData) => {\r\n+    try {\r\n+        const response = await api.post('/reservations', reservationData);\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(\"Erreur réservation:\", error.response?.data || error.message);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n+export const getReservationsUtilisateur = async () => {\r\n+    try {\r\n+    \r\n+const response = await api.get('/reservations/mes-reservations');\r\n+\r\n+\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n+\r\n+ \r\n+ \r\n+// --- Consultations utilisateur ---\r\n+export const getConsultationsUtilisateur = async () => {\r\n+    try {\r\n+        const response = await api.get('/consultations/utilisateur');\r\n+        return response.data;\r\n+    } catch (error) {\r\n+        console.error(\"Erreur récupération consultations:\", error.response?.data || error.message);\r\n+        throw error;\r\n+    }\r\n+};\r\n+\r\n+// --- Forum ---\r\n+export const getForumSujets = async () => {\r\n+    const response = await api.get('/forum/sujets');\r\n+    return response.data;\r\n+};\r\n+\r\n+export const creerForumSujet = async (titre, contenu, anonyme = false) => {\r\n+    const payload = { titre, contenu, anonyme };\r\n+    const response = await api.post('/forum/sujets', payload);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const modifierForumSujet = async (sujetId, titre, contenu) => {\r\n+    const payload = { titre, contenu };\r\n+    const response = await api.put(`/forum/sujets/${sujetId}`, payload);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const supprimerForumSujet = async (sujetId) => {\r\n+    const response = await api.delete(`/forum/sujets/${sujetId}`);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const getForumReponses = async (sujetId) => {\r\n+    const response = await api.get(`/forum/sujets/reponses/${sujetId}`);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const envoyerForumReponse = async (sujetId, messageContenu, anonyme = false) => {\r\n+    const payload = { message: messageContenu, anonyme };\r\n+    const response = await api.post(`/forum/sujets/reponses/${sujetId}`, payload);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const modifierForumReponse = async (reponseId, message) => {\r\n+    const payload = { message };\r\n+    const response = await api.put(`/forum/sujets/reponses/modifier/${reponseId}`, payload);\r\n+    return response.data;\r\n+};\r\n+\r\n+export const supprimerForumReponse = async (reponseId) => {\r\n+    const response = await api.delete(`/forum/sujets/reponses/supprimer/${reponseId}`);\r\n+    return response.data;\r\n+};\r\n"
                },
                {
                    "date": 1750177876881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,155 +87,22 @@\n };\r\n \r\n \r\n  \r\n- \r\n-// --- Consultations utilisateur ---\r\n-export const getConsultationsUtilisateur = async () => {\r\n-    try {\r\n-        const response = await api.get('/consultations/utilisateur');\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"Erreur récupération consultations:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n \r\n-// --- Forum ---\r\n-export const getForumSujets = async () => {\r\n-    const response = await api.get('/forum/sujets');\r\n-    return response.data;\r\n-};\r\n-\r\n-export const creerForumSujet = async (titre, contenu, anonyme = false) => {\r\n-    const payload = { titre, contenu, anonyme };\r\n-    const response = await api.post('/forum/sujets', payload);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const modifierForumSujet = async (sujetId, titre, contenu) => {\r\n-    const payload = { titre, contenu };\r\n-    const response = await api.put(`/forum/sujets/${sujetId}`, payload);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const supprimerForumSujet = async (sujetId) => {\r\n-    const response = await api.delete(`/forum/sujets/${sujetId}`);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const getForumReponses = async (sujetId) => {\r\n-    const response = await api.get(`/forum/sujets/reponses/${sujetId}`);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const envoyerForumReponse = async (sujetId, messageContenu, anonyme = false) => {\r\n-    const payload = { message: messageContenu, anonyme };\r\n-    const response = await api.post(`/forum/sujets/reponses/${sujetId}`, payload);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const modifierForumReponse = async (reponseId, message) => {\r\n-    const payload = { message };\r\n-    const response = await api.put(`/forum/sujets/reponses/modifier/${reponseId}`, payload);\r\n-    return response.data;\r\n-};\r\n-\r\n-export const supprimerForumReponse = async (reponseId) => {\r\n-    const response = await api.delete(`/forum/sujets/reponses/supprimer/${reponseId}`);\r\n-    return response.data;\r\n-};\r\n-// src/services/serviceUtilisateur.js\r\n-import api from './api';\r\n-import { getCurrentUserInfo } from './serviceAuth';\r\n-\r\n-// --- Mood Tracking ---\r\n-export const getSuiviHumeur = async () => {\r\n-    const response = await api.get('/humeurs');\r\n-    return response.data;\r\n-};\r\n-\r\n-export const ajouterHumeur = async (humeurData) => {\r\n-    const response = await api.post('/humeurs', humeurData);\r\n-    return response.data;\r\n-};\r\n-export const modifierHumeur = async (id, humeurData) => {\r\n-    const response = await api.put(`/humeurs/${id}`, humeurData);\r\n-    return response.data;\r\n-};\r\n-\r\n-// Supprimer une humeur existante (par id)\r\n-export const supprimerHumeur = async (id) => {\r\n-    const response = await api.delete(`/humeurs/${id}`);\r\n-    return response.data;\r\n-};\r\n-\r\n-// --- Profil utilisateur ---\r\n-export const getProfil = async () => {\r\n-    try {\r\n-        const authMeResponse = await api.get('/auth/me');\r\n-        const authMeData = authMeResponse.data;\r\n-        const storedUserInfo = getCurrentUserInfo();\r\n-\r\n-        const fullProfil = {\r\n-            ...storedUserInfo,\r\n-            ...authMeData\r\n-        };\r\n-\r\n-        if (fullProfil.authenticated && !fullProfil.id) {\r\n-            console.warn(\"getProfil: User ID is missing in profile data.\");\r\n-        }\r\n-\r\n-        return fullProfil;\r\n-    } catch (error) {\r\n-        console.error(\"Erreur profil:\", error.response ? error.response.data : error.message);\r\n-        return getCurrentUserInfo();\r\n+export const annulerReservationUtilisateur = async (reservationId) => {\r\n+    const userInfo = getCurrentUserInfo();\r\n+    if (!userInfo || !userInfo.id) {\r\n+        throw new Error(\"User ID not available. Please log in.\");\r\n     }\r\n-};\r\n-\r\n-export const modifierProfil = async (profilData) => {\r\n-    if (!profilData) throw new Error(\"Profile data missing.\");\r\n     try {\r\n-        const response = await api.put('/auth/profile', profilData);\r\n-        const currentStoredInfo = getCurrentUserInfo();\r\n-        if (currentStoredInfo) {\r\n-            const updatedInfo = { ...currentStoredInfo, ...profilData };\r\n-            localStorage.setItem('currentUserInfo', JSON.stringify(updatedInfo));\r\n-        }\r\n-        return response.data;\r\n+        await api.delete(`/reservations/annuler/${reservationId}`);\r\n     } catch (error) {\r\n-        console.error(\"Erreur modification profil:\", error.response?.data?.message || error.message);\r\n+        console.error(\"Erreur annulation réservation:\", error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n-};\r\n+};*/\r\n \r\n-// --- Réservations ---\r\n-/*export const reserverConsultation = async (reservationData) => {\r\n-    try {\r\n-        const response = await api.post('/reservations', reservationData);\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"Erreur réservation:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n-export const getReservationsUtilisateur = async () => {\r\n-    try {\r\n-    \r\n-const response = await api.get('/reservations/mes-reservations');\r\n-\r\n-\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n-\r\n- \r\n- \r\n // --- Consultations utilisateur ---\r\n export const getConsultationsUtilisateur = async () => {\r\n     try {\r\n         const response = await api.get('/consultations/utilisateur');\r\n"
                },
                {
                    "date": 1750186041641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,18 +101,9 @@\n         throw error;\r\n     }\r\n };*/\r\n \r\n-// --- Consultations utilisateur ---\r\n-export const getConsultationsUtilisateur = async () => {\r\n-    try {\r\n-        const response = await api.get('/consultations/utilisateur');\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"Erreur récupération consultations:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n+ \r\n \r\n // --- Forum ---\r\n export const getForumSujets = async () => {\r\n     const response = await api.get('/forum/sujets');\r\n"
                }
            ],
            "date": 1749940402984,
            "name": "Commit-0",
            "content": "// src/services/serviceUtilisateur.js\r\nimport api from './api';\r\nimport { getCurrentUserInfo } from './serviceAuth';\r\n\r\n// --- Mood Tracking ---\r\nexport const getSuiviHumeur = async () => {\r\n    const response = await api.get('/humeurs');\r\n    return response.data;\r\n};\r\n\r\nexport const ajouterHumeur = async (humeurData) => {\r\n    const response = await api.post('/humeurs', humeurData);\r\n    return response.data;\r\n};\r\n\r\n// --- Profil utilisateur ---\r\nexport const getProfil = async () => {\r\n    try {\r\n        const authMeResponse = await api.get('/auth/me');\r\n        const authMeData = authMeResponse.data;\r\n        const storedUserInfo = getCurrentUserInfo();\r\n\r\n        const fullProfil = {\r\n            ...storedUserInfo,\r\n            ...authMeData\r\n        };\r\n\r\n        if (fullProfil.authenticated && !fullProfil.id) {\r\n            console.warn(\"getProfil: User ID is missing in profile data.\");\r\n        }\r\n\r\n        return fullProfil;\r\n    } catch (error) {\r\n        console.error(\"Erreur profil:\", error.response ? error.response.data : error.message);\r\n        return getCurrentUserInfo();\r\n    }\r\n};\r\n\r\nexport const modifierProfil = async (profilData) => {\r\n    if (!profilData) throw new Error(\"Profile data missing.\");\r\n    try {\r\n        const response = await api.put('/auth/profile', profilData);\r\n        const currentStoredInfo = getCurrentUserInfo();\r\n        if (currentStoredInfo) {\r\n            const updatedInfo = { ...currentStoredInfo, ...profilData };\r\n            localStorage.setItem('currentUserInfo', JSON.stringify(updatedInfo));\r\n        }\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Erreur modification profil:\", error.response?.data?.message || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --- Réservations ---\r\nexport const reserverConsultation = async (reservationData) => {\r\n    try {\r\n        const response = await api.post('/reservations', reservationData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Erreur réservation:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getReservationsUtilisateur = async () => {\r\n    const userInfo = getCurrentUserInfo();\r\n    if (!userInfo || !userInfo.id) {\r\n        throw new Error(\"User ID not available. Please log in.\");\r\n    }\r\n    try {\r\n        const response = await api.get(`/reservations/mes`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Erreur récupération réservations:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// 🔁 Cette fonction est utilisée dans MesReservations.jsx\r\nexport const getMesReservations = getReservationsUtilisateur;\r\n\r\nexport const annulerReservationUtilisateur = async (reservationId) => {\r\n    const userInfo = getCurrentUserInfo();\r\n    if (!userInfo || !userInfo.id) {\r\n        throw new Error(\"User ID not available. Please log in.\");\r\n    }\r\n    try {\r\n        await api.delete(`/reservations/annuler/${reservationId}`);\r\n    } catch (error) {\r\n        console.error(\"Erreur annulation réservation:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --- Consultations utilisateur ---\r\nexport const getConsultationsUtilisateur = async () => {\r\n    try {\r\n        const response = await api.get('/consultations/utilisateur');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Erreur récupération consultations:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --- Forum ---\r\nexport const getForumSujets = async () => {\r\n    const response = await api.get('/forum/sujets');\r\n    return response.data;\r\n};\r\n\r\nexport const creerForumSujet = async (titre, contenu, anonyme = false) => {\r\n    const payload = { titre, contenu, anonyme };\r\n    const response = await api.post('/forum/sujets', payload);\r\n    return response.data;\r\n};\r\n\r\nexport const modifierForumSujet = async (sujetId, titre, contenu) => {\r\n    const payload = { titre, contenu };\r\n    const response = await api.put(`/forum/sujets/${sujetId}`, payload);\r\n    return response.data;\r\n};\r\n\r\nexport const supprimerForumSujet = async (sujetId) => {\r\n    const response = await api.delete(`/forum/sujets/${sujetId}`);\r\n    return response.data;\r\n};\r\n\r\nexport const getForumReponses = async (sujetId) => {\r\n    const response = await api.get(`/forum/sujets/reponses/${sujetId}`);\r\n    return response.data;\r\n};\r\n\r\nexport const envoyerForumReponse = async (sujetId, messageContenu, anonyme = false) => {\r\n    const payload = { message: messageContenu, anonyme };\r\n    const response = await api.post(`/forum/sujets/reponses/${sujetId}`, payload);\r\n    return response.data;\r\n};\r\n\r\nexport const modifierForumReponse = async (reponseId, message) => {\r\n    const payload = { message };\r\n    const response = await api.put(`/forum/sujets/reponses/modifier/${reponseId}`, payload);\r\n    return response.data;\r\n};\r\n\r\nexport const supprimerForumReponse = async (reponseId) => {\r\n    const response = await api.delete(`/forum/sujets/reponses/supprimer/${reponseId}`);\r\n    return response.data;\r\n};\r\n"
        }
    ]
}