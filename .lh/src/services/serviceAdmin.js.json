{
    "sourceFile": "src/services/serviceAdmin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1749907732811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749907740650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,13 +171,7 @@\n         console.error(\"serviceAdmin: Erreur lors de la récupération des messages privés:\", error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n };\r\n-\r\n-/**\r\n- * Supprime un message privé spécifique.\r\n- * Nécessite les permissions ADMIN (ou MODERATOR).\r\n- * @param {number} id L'ID du message privé à supprimer.\r\n- * @returns {Promise<void>} Une promesse qui résout une fois la suppression réussie.\r\n- */\r\n  \r\n-};\n\\ No newline at end of file\n+ \r\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1749907746748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,24 +154,8 @@\n         throw error;\r\n     }\r\n };\r\n \r\n-/**\r\n- * Récupère tous les messages privés entre utilisateurs.\r\n- * Nécessite les permissions ADMIN (ou MODERATOR).\r\n- * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets message privé.\r\n- */\r\n-export const getMessagesPrives = async () => {\r\n-    try {\r\n-        console.log(\"serviceAdmin: Récupération des messages privés...\");\r\n-        // Confirmez l'endpoint exact. Exemple: /messages/prive/all ou /moderation/messages-prives\r\n-        const response = await api.get('/messages/prive/all');\r\n-        console.log(\"serviceAdmin: Messages privés récupérés:\", response.data);\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"serviceAdmin: Erreur lors de la récupération des messages privés:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n  \r\n  \r\n+ \r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1749907757857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,25 +136,9 @@\n         throw error;\r\n     }\r\n };\r\n \r\n-/**\r\n- * Supprime un message spécifique du forum (discussion).\r\n- * Nécessite les permissions ADMIN (ou MODERATOR).\r\n- * @param {number} id L'ID du message de forum à supprimer.\r\n- * @returns {Promise<void>} Une promesse qui résout une fois la suppression réussie.\r\n- */\r\n-export const supprimerDiscussion = async (id) => {\r\n-    try {\r\n-        console.log(`serviceAdmin: Suppression de la discussion du forum ID ${id}...`);\r\n-        // Confirmez l'endpoint exact et la méthode HTTP (DELETE). Exemple: /forum/discussions/{id}\r\n-        await api.delete(`/forum/discussions/${id}`);\r\n-        console.log(`serviceAdmin: Discussion du forum ID ${id} supprimée avec succès.`);\r\n-    } catch (error) {\r\n-        console.error(`serviceAdmin: Erreur lors de la suppression de la discussion du forum ID ${id}:`, error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n+ \r\n \r\n  \r\n  \r\n  \r\n"
                },
                {
                    "date": 1749907765923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,30 +116,5 @@\n         throw error;\r\n     }\r\n };\r\n \r\n-// --- NOUVELLES FONCTIONS DE MODÉRATION DES DISCUSSIONS ET MESSAGES PRIVÉS ---\r\n-\r\n-/**\r\n- * Récupère tous les messages du forum (discussions).\r\n- * Nécessite les permissions ADMIN (ou MODERATOR si un tel rôle existe).\r\n- * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets message de forum.\r\n- */\r\n-export const getDiscussions = async () => {\r\n-    try {\r\n-        console.log(\"serviceAdmin: Récupération des discussions du forum...\");\r\n-        // Confirmez l'endpoint exact avec votre backend. Exemple: /forum/discussions/all\r\n-        const response = await api.get('/forum/discussions/all');\r\n-        console.log(\"serviceAdmin: Discussions du forum récupérées:\", response.data);\r\n-        return response.data;\r\n-    } catch (error) {\r\n-        console.error(\"serviceAdmin: Erreur lors de la récupération des discussions du forum:\", error.response?.data || error.message);\r\n-        throw error;\r\n-    }\r\n-};\r\n-\r\n- \r\n-\r\n- \r\n- \r\n- \r\n  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1749907788689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,5 +116,23 @@\n         throw error;\r\n     }\r\n };\r\n \r\n- \n\\ No newline at end of file\n+ export async function getDiscussions() {\r\n+  const response = await fetch(`${API_BASE_URL}/forum/admin/tous`, {\r\n+    credentials: 'include',\r\n+  });\r\n+  if (!response.ok) {\r\n+    throw new Error(\"Erreur lors de la récupération des sujets de forum\");\r\n+  }\r\n+  return await response.json();\r\n+}\r\n+\r\n+export async function supprimerDiscussion(id) {\r\n+  const response = await fetch(`${API_BASE_URL}/forum/sujets/${id}`, {\r\n+    method: 'DELETE',\r\n+    credentials: 'include',\r\n+  });\r\n+  if (!response.ok) {\r\n+    throw new Error(\"Erreur lors de la suppression du sujet\");\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1749907842298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         console.error(`serviceAdmin: Erreur lors du téléchargement du document '${filename}':`, error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n };\r\n-\r\n+const API_BASE_URL = 'http://localhost:8080/api';\r\n  export async function getDiscussions() {\r\n   const response = await fetch(`${API_BASE_URL}/forum/admin/tous`, {\r\n     credentials: 'include',\r\n   });\r\n"
                },
                {
                    "date": 1749907848326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n         console.error(`serviceAdmin: Erreur lors du téléchargement du document '${filename}':`, error.response?.data || error.message);\r\n         throw error;\r\n     }\r\n };\r\n-const API_BASE_URL = 'http://localhost:/api';\r\n+const API_BASE_URL = 'http://localhost:9191/api';\r\n  export async function getDiscussions() {\r\n   const response = await fetch(`${API_BASE_URL}/forum/admin/tous`, {\r\n     credentials: 'include',\r\n   });\r\n"
                },
                {
                    "date": 1749908220747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,5 +146,5 @@\n     method: 'DELETE',\r\n     credentials: 'include'\r\n   });\r\n   if (!res.ok) throw new Error('Erreur suppression réponse');\r\n-}\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1749907732811,
            "name": "Commit-0",
            "content": "import api from './api';\r\n\r\n// --- Fonctions de gestion des utilisateurs ---\r\n\r\n/**\r\n * Récupère tous les utilisateurs enregistrés dans le système.\r\n * Nécessite les permissions ADMIN.\r\n * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets utilisateur.\r\n */\r\nexport const getAllUsers = async () => {\r\n    try {\r\n        console.log(\"serviceAdmin: Récupération de tous les utilisateurs via '/utilisateurs'...\");\r\n        // MODIFICATION ICI : Appel à /utilisateurs au lieu de /utilisateurs/all\r\n        const response = await api.get('/utilisateurs');\r\n        console.log(\"serviceAdmin: Utilisateurs récupérés:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"serviceAdmin: Erreur lors de la récupération des utilisateurs:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Met à jour les informations d'un utilisateur spécifique.\r\n * Nécessite les permissions ADMIN.\r\n * @param {number} userId L'ID de l'utilisateur à mettre à jour.\r\n * @param {object} userData Les données de l'utilisateur à mettre à jour (ex: { role: 'ADMIN' }).\r\n * @returns {Promise<object>} Une promesse qui résout avec l'objet utilisateur mis à jour.\r\n */\r\nexport const updateUser = async (userId, userData) => {\r\n    try {\r\n        console.log(`serviceAdmin: Mise à jour de l'utilisateur ID ${userId} avec les données:`, userData);\r\n        const response = await api.put(`/utilisateurs/${userId}`, userData);\r\n        console.log(`serviceAdmin: Utilisateur ID ${userId} mis à jour:`, response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(`serviceAdmin: Erreur lors de la mise à jour de l'utilisateur ID ${userId}:`, error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Supprime un utilisateur spécifique du système.\r\n * Nécessite les permissions ADMIN.\r\n * @param {number} userId L'ID de l'utilisateur à supprimer.\r\n * @returns {Promise<void>} Une promesse qui résout une fois la suppression réussie.\r\n */\r\nexport const deleteUser = async (userId) => {\r\n    try {\r\n        console.log(`serviceAdmin: Suppression de l'utilisateur ID ${userId}...`);\r\n        await api.delete(`/utilisateurs/${userId}`);\r\n        console.log(`serviceAdmin: Utilisateur ID ${userId} supprimé avec succès.`);\r\n    } catch (error) {\r\n        console.error(`serviceAdmin: Erreur lors de la suppression de l'utilisateur ID ${userId}:`, error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --- Fonctions de gestion des professionnels de santé mentale ---\r\n\r\n/**\r\n * Récupère tous les professionnels de santé mentale (validés, en attente, refusés).\r\n * Nécessite les permissions ADMIN.\r\n * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets professionnel.\r\n */\r\nexport const getProfessionnels = async () => {\r\n    try {\r\n        console.log(\"serviceAdmin: Récupération de tous les professionnels de santé mentale via '/professionnels/tous'...\");\r\n        const response = await api.get('/professionnels/tous');\r\n        console.log(\"serviceAdmin: Professionnels récupérés:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"serviceAdmin: Erreur lors de la récupération des professionnels:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Met à jour le statut de validation d'un professionnel de santé mentale.\r\n * Nécessite les permissions ADMIN.\r\n * @param {number} id L'ID du professionnel à valider ou refuser.\r\n * @param {boolean} valide Indique si le professionnel doit être validé (true) ou refusé (false).\r\n * @returns {Promise<object>} Une promesse qui résout avec l'objet professionnel mis à jour.\r\n */\r\nexport const validateProfessionnel = async (id, valide) => {\r\n    try {\r\n        console.log(`serviceAdmin: Envoi de la requête de validation/refus pour professionnel ID: ${id}, valide: ${valide}`);\r\n        const response = await api.patch(\r\n            `/professionnels/validation/${id}`,\r\n            { valide: valide }\r\n        );\r\n        console.log(`serviceAdmin: Réponse de validation/refus pour ID ${id}:`, response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(`serviceAdmin: Erreur lors de la validation/refus du professionnel ID ${id}:`, error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Télécharge le document justificatif d'un professionnel.\r\n * Nécessite les permissions ADMIN.\r\n * @param {string} filename Le nom du fichier à télécharger.\r\n * @returns {Promise<Blob>} Une promesse qui résout avec un objet Blob représentant le fichier.\r\n */\r\nexport const downloadDocumentJustificatif = async (filename) => {\r\n    try {\r\n        console.log(`serviceAdmin: Tentative de téléchargement du document: ${filename}`);\r\n        const response = await api.get(`/professionnels/fichiers/${filename}`, {\r\n            responseType: 'blob',\r\n        });\r\n        console.log(`serviceAdmin: Document '${filename}' téléchargé avec succès.`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(`serviceAdmin: Erreur lors du téléchargement du document '${filename}':`, error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// --- NOUVELLES FONCTIONS DE MODÉRATION DES DISCUSSIONS ET MESSAGES PRIVÉS ---\r\n\r\n/**\r\n * Récupère tous les messages du forum (discussions).\r\n * Nécessite les permissions ADMIN (ou MODERATOR si un tel rôle existe).\r\n * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets message de forum.\r\n */\r\nexport const getDiscussions = async () => {\r\n    try {\r\n        console.log(\"serviceAdmin: Récupération des discussions du forum...\");\r\n        // Confirmez l'endpoint exact avec votre backend. Exemple: /forum/discussions/all\r\n        const response = await api.get('/forum/discussions/all');\r\n        console.log(\"serviceAdmin: Discussions du forum récupérées:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"serviceAdmin: Erreur lors de la récupération des discussions du forum:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Supprime un message spécifique du forum (discussion).\r\n * Nécessite les permissions ADMIN (ou MODERATOR).\r\n * @param {number} id L'ID du message de forum à supprimer.\r\n * @returns {Promise<void>} Une promesse qui résout une fois la suppression réussie.\r\n */\r\nexport const supprimerDiscussion = async (id) => {\r\n    try {\r\n        console.log(`serviceAdmin: Suppression de la discussion du forum ID ${id}...`);\r\n        // Confirmez l'endpoint exact et la méthode HTTP (DELETE). Exemple: /forum/discussions/{id}\r\n        await api.delete(`/forum/discussions/${id}`);\r\n        console.log(`serviceAdmin: Discussion du forum ID ${id} supprimée avec succès.`);\r\n    } catch (error) {\r\n        console.error(`serviceAdmin: Erreur lors de la suppression de la discussion du forum ID ${id}:`, error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Récupère tous les messages privés entre utilisateurs.\r\n * Nécessite les permissions ADMIN (ou MODERATOR).\r\n * @returns {Promise<Array>} Une promesse qui résout avec une liste d'objets message privé.\r\n */\r\nexport const getMessagesPrives = async () => {\r\n    try {\r\n        console.log(\"serviceAdmin: Récupération des messages privés...\");\r\n        // Confirmez l'endpoint exact. Exemple: /messages/prive/all ou /moderation/messages-prives\r\n        const response = await api.get('/messages/prive/all');\r\n        console.log(\"serviceAdmin: Messages privés récupérés:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"serviceAdmin: Erreur lors de la récupération des messages privés:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Supprime un message privé spécifique.\r\n * Nécessite les permissions ADMIN (ou MODERATOR).\r\n * @param {number} id L'ID du message privé à supprimer.\r\n * @returns {Promise<void>} Une promesse qui résout une fois la suppression réussie.\r\n */\r\n \r\n};"
        }
    ]
}