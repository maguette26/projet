{
    "sourceFile": "src/services/servicePsy.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750969191266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750969191266,
            "name": "Commit-0",
            "content": "import axios from 'axios';\r\nimport api from './api'; \r\n\r\n// Disponibilités\r\nexport const getDisponibilites = async () => {\r\n  const response = await api.get('/disponibilites'); \r\n  return response.data;\r\n};\r\n\r\nexport const ajouterDisponibilite = async (dispoData) => {\r\n  const response = await api.post('/disponibilites', dispoData); \r\n  return response.data;\r\n};\r\n\r\nexport const modifierDisponibilite = async (id, dispoData) => {\r\n  const response = await api.put(`/disponibilites/${id}`, dispoData); \r\n  return response.data;\r\n};\r\n\r\nexport const supprimerDisponibilite = async (id) => {\r\n  const response = await api.delete(`/disponibilites/${id}`); \r\n  return response.data;\r\n};\r\n\r\n// Consultations (pour le professionnel)\r\nexport const getConsultations = async () => {\r\n  const response = await axios.get('/api/professionnels/mes-reservations');\r\n  return response.data;\r\n};\r\n\r\n\r\nexport const modifierConsultation = async (id, consultationData) => {\r\n  const response = await api.put(`/professionnel/consultations/${id}`, consultationData);\r\n  return response.data;\r\n};\r\n\r\n// Réservations (pour le professionnel)\r\nexport const getReservations = async (proId) => {\r\n  if (!proId) {\r\n    throw new Error(\"L'ID professionnel est requis pour récupérer les réservations.\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/reservations/pro/${proId}`);\r\n    return response.data; // liste des réservations\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la récupération des réservations pour le pro ${proId}:`, error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mettre à jour le statut d'une réservation\r\nexport const updateReservationStatus = async (reservationId, newStatus) => {\r\n  try {\r\n    // Utilisation de params pour cleaner la requête\r\n    const response = await api.put(`/reservations/statut/${reservationId}`, null, {\r\n      params: { statut: newStatus }\r\n    });\r\n    return response.data; // réservation mise à jour (objet)\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la mise à jour du statut de la réservation ${reservationId}:`, error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Messagerie (pour le professionnel)\r\nexport const envoyerMessage = async (messageData) => {\r\n  const response = await api.post('/professionnel/messages', messageData);\r\n  return response.data;\r\n};\r\n\r\nexport const getMessages = async () => {\r\n  const response = await api.get('/professionnel/messages');\r\n  return response.data;\r\n};\r\n\r\n// Récupère les disponibilités d'un professionnel spécifique, filtrées par date (utilisé par l'utilisateur)\r\nexport const getDisponibilitesFiltrees = async (proId, date) => {\r\n  try {\r\n    const response = await api.get(`/disponibilites/filtrees/${proId}?date=${date}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la récupération des disponibilités filtrées pour le pro ${proId} à la date ${date}:`, error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// --- NOUVELLES FONCTIONS (pour la recherche de professionnels) ---\r\n\r\n/**\r\n * Récupère la liste de tous les professionnels validés.\r\n * Correspond à GET /api/professionnels\r\n * @returns {Promise<Array<object>>} Liste des objets ProfessionnelSanteMentale.\r\n */\r\nexport const getAllProfessionnels = async () => {\r\n  try {\r\n    const response = await api.get('/professionnels'); // Endpoint qui devrait retourner les validés par défaut\r\n    console.log(\"ServiceProfessionnel: Liste des professionnels récupérée:\", response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"ServiceProfessionnel: Erreur lors de la récupération de tous les professionnels:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les détails d'un professionnel spécifique par son ID.\r\n * Correspond à GET /api/professionnels/{id}\r\n * @param {number} id - L'ID du professionnel.\r\n * @returns {Promise<object>} L'objet ProfessionnelSanteMentale.\r\n */\r\nexport const getProfessionnelById = async (id) => {\r\n  try {\r\n    const response = await api.get(`/professionnels/${id}`);\r\n    console.log(`ServiceProfessionnel: Détails du professionnel ${id} récupérés:`, response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`ServiceProfessionnel: Erreur lors de la récupération du professionnel ${id}:`, error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Récupère les disponibilités d'un professionnel par son ID.\r\n * Correspond à GET /api/disponibilites/{proId}\r\n * @param {number} proId - L'ID du professionnel.\r\n * @returns {Promise<Array<object>>} Liste des disponibilités.\r\n */\r\nexport const getDisponibilitesByProId = async (proId) => {\r\n  if (!proId) {\r\n    throw new Error(\"L'ID professionnel est requis pour récupérer les disponibilités.\");\r\n  }\r\n  try {\r\n    const response = await api.get(`/disponibilites/${proId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Erreur lors de la récupération des disponibilités pour le pro ${proId}:`, error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};"
        }
    ]
}