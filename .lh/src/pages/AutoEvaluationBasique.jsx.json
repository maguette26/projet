{
    "sourceFile": "src/pages/AutoEvaluationBasique.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1750871795278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750875637739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,9 @@\n import React, { useState } from 'react';\r\n import Layout from '../components/commun/Layout';\r\n \r\n const AutoEvaluationBasique = () => {\r\n-  const [scores, setScores] = useState({\r\n-    humeur: 3,\r\n-    stress: 3,\r\n-    sommeil: 3,\r\n-  });\r\n+  const [scores, setScores] = useState({ humeur: 3, stress: 3, sommeil: 3 });\r\n   const [submitted, setSubmitted] = useState(false);\r\n \r\n   const handleChange = (e) => {\r\n     const { name, value } = e.target;\r\n@@ -27,47 +23,25 @@\n       <div className=\"max-w-3xl mx-auto p-6\">\r\n         <h1 className=\"text-3xl font-bold mb-6\">Auto-Évaluation Basique</h1>\r\n         {!submitted ? (\r\n           <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n-            <div>\r\n-              <label className=\"block font-semibold mb-2\" htmlFor=\"humeur\">Humeur (1 à 5)</label>\r\n-              <input\r\n-                type=\"range\"\r\n-                id=\"humeur\"\r\n-                name=\"humeur\"\r\n-                min=\"1\"\r\n-                max=\"5\"\r\n-                value={scores.humeur}\r\n-                onChange={handleChange}\r\n-                className=\"w-full\"\r\n-              />\r\n-            </div>\r\n-            <div>\r\n-              <label className=\"block font-semibold mb-2\" htmlFor=\"stress\">Stress (1 à 5)</label>\r\n-              <input\r\n-                type=\"range\"\r\n-                id=\"stress\"\r\n-                name=\"stress\"\r\n-                min=\"1\"\r\n-                max=\"5\"\r\n-                value={scores.stress}\r\n-                onChange={handleChange}\r\n-                className=\"w-full\"\r\n-              />\r\n-            </div>\r\n-            <div>\r\n-              <label className=\"block font-semibold mb-2\" htmlFor=\"sommeil\">Qualité du sommeil (1 à 5)</label>\r\n-              <input\r\n-                type=\"range\"\r\n-                id=\"sommeil\"\r\n-                name=\"sommeil\"\r\n-                min=\"1\"\r\n-                max=\"5\"\r\n-                value={scores.sommeil}\r\n-                onChange={handleChange}\r\n-                className=\"w-full\"\r\n-              />\r\n-            </div>\r\n+            {['humeur', 'stress', 'sommeil'].map((champ) => (\r\n+              <div key={champ}>\r\n+                <label htmlFor={champ} className=\"block font-semibold mb-1 capitalize\">\r\n+                  {champ} (1 à 5)\r\n+                </label>\r\n+                <input\r\n+                  type=\"range\"\r\n+                  id={champ}\r\n+                  name={champ}\r\n+                  min=\"1\"\r\n+                  max=\"5\"\r\n+                  value={scores[champ]}\r\n+                  onChange={handleChange}\r\n+                  className=\"w-full\"\r\n+                />\r\n+              </div>\r\n+            ))}\r\n             <button\r\n               type=\"submit\"\r\n               className=\"px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n             >\r\n"
                },
                {
                    "date": 1750875927802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,86 @@\n-// src/pages/AutoEvaluationBasique.jsx\r\n-import React, { useState } from 'react';\r\n+// 📄 src/pages/MiniDefiGratuite.jsx\r\n+import React, { useState, useEffect } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n import Layout from '../components/commun/Layout';\r\n+import { CheckCircle, RefreshCcw } from 'lucide-react';\r\n+import { motion } from 'framer-motion';\r\n \r\n-const AutoEvaluationBasique = () => {\r\n-  const [scores, setScores] = useState({ humeur: 3, stress: 3, sommeil: 3 });\r\n-  const [submitted, setSubmitted] = useState(false);\r\n+const MiniDefiGratuite = () => {\r\n+  const [termine, setTermine] = useState(false);\r\n+  const navigate = useNavigate();\r\n \r\n-  const handleChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    setScores(prev => ({ ...prev, [name]: Number(value) }));\r\n-  };\r\n+  useEffect(() => {\r\n+    const done = localStorage.getItem('miniDefiGratuiteTermine');\r\n+    if (done === 'true') setTermine(true);\r\n+  }, []);\r\n \r\n-  const handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n-    setSubmitted(true);\r\n+  useEffect(() => {\r\n+    if (termine) {\r\n+      const timer = setTimeout(() => {\r\n+        navigate('/ressources');\r\n+      }, 4000);\r\n+      return () => clearTimeout(timer);\r\n+    }\r\n+  }, [termine, navigate]);\r\n+\r\n+  const handleTerminer = () => {\r\n+    setTermine(true);\r\n+    localStorage.setItem('miniDefiGratuiteTermine', 'true');\r\n   };\r\n \r\n-  const moyenne = ((scores.humeur + scores.stress + scores.sommeil) / 3).toFixed(2);\r\n-\r\n   return (\r\n     <Layout>\r\n-      <div className=\"max-w-3xl mx-auto p-6\">\r\n-        <h1 className=\"text-3xl font-bold mb-6\">Auto-Évaluation Basique</h1>\r\n-        {!submitted ? (\r\n-          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n-            {['humeur', 'stress', 'sommeil'].map((champ) => (\r\n-              <div key={champ}>\r\n-                <label htmlFor={champ} className=\"block font-semibold mb-1 capitalize\">\r\n-                  {champ} (1 à 5)\r\n-                </label>\r\n-                <input\r\n-                  type=\"range\"\r\n-                  id={champ}\r\n-                  name={champ}\r\n-                  min=\"1\"\r\n-                  max=\"5\"\r\n-                  value={scores[champ]}\r\n-                  onChange={handleChange}\r\n-                  className=\"w-full\"\r\n-                />\r\n-              </div>\r\n-            ))}\r\n-            <button\r\n-              type=\"submit\"\r\n-              className=\"px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n+      <div className=\"max-w-3xl mx-auto p-6 bg-white/80 shadow-2xl rounded-2xl mt-10\">\r\n+        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">🧘‍♀️ Mini Défi Gratuit</h1>\r\n+        {!termine ? (\r\n+          <>\r\n+            <motion.p\r\n+              className=\"mb-4 text-lg text-gray-700\"\r\n+              initial={{ opacity: 0, y: 20 }}\r\n+              animate={{ opacity: 1, y: 0 }}\r\n             >\r\n-              Valider\r\n-            </button>\r\n-          </form>\r\n+              Chaque jour, prenez 5 minutes pour vous reconnecter à vous-même avec ces petits gestes de bien-être.\r\n+            </motion.p>\r\n+            <ul className=\"list-disc pl-6 text-indigo-900 space-y-2\">\r\n+              <li>🌬️ Jour 1 : Respiration profonde 5 minutes</li>\r\n+              <li>📴 Jour 2 : Se déconnecter des écrans 10 minutes</li>\r\n+              <li>💧 Jour 3 : Boire un grand verre d'eau au réveil</li>\r\n+            </ul>\r\n+            <motion.button\r\n+              onClick={handleTerminer}\r\n+              whileHover={{ scale: 1.05 }}\r\n+              whileTap={{ scale: 0.95 }}\r\n+              className=\"mt-6 flex items-center gap-2 px-5 py-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition-all\"\r\n+            >\r\n+              <CheckCircle className=\"w-5 h-5\" />\r\n+              J'ai terminé ce défi !\r\n+            </motion.button>\r\n+          </>\r\n         ) : (\r\n-          <div>\r\n-            <p className=\"text-lg mb-4\">Merci d'avoir complété cette auto-évaluation.</p>\r\n-            <p className=\"font-semibold\">Score moyen : {moyenne} / 5</p>\r\n+          <>\r\n+            <motion.p\r\n+              className=\"text-green-600 font-semibold text-lg animate-pulse\"\r\n+              initial={{ opacity: 0 }}\r\n+              animate={{ opacity: 1 }}\r\n+              transition={{ duration: 1 }}\r\n+            >\r\n+              🎉 Bravo pour avoir terminé le mini défi ! Redirection vers les ressources...\r\n+            </motion.p>\r\n             <button\r\n-              onClick={() => setSubmitted(false)}\r\n-              className=\"mt-4 px-4 py-2 bg-gray-300 rounded hover:bg-gray-400\"\r\n+              onClick={() => {\r\n+                setTermine(false);\r\n+                localStorage.removeItem('miniDefiGratuiteTermine');\r\n+              }}\r\n+              className=\"mt-4 flex items-center gap-2 px-4 py-2 border border-indigo-600 text-indigo-600 rounded-full hover:bg-indigo-100\"\r\n             >\r\n-              Réinitialiser\r\n+              <RefreshCcw className=\"w-4 h-4\" />\r\n+              Refaire le défi\r\n             </button>\r\n-          </div>\r\n+          </>\r\n         )}\r\n       </div>\r\n     </Layout>\r\n   );\r\n };\r\n \r\n-export default AutoEvaluationBasique;\r\n+export default MiniDefiGratuite;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750876012323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,86 +1,89 @@\n-// 📄 src/pages/MiniDefiGratuite.jsx\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n+// 📄 src/pages/AutoEvaluationBasique.jsx\r\n+import React, { useState } from 'react';\r\n import Layout from '../components/commun/Layout';\r\n-import { CheckCircle, RefreshCcw } from 'lucide-react';\r\n+import { Smile, Frown, Moon, CheckCircle, RefreshCcw } from 'lucide-react';\r\n import { motion } from 'framer-motion';\r\n \r\n-const MiniDefiGratuite = () => {\r\n-  const [termine, setTermine] = useState(false);\r\n-  const navigate = useNavigate();\r\n+const AutoEvaluationBasique = () => {\r\n+  const [scores, setScores] = useState({ humeur: 3, stress: 3, sommeil: 3 });\r\n+  const [submitted, setSubmitted] = useState(false);\r\n \r\n-  useEffect(() => {\r\n-    const done = localStorage.getItem('miniDefiGratuiteTermine');\r\n-    if (done === 'true') setTermine(true);\r\n-  }, []);\r\n+  const handleChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    setScores(prev => ({ ...prev, [name]: Number(value) }));\r\n+  };\r\n \r\n-  useEffect(() => {\r\n-    if (termine) {\r\n-      const timer = setTimeout(() => {\r\n-        navigate('/ressources');\r\n-      }, 4000);\r\n-      return () => clearTimeout(timer);\r\n-    }\r\n-  }, [termine, navigate]);\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    setSubmitted(true);\r\n+  };\r\n \r\n-  const handleTerminer = () => {\r\n-    setTermine(true);\r\n-    localStorage.setItem('miniDefiGratuiteTermine', 'true');\r\n+  const moyenne = ((scores.humeur + scores.stress + scores.sommeil) / 3).toFixed(2);\r\n+\r\n+  const getEmoji = (value) => {\r\n+    if (value <= 2) return <Frown className=\"inline w-5 h-5 text-red-400\" />;\r\n+    if (value === 3) return <Moon className=\"inline w-5 h-5 text-yellow-400\" />;\r\n+    return <Smile className=\"inline w-5 h-5 text-green-500\" />;\r\n   };\r\n \r\n   return (\r\n     <Layout>\r\n-      <div className=\"max-w-3xl mx-auto p-6 bg-white/80 shadow-2xl rounded-2xl mt-10\">\r\n-        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">🧘‍♀️ Mini Défi Gratuit</h1>\r\n-        {!termine ? (\r\n-          <>\r\n-            <motion.p\r\n-              className=\"mb-4 text-lg text-gray-700\"\r\n-              initial={{ opacity: 0, y: 20 }}\r\n-              animate={{ opacity: 1, y: 0 }}\r\n+      <div className=\"max-w-3xl mx-auto p-6 bg-white/80 shadow-xl rounded-2xl mt-10\">\r\n+        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">📝 Auto-Évaluation Basique</h1>\r\n+        {!submitted ? (\r\n+          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n+            {['humeur', 'stress', 'sommeil'].map((champ) => (\r\n+              <div key={champ}>\r\n+                <label htmlFor={champ} className=\"block font-semibold mb-1 capitalize text-gray-700\">\r\n+                  {champ} (1 à 5)\r\n+                </label>\r\n+                <input\r\n+                  type=\"range\"\r\n+                  id={champ}\r\n+                  name={champ}\r\n+                  min=\"1\"\r\n+                  max=\"5\"\r\n+                  value={scores[champ]}\r\n+                  onChange={handleChange}\r\n+                  className=\"w-full accent-indigo-600\"\r\n+                />\r\n+                <p className=\"text-sm text-gray-600 mt-1\">État : {getEmoji(scores[champ])}</p>\r\n+              </div>\r\n+            ))}\r\n+            <button\r\n+              type=\"submit\"\r\n+              className=\"flex items-center gap-2 px-6 py-2 bg-indigo-600 text-white rounded-full hover:bg-indigo-700\"\r\n             >\r\n\\ No newline at end of file\n-              Chaque jour, prenez 5 minutes pour vous reconnecter à vous-même avec ces petits gestes de bien-être.\r\n-            </motion.p>\r\n-            <ul className=\"list-disc pl-6 text-indigo-900 space-y-2\">\r\n-              <li>🌬️ Jour 1 : Respiration profonde 5 minutes</li>\r\n-              <li>📴 Jour 2 : Se déconnecter des écrans 10 minutes</li>\r\n-              <li>💧 Jour 3 : Boire un grand verre d'eau au réveil</li>\r\n-            </ul>\r\n-            <motion.button\r\n-              onClick={handleTerminer}\r\n-              whileHover={{ scale: 1.05 }}\r\n-              whileTap={{ scale: 0.95 }}\r\n-              className=\"mt-6 flex items-center gap-2 px-5 py-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700 transition-all\"\r\n-            >\r\n               <CheckCircle className=\"w-5 h-5\" />\r\n-              J'ai terminé ce défi !\r\n-            </motion.button>\r\n-          </>\r\n+              Valider\r\n+            </button>\r\n+          </form>\r\n         ) : (\r\n-          <>\r\n-            <motion.p\r\n-              className=\"text-green-600 font-semibold text-lg animate-pulse\"\r\n-              initial={{ opacity: 0 }}\r\n-              animate={{ opacity: 1 }}\r\n-              transition={{ duration: 1 }}\r\n-            >\r\n-              🎉 Bravo pour avoir terminé le mini défi ! Redirection vers les ressources...\r\n-            </motion.p>\r\n+          <motion.div\r\n+            initial={{ opacity: 0, scale: 0.9 }}\r\n+            animate={{ opacity: 1, scale: 1 }}\r\n+            className=\"text-center\"\r\n+          >\r\n+            <p className=\"text-lg mb-4\">Merci d'avoir complété cette auto-évaluation.</p>\r\n+            <p className=\"text-xl font-semibold text-indigo-700\">Score moyen : {moyenne} / 5</p>\r\n+            <div className=\"mt-4 w-full h-3 bg-indigo-100 rounded-full\">\r\n+              <div\r\n+                className=\"h-full bg-indigo-600 rounded-full\"\r\n+                style={{ width: `${(moyenne / 5) * 100}%` }}\r\n+              ></div>\r\n+            </div>\r\n             <button\r\n-              onClick={() => {\r\n-                setTermine(false);\r\n-                localStorage.removeItem('miniDefiGratuiteTermine');\r\n-              }}\r\n-              className=\"mt-4 flex items-center gap-2 px-4 py-2 border border-indigo-600 text-indigo-600 rounded-full hover:bg-indigo-100\"\r\n+              onClick={() => setSubmitted(false)}\r\n+              className=\"mt-6 flex items-center gap-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300\"\r\n             >\r\n-              <RefreshCcw className=\"w-4 h-4\" />\r\n-              Refaire le défi\r\n+              <RefreshCcw className=\"w-5 h-5\" />\r\n+              Réinitialiser\r\n             </button>\r\n-          </>\r\n+          </motion.div>\r\n         )}\r\n       </div>\r\n     </Layout>\r\n   );\r\n };\r\n \r\n-export default MiniDefiGratuite;\n+export default AutoEvaluationBasique;\r\n"
                },
                {
                    "date": 1750876801802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,89 +1,119 @@\n-// 📄 src/pages/AutoEvaluationBasique.jsx\r\n-import React, { useState } from 'react';\r\n+// 📄 src/pages/AutoEvaluationBasique.jsx — version enrichie avec journal et progression\r\n+import React, { useState, useEffect } from 'react';\r\n import Layout from '../components/commun/Layout';\r\n-import { Smile, Frown, Moon, CheckCircle, RefreshCcw } from 'lucide-react';\r\n+import { CheckCircle, RefreshCcw } from 'lucide-react';\r\n import { motion } from 'framer-motion';\r\n \r\n+const questions = [\r\n+  {\r\n+    id: 'humeur',\r\n+    label: 'Comment évalueriez-vous votre humeur aujourd’hui ?',\r\n+  },\r\n+  {\r\n+    id: 'stress',\r\n+    label: 'Niveau de stress ressenti ?',\r\n+  },\r\n+  {\r\n+    id: 'sommeil',\r\n+    label: 'Qualité de votre sommeil ?',\r\n+  },\r\n+];\r\n+\r\n const AutoEvaluationBasique = () => {\r\n+  const [etape, setEtape] = useState(0);\r\n   const [scores, setScores] = useState({ humeur: 3, stress: 3, sommeil: 3 });\r\n+  const [reflexion, setReflexion] = useState('');\r\n   const [submitted, setSubmitted] = useState(false);\r\n \r\n+  useEffect(() => {\r\n+    const saved = localStorage.getItem('autoEvaluationTerminee');\r\n+    if (saved === 'true') setSubmitted(true);\r\n+  }, []);\r\n+\r\n+  const handleNext = () => {\r\n+    if (etape < questions.length - 1) {\r\n+      setEtape(etape + 1);\r\n+    } else {\r\n+      setSubmitted(true);\r\n+      localStorage.setItem('autoEvaluationTerminee', 'true');\r\n+    }\r\n+  };\r\n+\r\n   const handleChange = (e) => {\r\n     const { name, value } = e.target;\r\n     setScores(prev => ({ ...prev, [name]: Number(value) }));\r\n   };\r\n \r\n-  const handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n-    setSubmitted(true);\r\n+  const handleReset = () => {\r\n+    setScores({ humeur: 3, stress: 3, sommeil: 3 });\r\n+    setReflexion('');\r\n+    setEtape(0);\r\n+    setSubmitted(false);\r\n+    localStorage.removeItem('autoEvaluationTerminee');\r\n   };\r\n \r\n   const moyenne = ((scores.humeur + scores.stress + scores.sommeil) / 3).toFixed(2);\r\n \r\n-  const getEmoji = (value) => {\r\n-    if (value <= 2) return <Frown className=\"inline w-5 h-5 text-red-400\" />;\r\n-    if (value === 3) return <Moon className=\"inline w-5 h-5 text-yellow-400\" />;\r\n-    return <Smile className=\"inline w-5 h-5 text-green-500\" />;\r\n-  };\r\n-\r\n   return (\r\n     <Layout>\r\n       <div className=\"max-w-3xl mx-auto p-6 bg-white/80 shadow-xl rounded-2xl mt-10\">\r\n-        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">📝 Auto-Évaluation Basique</h1>\r\n+        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">🧠 Auto-Évaluation Basique</h1>\r\n         {!submitted ? (\r\n-          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n-            {['humeur', 'stress', 'sommeil'].map((champ) => (\r\n-              <div key={champ}>\r\n-                <label htmlFor={champ} className=\"block font-semibold mb-1 capitalize text-gray-700\">\r\n-                  {champ} (1 à 5)\r\n-                </label>\r\n-                <input\r\n-                  type=\"range\"\r\n-                  id={champ}\r\n-                  name={champ}\r\n-                  min=\"1\"\r\n-                  max=\"5\"\r\n-                  value={scores[champ]}\r\n-                  onChange={handleChange}\r\n-                  className=\"w-full accent-indigo-600\"\r\n-                />\r\n-                <p className=\"text-sm text-gray-600 mt-1\">État : {getEmoji(scores[champ])}</p>\r\n+          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n+            <p className=\"text-lg text-gray-700 mb-4\">{questions[etape].label}</p>\r\n+            <input\r\n+              type=\"range\"\r\n+              name={questions[etape].id}\r\n+              min=\"1\"\r\n+              max=\"5\"\r\n+              value={scores[questions[etape].id]}\r\n+              onChange={handleChange}\r\n+              className=\"w-full mb-2\"\r\n+            />\r\n+            <div className=\"text-sm text-gray-600 mb-4\">Valeur : {scores[questions[etape].id]}</div>\r\n+\r\n+            {etape === questions.length - 1 && (\r\n+              <div>\r\n+                <label className=\"block text-sm font-medium text-gray-700 mb-1\">📝 Une réflexion à partager ?</label>\r\n+                <textarea\r\n+                  value={reflexion}\r\n+                  onChange={(e) => setReflexion(e.target.value)}\r\n+                  className=\"w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n+                  rows={3}\r\n+                ></textarea>\r\n               </div>\r\n-            ))}\r\n+            )}\r\n+\r\n             <button\r\n-              type=\"submit\"\r\n-              className=\"flex items-center gap-2 px-6 py-2 bg-indigo-600 text-white rounded-full hover:bg-indigo-700\"\r\n+              onClick={handleNext}\r\n+              className=\"mt-6 flex items-center gap-2 px-5 py-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700\"\r\n             >\r\n               <CheckCircle className=\"w-5 h-5\" />\r\n-              Valider\r\n+              {etape === questions.length - 1 ? 'Terminer' : 'Suivant'}\r\n             </button>\r\n-          </form>\r\n+          </motion.div>\r\n         ) : (\r\n           <motion.div\r\n-            initial={{ opacity: 0, scale: 0.9 }}\r\n-            animate={{ opacity: 1, scale: 1 }}\r\n-            className=\"text-center\"\r\n+            className=\"text-green-700 text-lg font-semibold animate-pulse\"\r\n+            initial={{ opacity: 0 }}\r\n+            animate={{ opacity: 1 }}\r\n           >\r\n-            <p className=\"text-lg mb-4\">Merci d'avoir complété cette auto-évaluation.</p>\r\n-            <p className=\"text-xl font-semibold text-indigo-700\">Score moyen : {moyenne} / 5</p>\r\n-            <div className=\"mt-4 w-full h-3 bg-indigo-100 rounded-full\">\r\n-              <div\r\n-                className=\"h-full bg-indigo-600 rounded-full\"\r\n-                style={{ width: `${(moyenne / 5) * 100}%` }}\r\n-              ></div>\r\n-            </div>\r\n+            Merci pour votre évaluation 🌟\r\n+            <p className=\"mt-2\">Score moyen : <span className=\"font-bold\">{moyenne} / 5</span></p>\r\n+            {reflexion && (\r\n+              <p className=\"mt-2 text-sm text-gray-700 italic\">“{reflexion}”</p>\r\n+            )}\r\n             <button\r\n-              onClick={() => setSubmitted(false)}\r\n-              className=\"mt-6 flex items-center gap-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300\"\r\n+              onClick={handleReset}\r\n+              className=\"mt-6 flex items-center gap-2 px-4 py-2 border border-indigo-600 text-indigo-600 rounded-full hover:bg-indigo-100\"\r\n             >\r\n-              <RefreshCcw className=\"w-5 h-5\" />\r\n-              Réinitialiser\r\n+              <RefreshCcw className=\"w-4 h-4\" /> Réinitialiser\r\n             </button>\r\n           </motion.div>\r\n         )}\r\n       </div>\r\n     </Layout>\r\n   );\r\n };\r\n \r\n-export default AutoEvaluationBasique;\r\n+export default AutoEvaluationBasique;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750876855032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,89 @@\n-// 📄 src/pages/AutoEvaluationBasique.jsx — version enrichie avec journal et progression\r\n-import React, { useState, useEffect } from 'react';\r\n+// 📄 src/pages/AutoEvaluationBasique.jsx\r\n+import React, { useState } from 'react';\r\n import Layout from '../components/commun/Layout';\r\n-import { CheckCircle, RefreshCcw } from 'lucide-react';\r\n+import { Smile, Frown, Moon, CheckCircle, RefreshCcw } from 'lucide-react';\r\n import { motion } from 'framer-motion';\r\n \r\n-const questions = [\r\n-  {\r\n-    id: 'humeur',\r\n-    label: 'Comment évalueriez-vous votre humeur aujourd’hui ?',\r\n-  },\r\n-  {\r\n-    id: 'stress',\r\n-    label: 'Niveau de stress ressenti ?',\r\n-  },\r\n-  {\r\n-    id: 'sommeil',\r\n-    label: 'Qualité de votre sommeil ?',\r\n-  },\r\n-];\r\n-\r\n const AutoEvaluationBasique = () => {\r\n-  const [etape, setEtape] = useState(0);\r\n   const [scores, setScores] = useState({ humeur: 3, stress: 3, sommeil: 3 });\r\n-  const [reflexion, setReflexion] = useState('');\r\n   const [submitted, setSubmitted] = useState(false);\r\n \r\n-  useEffect(() => {\r\n-    const saved = localStorage.getItem('autoEvaluationTerminee');\r\n-    if (saved === 'true') setSubmitted(true);\r\n-  }, []);\r\n-\r\n-  const handleNext = () => {\r\n-    if (etape < questions.length - 1) {\r\n-      setEtape(etape + 1);\r\n-    } else {\r\n-      setSubmitted(true);\r\n-      localStorage.setItem('autoEvaluationTerminee', 'true');\r\n-    }\r\n-  };\r\n-\r\n   const handleChange = (e) => {\r\n     const { name, value } = e.target;\r\n     setScores(prev => ({ ...prev, [name]: Number(value) }));\r\n   };\r\n \r\n-  const handleReset = () => {\r\n-    setScores({ humeur: 3, stress: 3, sommeil: 3 });\r\n-    setReflexion('');\r\n-    setEtape(0);\r\n-    setSubmitted(false);\r\n-    localStorage.removeItem('autoEvaluationTerminee');\r\n+  const handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+    setSubmitted(true);\r\n   };\r\n \r\n   const moyenne = ((scores.humeur + scores.stress + scores.sommeil) / 3).toFixed(2);\r\n \r\n+  const getEmoji = (value) => {\r\n+    if (value <= 2) return <Frown className=\"inline w-5 h-5 text-red-400\" />;\r\n+    if (value === 3) return <Moon className=\"inline w-5 h-5 text-yellow-400\" />;\r\n+    return <Smile className=\"inline w-5 h-5 text-green-500\" />;\r\n+  };\r\n+\r\n   return (\r\n     <Layout>\r\n       <div className=\"max-w-3xl mx-auto p-6 bg-white/80 shadow-xl rounded-2xl mt-10\">\r\n-        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">🧠 Auto-Évaluation Basique</h1>\r\n+        <h1 className=\"text-4xl font-bold mb-6 text-indigo-700\">📝 Auto-Évaluation Basique</h1>\r\n         {!submitted ? (\r\n-          <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n-            <p className=\"text-lg text-gray-700 mb-4\">{questions[etape].label}</p>\r\n-            <input\r\n-              type=\"range\"\r\n-              name={questions[etape].id}\r\n-              min=\"1\"\r\n-              max=\"5\"\r\n-              value={scores[questions[etape].id]}\r\n-              onChange={handleChange}\r\n-              className=\"w-full mb-2\"\r\n-            />\r\n-            <div className=\"text-sm text-gray-600 mb-4\">Valeur : {scores[questions[etape].id]}</div>\r\n-\r\n-            {etape === questions.length - 1 && (\r\n-              <div>\r\n-                <label className=\"block text-sm font-medium text-gray-700 mb-1\">📝 Une réflexion à partager ?</label>\r\n-                <textarea\r\n-                  value={reflexion}\r\n-                  onChange={(e) => setReflexion(e.target.value)}\r\n-                  className=\"w-full p-2 rounded border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-400\"\r\n-                  rows={3}\r\n-                ></textarea>\r\n+          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n+            {['humeur', 'stress', 'sommeil'].map((champ) => (\r\n+              <div key={champ}>\r\n+                <label htmlFor={champ} className=\"block font-semibold mb-1 capitalize text-gray-700\">\r\n+                  {champ} (1 à 5)\r\n+                </label>\r\n+                <input\r\n+                  type=\"range\"\r\n+                  id={champ}\r\n+                  name={champ}\r\n+                  min=\"1\"\r\n+                  max=\"5\"\r\n+                  value={scores[champ]}\r\n+                  onChange={handleChange}\r\n+                  className=\"w-full accent-indigo-600\"\r\n+                />\r\n+                <p className=\"text-sm text-gray-600 mt-1\">État : {getEmoji(scores[champ])}</p>\r\n               </div>\r\n-            )}\r\n-\r\n+            ))}\r\n             <button\r\n-              onClick={handleNext}\r\n\\ No newline at end of file\n-              className=\"mt-6 flex items-center gap-2 px-5 py-3 bg-indigo-600 text-white rounded-full hover:bg-indigo-700\"\r\n+              type=\"submit\"\r\n+              className=\"flex items-center gap-2 px-6 py-2 bg-indigo-600 text-white rounded-full hover:bg-indigo-700\"\r\n             >\r\n               <CheckCircle className=\"w-5 h-5\" />\r\n-              {etape === questions.length - 1 ? 'Terminer' : 'Suivant'}\r\n+              Valider\r\n             </button>\r\n-          </motion.div>\r\n+          </form>\r\n         ) : (\r\n           <motion.div\r\n-            className=\"text-green-700 text-lg font-semibold animate-pulse\"\r\n-            initial={{ opacity: 0 }}\r\n-            animate={{ opacity: 1 }}\r\n+            initial={{ opacity: 0, scale: 0.9 }}\r\n+            animate={{ opacity: 1, scale: 1 }}\r\n+            className=\"text-center\"\r\n           >\r\n-            Merci pour votre évaluation 🌟\r\n-            <p className=\"mt-2\">Score moyen : <span className=\"font-bold\">{moyenne} / 5</span></p>\r\n-            {reflexion && (\r\n-              <p className=\"mt-2 text-sm text-gray-700 italic\">“{reflexion}”</p>\r\n-            )}\r\n+            <p className=\"text-lg mb-4\">Merci d'avoir complété cette auto-évaluation.</p>\r\n+            <p className=\"text-xl font-semibold text-indigo-700\">Score moyen : {moyenne} / 5</p>\r\n+            <div className=\"mt-4 w-full h-3 bg-indigo-100 rounded-full\">\r\n+              <div\r\n+                className=\"h-full bg-indigo-600 rounded-full\"\r\n+                style={{ width: `${(moyenne / 5) * 100}%` }}\r\n+              ></div>\r\n+            </div>\r\n             <button\r\n-              onClick={handleReset}\r\n-              className=\"mt-6 flex items-center gap-2 px-4 py-2 border border-indigo-600 text-indigo-600 rounded-full hover:bg-indigo-100\"\r\n+              onClick={() => setSubmitted(false)}\r\n+              className=\"mt-6 flex items-center gap-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-full hover:bg-gray-300\"\r\n             >\r\n-              <RefreshCcw className=\"w-4 h-4\" /> Réinitialiser\r\n+              <RefreshCcw className=\"w-5 h-5\" />\r\n+              Réinitialiser\r\n             </button>\r\n           </motion.div>\r\n         )}\r\n       </div>\r\n     </Layout>\r\n   );\r\n };\r\n \r\n-export default AutoEvaluationBasique;\n+export default AutoEvaluationBasique;\r\n"
                }
            ],
            "date": 1750871795278,
            "name": "Commit-0",
            "content": "// src/pages/AutoEvaluationBasique.jsx\r\nimport React, { useState } from 'react';\r\nimport Layout from '../components/commun/Layout';\r\n\r\nconst AutoEvaluationBasique = () => {\r\n  const [scores, setScores] = useState({\r\n    humeur: 3,\r\n    stress: 3,\r\n    sommeil: 3,\r\n  });\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setScores(prev => ({ ...prev, [name]: Number(value) }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSubmitted(true);\r\n  };\r\n\r\n  const moyenne = ((scores.humeur + scores.stress + scores.sommeil) / 3).toFixed(2);\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"max-w-3xl mx-auto p-6\">\r\n        <h1 className=\"text-3xl font-bold mb-6\">Auto-Évaluation Basique</h1>\r\n        {!submitted ? (\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            <div>\r\n              <label className=\"block font-semibold mb-2\" htmlFor=\"humeur\">Humeur (1 à 5)</label>\r\n              <input\r\n                type=\"range\"\r\n                id=\"humeur\"\r\n                name=\"humeur\"\r\n                min=\"1\"\r\n                max=\"5\"\r\n                value={scores.humeur}\r\n                onChange={handleChange}\r\n                className=\"w-full\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block font-semibold mb-2\" htmlFor=\"stress\">Stress (1 à 5)</label>\r\n              <input\r\n                type=\"range\"\r\n                id=\"stress\"\r\n                name=\"stress\"\r\n                min=\"1\"\r\n                max=\"5\"\r\n                value={scores.stress}\r\n                onChange={handleChange}\r\n                className=\"w-full\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"block font-semibold mb-2\" htmlFor=\"sommeil\">Qualité du sommeil (1 à 5)</label>\r\n              <input\r\n                type=\"range\"\r\n                id=\"sommeil\"\r\n                name=\"sommeil\"\r\n                min=\"1\"\r\n                max=\"5\"\r\n                value={scores.sommeil}\r\n                onChange={handleChange}\r\n                className=\"w-full\"\r\n              />\r\n            </div>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700\"\r\n            >\r\n              Valider\r\n            </button>\r\n          </form>\r\n        ) : (\r\n          <div>\r\n            <p className=\"text-lg mb-4\">Merci d'avoir complété cette auto-évaluation.</p>\r\n            <p className=\"font-semibold\">Score moyen : {moyenne} / 5</p>\r\n            <button\r\n              onClick={() => setSubmitted(false)}\r\n              className=\"mt-4 px-4 py-2 bg-gray-300 rounded hover:bg-gray-400\"\r\n            >\r\n              Réinitialiser\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default AutoEvaluationBasique;\r\n"
        }
    ]
}