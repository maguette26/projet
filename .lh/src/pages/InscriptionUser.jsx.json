{
    "sourceFile": "src/pages/InscriptionUser.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750968876204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750968876204,
            "name": "Commit-0",
            "content": "// src/pages/InscriptionUser.jsx\r\nimport React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport api from '../services/api';\r\nimport Layout from '../components/commun/Layout';\r\n\r\nconst InscriptionUser = () => {\r\n  const [formData, setFormData] = useState({\r\n    nom: '',\r\n    prenom: '',\r\n    email: '',\r\n    motDePasse: '',\r\n    confirmerMotDePasse: '',\r\n    telephone: ''\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [success, setSuccess] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const validatePassword = (password) => {\r\n    const errors = [];\r\n    if (password.length < 8) errors.push(\"Le mot de passe doit contenir au moins 8 caractères.\");\r\n    if (!/[A-Z]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins une lettre majuscule.\");\r\n    if (!/[a-z]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins une lettre minuscule.\");\r\n    if (!/[0-9]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins un chiffre.\");\r\n    if (!/[^A-Za-z0-9]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins un caractère spécial.\");\r\n    return errors;\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n\r\n    if (!formData.nom.trim()) {\r\n      newErrors.nom = \"Le nom est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.prenom.trim()) {\r\n      newErrors.prenom = \"Le prénom est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.email.trim()) {\r\n      newErrors.email = \"L'adresse email est obligatoire.\";\r\n      isValid = false;\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = \"L'adresse email n'est pas valide.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.telephone.trim()) {\r\n      newErrors.telephone = \"Le numéro de téléphone est obligatoire.\";\r\n      isValid = false;\r\n    } else if (!/^\\+?[0-9\\s-]{8,}$/.test(formData.telephone)) {\r\n      newErrors.telephone = \"Le format du numéro de téléphone n'est pas valide.\";\r\n      isValid = false;\r\n    }\r\n    const passwordErrors = validatePassword(formData.motDePasse);\r\n    if (passwordErrors.length > 0) {\r\n      newErrors.motDePasse = passwordErrors.join(\" \");\r\n      isValid = false;\r\n    }\r\n    if (formData.motDePasse !== formData.confirmerMotDePasse) {\r\n      newErrors.confirmerMotDePasse = \"Les mots de passe ne correspondent pas.\";\r\n      isValid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n\r\n    if (errors[name]) {\r\n      setErrors(prev => ({ ...prev, [name]: null }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setErrors({});\r\n    setSuccess(null);\r\n\r\n    if (!validateForm()) return;\r\n\r\n    try {\r\n      const dataToSubmit = {\r\n        nom: formData.nom,\r\n        prenom: formData.prenom,\r\n        email: formData.email,\r\n        motDePasse: formData.motDePasse,\r\n        confirmMotDePasse: formData.confirmerMotDePasse,\r\n        telephone: formData.telephone\r\n      };\r\n\r\n      await api.post('/auth/register', dataToSubmit);\r\n\r\n      setSuccess('Inscription réussie ! Vous allez être redirigé...');\r\n      setTimeout(() => navigate('/ '), 2000);\r\n    } catch (err) {\r\n      console.error('Erreur d\\'inscription:', err.response?.data || err.message);\r\n      const backendErrors = err.response?.data?.errors;\r\n      if (backendErrors && Array.isArray(backendErrors)) {\r\n        const errorMessages = backendErrors.map(e => e.defaultMessage || e.message).join(' ');\r\n        setErrors(prev => ({ ...prev, general: errorMessages }));\r\n      } else if (err.response?.data?.message) {\r\n        setErrors(prev => ({ ...prev, general: err.response.data.message }));\r\n      } else {\r\n        setErrors(prev => ({ ...prev, general: 'Erreur lors de l\\'inscription. Veuillez réessayer.' }));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-tr from-indigo-50 to-white px-4 py-12\">\r\n        <div className=\"w-full max-w-md bg-white rounded-3xl shadow-xl p-10\">\r\n          <h2 className=\"text-3xl font-bold text-indigo-700 mb-4 text-center\">\r\n            Inscription Utilisateur\r\n          </h2>\r\n          <p className=\"text-center text-gray-600 mb-8\">\r\n            Créez votre compte ici\r\n          </p>\r\n\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            {errors.general && (\r\n              <div className=\"bg-red-100 text-red-700 px-4 py-2 rounded-md text-sm mb-4 text-center\">\r\n                {errors.general}\r\n              </div>\r\n            )}\r\n            {success && (\r\n              <div className=\"bg-green-100 text-green-700 px-4 py-2 rounded-md text-sm mb-4 text-center\">\r\n                {success}\r\n              </div>\r\n            )}\r\n\r\n            {[\r\n              { id: 'nom', label: 'Nom', type: 'text', autoComplete: 'family-name' },\r\n              { id: 'prenom', label: 'Prénom', type: 'text', autoComplete: 'given-name' },\r\n              { id: 'email', label: 'Adresse email', type: 'email', autoComplete: 'email' },\r\n              { id: 'telephone', label: 'Téléphone  ', type: 'tel', autoComplete: 'tel' },\r\n              { id: 'motDePasse', label: 'Mot de passe', type: 'password', autoComplete: 'new-password' },\r\n              { id: 'confirmerMotDePasse', label: 'Confirmer le mot de passe', type: 'password', autoComplete: 'new-password' },\r\n            ].map(({ id, label, type, autoComplete }) => (\r\n              <div key={id}>\r\n                <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 mb-1\">{label}</label>\r\n                <input\r\n                  id={id}\r\n                  name={id}\r\n                  type={type}\r\n                  autoComplete={autoComplete}\r\n                  value={formData[id]}\r\n                  onChange={handleChange}\r\n                  required\r\n                  className={`appearance-none block w-full px-4 py-2 border rounded-lg text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\r\n                    ${errors[id] ? 'border-red-500' : 'border-gray-300'}`}\r\n                  placeholder={label}\r\n                />\r\n                {errors[id] && <p className=\"text-red-500 text-xs mt-1\">{errors[id]}</p>}\r\n              </div>\r\n            ))}\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"w-full py-3 mt-4 bg-indigo-600 text-white font-semibold rounded-xl hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition\"\r\n            >\r\n              S'inscrire\r\n            </button>\r\n          </form>\r\n\r\n          <p className=\"mt-6 text-center text-gray-700 text-sm\">\r\n            Vous avez déjà un compte ?{' '}\r\n            <Link to=\"/connexion\" className=\"font-semibold text-indigo-600 hover:underline\">\r\n              Connectez-vous ici\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default InscriptionUser;\r\n"
        }
    ]
}