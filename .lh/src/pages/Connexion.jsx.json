{
    "sourceFile": "src/pages/Connexion.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1749946750790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1749946768361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \r\n             // Logique de redirection basée sur le rôle nettoyé\r\n             switch (cleanedRole) {\r\n                 case 'ADMIN':\r\n-                    navigate('/tableau'); // Redirection spécifique pour l'ADMIN\r\n+                    navigate('/tableauAdmin'); // Redirection spécifique pour l'ADMIN\r\n                     break;\r\n                 case 'PSYCHIATRE':\r\n                 case 'PSYCHOLOGUE':\r\n                 case 'USER': // Utilisateur et Professionnel vont vers la page d'accueil\r\n"
                }
            ],
            "date": 1749946750789,
            "name": "Commit-0",
            "content": "// src/pages/Connexion.jsx\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { login } from '../services/serviceAuth'; // Importer le service d'authentification\r\n\r\nimport Layout from '../components/commun/Layout';\r\n\r\nconst Connexion = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [motDePasse, setMotDePasse] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    const handleConnexion = async (e) => {\r\n        e.preventDefault();\r\n        setMessage('');\r\n\r\n        try {\r\n            // Appel à la fonction de login, qui ne renvoie PAS de token, seulement le rôle\r\n            const responseData = await login(email, motDePasse);\r\n            const { role } = responseData; // Récupère le rôle directement\r\n\r\n            // Nettoyer le rôle : \"ROLE_ADMIN\" -> \"ADMIN\", \"ROLE_USER\" -> \"UTILISATEUR\", etc.\r\n            const cleanedRole = role.replace('ROLE_', '');\r\n\r\n            // Stocker le rôle nettoyé dans le localStorage\r\n            // Si le backend renvoie 'USER', et que vous voulez 'UTILISATEUR' sur le front\r\n            let roleToStore = cleanedRole;\r\n            if (cleanedRole === 'USER') {\r\n                roleToStore = 'UTILISATEUR';\r\n            }\r\n            localStorage.setItem('role', roleToStore); // C'est tout ce que nous stockons localement\r\n\r\n            setMessage('Connexion réussie ! Redirection en cours...');\r\n\r\n            // Logique de redirection basée sur le rôle nettoyé\r\n            switch (cleanedRole) {\r\n                case 'ADMIN':\r\n                    navigate('/tableau'); // Redirection spécifique pour l'ADMIN\r\n                    break;\r\n                case 'PSYCHIATRE':\r\n                case 'PSYCHOLOGUE':\r\n                case 'USER': // Utilisateur et Professionnel vont vers la page d'accueil\r\n                    navigate('/');\r\n                    break;\r\n                default:\r\n                    console.warn('Rôle utilisateur inconnu après connexion (nettoyé):', cleanedRole);\r\n                    console.warn('Rôle utilisateur original du backend:', role);\r\n                    navigate('/'); // Redirection par défaut si le rôle n'est pas reconnu\r\n                    break;\r\n            }\r\n\r\n        } catch (error) {\r\n            // Gérer les erreurs de connexion (ex: 401 Unauthorized)\r\n            const errorMessage = error.response?.data?.message || \"Connexion échouée. Veuillez vérifier votre email/mot de passe.\";\r\n            setMessage(\"Erreur : \" + errorMessage);\r\n            console.error(\"Erreur de connexion:\", error.response || error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <div className=\"flex-grow flex items-center justify-center px-4 sm:px-6 lg:px-8 py-8 bg-gray-50\">\r\n                <div className=\"max-w-md w-full space-y-8 shadow-lg p-8 rounded-2xl border border-gray-200 bg-white\">\r\n                    <div>\r\n                        <h2 className=\"text-center text-3xl font-extrabold text-gray-900\">Connexion à PsyConnect</h2>\r\n                        <p className=\"mt-2 text-center text-sm text-gray-600\">\r\n                            Connectez-vous pour accéder à votre espace personnel\r\n                        </p>\r\n                    </div>\r\n                    <form className=\"mt-8 space-y-6\" onSubmit={handleConnexion}>\r\n                        <div className=\"rounded-md shadow-sm space-y-4\">\r\n                            <div>\r\n                                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">Adresse email</label>\r\n                                <input\r\n                                    id=\"email\"\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                    required\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                    className=\"appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">Mot de passe</label>\r\n                                <input\r\n                                    id=\"password\"\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    required\r\n                                    value={motDePasse}\r\n                                    onChange={e => setMotDePasse(e.target.value)}\r\n                                    className=\"appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none\"\r\n                            >\r\n                                Se connecter\r\n                            </button>\r\n                        </div>\r\n                        {message && <p className={`text-sm text-center ${message.includes(\"réussie\") ? 'text-green-600' : 'text-red-500'}`}>{message}</p>}\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Connexion;"
        }
    ]
}