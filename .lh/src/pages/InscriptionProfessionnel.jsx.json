{
    "sourceFile": "src/pages/InscriptionProfessionnel.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750968858260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750968858260,
            "name": "Commit-0",
            "content": "import React, { useState } from 'react';\r\nimport { useNavigate, Link } from 'react-router-dom';\r\nimport api from '../services/api';\r\nimport Layout from '../components/commun/Layout';\r\n\r\n// Composant InputField avec texte plus petit\r\nconst InputField = ({ id, label, type = 'text', autoComplete, value, onChange, error, placeholder }) => (\r\n  <div className=\"flex flex-col\">\r\n    <label htmlFor={id} className=\"mb-1 text-gray-800 font-semibold text-sm\">{label}</label>\r\n    <input\r\n      id={id}\r\n      name={id}\r\n      type={type}\r\n      autoComplete={autoComplete}\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder={placeholder || label}\r\n      className={`border rounded-md px-3 py-2 text-gray-900 text-sm placeholder-gray-400 focus:outline-none focus:ring-2 transition\r\n        ${error ? 'border-red-500 focus:ring-red-400' : 'border-gray-300 focus:ring-indigo-400'}`}\r\n    />\r\n    {error && <p className=\"text-red-600 text-xs mt-1 italic font-medium\">{error}</p>}\r\n  </div>\r\n);\r\n\r\nconst InscriptionProfessionnel = () => {\r\n  const [formData, setFormData] = useState({\r\n    nom: '',\r\n    prenom: '',\r\n    email: '',\r\n    telephone: '',\r\n    specialite: '',\r\n    adresseCabinet: '',\r\n    motDePasse: '',\r\n    confirmerMotDePasse: '',\r\n    justificatif: null,\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [success, setSuccess] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const validatePassword = (password) => {\r\n    const errors = [];\r\n    if (password.length < 8) errors.push(\"Le mot de passe doit contenir au moins 8 caractères.\");\r\n    if (!/[A-Z]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins une lettre majuscule.\");\r\n    if (!/[a-z]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins une lettre minuscule.\");\r\n    if (!/[0-9]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins un chiffre.\");\r\n    if (!/[^A-Za-z0-9]/.test(password)) errors.push(\"Le mot de passe doit contenir au moins un caractère spécial.\");\r\n    return errors;\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    let isValid = true;\r\n\r\n    if (!formData.nom.trim()) {\r\n      newErrors.nom = \"Le nom est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.prenom.trim()) {\r\n      newErrors.prenom = \"Le prénom est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.email.trim()) {\r\n      newErrors.email = \"L'adresse email est obligatoire.\";\r\n      isValid = false;\r\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\r\n      newErrors.email = \"L'adresse email n'est pas valide.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.telephone.trim()) {\r\n      newErrors.telephone = \"Le numéro de téléphone est obligatoire.\";\r\n      isValid = false;\r\n    } else if (!/^\\+?[0-9\\s-]{8,}$/.test(formData.telephone)) {\r\n      newErrors.telephone = \"Le format du numéro de téléphone n'est pas valide.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.specialite.trim()) {\r\n      newErrors.specialite = \"La spécialité est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.adresseCabinet.trim()) {\r\n      newErrors.adresseCabinet = \"L'adresse du cabinet est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    if (!formData.justificatif) {\r\n      newErrors.justificatif = \"Le justificatif est obligatoire.\";\r\n      isValid = false;\r\n    }\r\n    const passwordErrors = validatePassword(formData.motDePasse);\r\n    if (passwordErrors.length > 0) {\r\n      newErrors.motDePasse = passwordErrors.join(\" \");\r\n      isValid = false;\r\n    }\r\n    if (formData.motDePasse !== formData.confirmerMotDePasse) {\r\n      newErrors.confirmerMotDePasse = \"Les mots de passe ne correspondent pas.\";\r\n      isValid = false;\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    setFormData(prev => ({ ...prev, justificatif: e.target.files[0] }));\r\n    if (errors.justificatif) setErrors(prev => ({ ...prev, justificatif: null }));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n    if (errors[name]) setErrors(prev => ({ ...prev, [name]: null }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setErrors({});\r\n    setSuccess(null);\r\n\r\n    if (!validateForm()) return;\r\n\r\n    try {\r\n      const formPayload = new FormData();\r\n      Object.entries(formData).forEach(([key, val]) => {\r\n        if (val !== null) formPayload.append(key, val);\r\n      });\r\n\r\n      await api.post('/auth/register/professionnel', formPayload, {\r\n        headers: { 'Content-Type': 'multipart/form-data' }\r\n      });\r\n\r\n      setSuccess('Inscription réussie ! Vous allez être redirigé...');\r\n      setTimeout(() => navigate('/ '), 2000);\r\n    } catch (err) {\r\n      console.error('Erreur d\\'inscription:', err.response?.data || err.message);\r\n      const backendErrors = err.response?.data?.errors;\r\n      if (backendErrors && Array.isArray(backendErrors)) {\r\n        const errorMessages = backendErrors.map(e => e.defaultMessage || e.message).join(' ');\r\n        setErrors(prev => ({ ...prev, general: errorMessages }));\r\n      } else if (err.response?.data?.message) {\r\n        setErrors(prev => ({ ...prev, general: err.response.data.message }));\r\n      } else {\r\n        setErrors(prev => ({ ...prev, general: 'Erreur lors de l\\'inscription. Veuillez réessayer.' }));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-indigo-100 to-white px-6 py-12\">\r\n        <div className=\"w-full max-w-lg bg-white rounded-2xl shadow-lg p-8\">\r\n          <h2 className=\"text-2xl font-semibold text-indigo-700 mb-4 text-center tracking-wide\">\r\n            Inscription Professionnel\r\n          </h2>\r\n          <p className=\"text-center text-gray-600 mb-6 text-sm font-medium\">\r\n            Créez votre compte professionnel ici\r\n          </p>\r\n\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\" encType=\"multipart/form-data\">\r\n            {errors.general && (\r\n              <div className=\"bg-red-50 border border-red-400 text-red-700 px-4 py-2 rounded-md text-center text-sm font-semibold mb-4\">\r\n                {errors.general}\r\n              </div>\r\n            )}\r\n            {success && (\r\n              <div className=\"bg-green-50 border border-green-400 text-green-700 px-4 py-2 rounded-md text-center text-sm font-semibold mb-4\">\r\n                {success}\r\n              </div>\r\n            )}\r\n\r\n            <InputField\r\n              id=\"nom\"\r\n              label=\"Nom\"\r\n              value={formData.nom}\r\n              onChange={handleChange}\r\n              error={errors.nom}\r\n              autoComplete=\"family-name\"\r\n            />\r\n            <InputField\r\n              id=\"prenom\"\r\n              label=\"Prénom\"\r\n              value={formData.prenom}\r\n              onChange={handleChange}\r\n              error={errors.prenom}\r\n              autoComplete=\"given-name\"\r\n            />\r\n            <InputField\r\n              id=\"email\"\r\n              label=\"Adresse email\"\r\n              type=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              error={errors.email}\r\n              autoComplete=\"email\"\r\n            />\r\n            <InputField\r\n              id=\"telephone\"\r\n              label=\"Téléphone\"\r\n              type=\"tel\"\r\n              value={formData.telephone}\r\n              onChange={handleChange}\r\n              error={errors.telephone}\r\n              autoComplete=\"tel\"\r\n            />\r\n            <InputField\r\n              id=\"specialite\"\r\n              label=\"Spécialité\"\r\n              value={formData.specialite}\r\n              onChange={handleChange}\r\n              error={errors.specialite}\r\n              placeholder=\"Ex: Psychologue, Psychiatre...\"\r\n            />\r\n            <InputField\r\n              id=\"adresseCabinet\"\r\n              label=\"Adresse du cabinet\"\r\n              value={formData.adresseCabinet}\r\n              onChange={handleChange}\r\n              error={errors.adresseCabinet}\r\n              placeholder=\"Adresse complète\"\r\n            />\r\n\r\n            <div className=\"flex flex-col\">\r\n              <label htmlFor=\"justificatif\" className=\"mb-1 text-gray-800 font-semibold text-sm\">\r\n                Justificatif (PDF, JPG, PNG)\r\n              </label>\r\n              <input\r\n                id=\"justificatif\"\r\n                name=\"justificatif\"\r\n                type=\"file\"\r\n                accept=\".pdf,image/jpeg,image/png\"\r\n                onChange={handleFileChange}\r\n                className={`border rounded-md px-3 py-2 text-gray-900 text-sm placeholder-gray-400 focus:outline-none focus:ring-2 transition\r\n                  ${errors.justificatif ? 'border-red-500 focus:ring-red-400' : 'border-gray-300 focus:ring-indigo-400'}`}\r\n              />\r\n              {errors.justificatif && (\r\n                <p className=\"text-red-600 text-xs mt-1 italic font-medium\">{errors.justificatif}</p>\r\n              )}\r\n            </div>\r\n\r\n            <InputField\r\n              id=\"motDePasse\"\r\n              label=\"Mot de passe\"\r\n              type=\"password\"\r\n              value={formData.motDePasse}\r\n              onChange={handleChange}\r\n              error={errors.motDePasse}\r\n              autoComplete=\"new-password\"\r\n            />\r\n            <InputField\r\n              id=\"confirmerMotDePasse\"\r\n              label=\"Confirmer le mot de passe\"\r\n              type=\"password\"\r\n              value={formData.confirmerMotDePasse}\r\n              onChange={handleChange}\r\n              error={errors.confirmerMotDePasse}\r\n              autoComplete=\"new-password\"\r\n            />\r\n\r\n            <div className=\"flex justify-center\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"w-40 py-2 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold text-sm rounded-xl shadow-md transition duration-300 ease-in-out focus:outline-none focus:ring-3 focus:ring-indigo-400\"\r\n              >\r\n                S'inscrire\r\n              </button>\r\n            </div>\r\n          </form>\r\n\r\n          <p className=\"mt-6 text-center text-gray-700 text-xs font-medium\">\r\n            Vous avez déjà un compte ?{' '}\r\n            <Link to=\"/connexion\" className=\"font-semibold text-indigo-600 hover:underline hover:text-indigo-800 transition\">\r\n              Connectez-vous ici\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default InscriptionProfessionnel;\r\n"
        }
    ]
}