{
    "sourceFile": "src/components/ListeProfessionnels.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1750187786088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750188400855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,49 @@\n import React, { useEffect, useState } from 'react';\r\n import axios from 'axios';\r\n-import { CalendarCheck, Clock, User, Euro } from 'lucide-react';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [loadingDispo, setLoadingDispo] = useState(false);\r\n   const [error, setError] = useState('');\r\n \r\n-  // Chargement de la liste des professionnels\r\n+  // Charger la liste des professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n-        const response = await axios.get('/api/professionnels/tous', {\r\n-          withCredentials: true,\r\n-        });\r\n+        const response = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n         setProfessionnels(response.data);\r\n       } catch (err) {\r\n         setError('Erreur lors du chargement des professionnels.');\r\n       }\r\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Chargement des disponibilités pour un professionnel donné (pour aujourd'hui)\r\n+  // Charger les disponibilités d'un professionnel pour aujourd'hui\r\n   const fetchDisponibilites = async (proId) => {\r\n-    setLoadingDispo(true);\r\n     try {\r\n-      // On utilise la date du jour au format ISO (YYYY-MM-DD)\r\n       const today = new Date().toISOString().split('T')[0];\r\n       const response = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n       setDisponibilites(response.data);\r\n     } catch (err) {\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    } finally {\r\n-      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Fonction pour réserver une disponibilité\r\n+  // Réserver une disponibilité\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n-      // Appel à ton endpoint de réservation (à adapter selon ton API réelle)\r\n-      const response = await axios.post('/api/reservations', dispo, {\r\n-        withCredentials: true,\r\n-      });\r\n+      await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      // Optionnel : rafraîchir la liste des disponibilités après réservation\r\n-      fetchDisponibilites(dispo.professionnelId);\r\n+      fetchDisponibilites(dispo.professionnelId); // Mise à jour\r\n     } catch (err) {\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     }\r\n   };\r\n@@ -63,17 +52,14 @@\n     <div className=\"max-w-5xl mx-auto p-6\">\r\n       <ToastContainer position=\"top-right\" />\r\n       {error && <p className=\"text-red-600\">{error}</p>}\r\n \r\n-      {/* Liste des professionnels */}\r\n       <h2 className=\"text-3xl font-bold mb-4\">Liste des professionnels</h2>\r\n       <ul className=\"space-y-4\">\r\n         {professionnels.map((pro) => (\r\n           <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n             <div>\r\n-              <p className=\"text-xl font-semibold\">\r\n-                {pro.prenom} {pro.nom}\r\n-              </p>\r\n+              <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n               <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n             </div>\r\n             <button\r\n               onClick={() => {\r\n@@ -87,17 +73,16 @@\n           </li>\r\n         ))}\r\n       </ul>\r\n \r\n-      {/* Afficher les disponibilités pour le professionnel sélectionné */}\r\n+      {/* Disponibilités */}\r\n       {selectedPro && (\r\n         <div className=\"mt-8\">\r\n           <h3 className=\"text-2xl font-bold mb-4\">\r\n             Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n           </h3>\r\n-          {loadingDispo ? (\r\n-            <p>Chargement des disponibilités...</p>\r\n-          ) : disponibilites.length === 0 ? (\r\n+\r\n+          {disponibilites.length === 0 ? (\r\n             <p className=\"text-gray-600\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n           ) : (\r\n             <ul className=\"space-y-4\">\r\n               <AnimatePresence>\r\n"
                },
                {
                    "date": 1750188614254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,28 +4,33 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n+import Header from '../components/commun/Header'; // adapte le chemin si besoin\r\n+import Footer from '../components/commun/Footer'; // adapte aussi si besoin\r\n+\r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [error, setError] = useState('');\r\n \r\n-  // Charger la liste des professionnels\r\n+  // Charger les professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const response = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n         setProfessionnels(response.data);\r\n+        setError('');\r\n       } catch (err) {\r\n+        console.error(err);\r\n         setError('Erreur lors du chargement des professionnels.');\r\n       }\r\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités d'un professionnel pour aujourd'hui\r\n+  // Charger les disponibilités d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       const today = new Date().toISOString().split('T')[0];\r\n       const response = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n@@ -36,90 +41,98 @@\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // Réserver une disponibilité\r\n+  // Réserver\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnelId); // Mise à jour\r\n+      fetchDisponibilites(dispo.professionnelId);\r\n     } catch (err) {\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     }\r\n   };\r\n \r\n   return (\r\n-    <div className=\"max-w-5xl mx-auto p-6\">\r\n+    <>\r\n+      <Header />\r\n       <ToastContainer position=\"top-right\" />\r\n-      {error && <p className=\"text-red-600\">{error}</p>}\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n-      <h2 className=\"text-3xl font-bold mb-4\">Liste des professionnels</h2>\r\n-      <ul className=\"space-y-4\">\r\n-        {professionnels.map((pro) => (\r\n-          <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n-            <div>\r\n-              <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n-              <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n-            </div>\r\n-            <button\r\n-              onClick={() => {\r\n-                setSelectedPro(pro);\r\n-                fetchDisponibilites(pro.id);\r\n-              }}\r\n-              className=\"px-4 py-2 bg-blue-600 text-white rounded-md transition-colors hover:bg-blue-700\"\r\n-            >\r\n-              Voir Disponibilités\r\n-            </button>\r\n-          </li>\r\n-        ))}\r\n-      </ul>\r\n+        {error && (\r\n+          <p className=\"text-red-600 text-center mb-6\">\r\n+            {error}\r\n+          </p>\r\n+        )}\r\n \r\n-      {/* Disponibilités */}\r\n-      {selectedPro && (\r\n-        <div className=\"mt-8\">\r\n-          <h3 className=\"text-2xl font-bold mb-4\">\r\n-            Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n-          </h3>\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => {\r\n+                  setSelectedPro(pro);\r\n+                  fetchDisponibilites(pro.id);\r\n+                }}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md transition-colors hover:bg-blue-700\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n \r\n-          {disponibilites.length === 0 ? (\r\n-            <p className=\"text-gray-600\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n-          ) : (\r\n-            <ul className=\"space-y-4\">\r\n-              <AnimatePresence>\r\n-                {disponibilites.map((dispo) => (\r\n-                  <motion.li\r\n-                    key={dispo.id}\r\n-                    initial={{ opacity: 0, y: 10 }}\r\n-                    animate={{ opacity: 1, y: 0 }}\r\n-                    exit={{ opacity: 0, y: -10 }}\r\n-                    transition={{ duration: 0.3 }}\r\n-                    className=\"border p-4 rounded-md flex justify-between items-center shadow-sm\"\r\n-                  >\r\n-                    <div>\r\n-                      <p className=\"font-medium\">\r\n-                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                        Date : {new Date(dispo.date).toLocaleDateString()}\r\n-                      </p>\r\n-                      <p>\r\n-                        <Clock size={16} className=\"inline-block mr-1\" />\r\n-                        Début : {dispo.heureDebut?.substring(0, 5)} - Fin : {dispo.heureFin?.substring(0, 5)}\r\n-                      </p>\r\n-                    </div>\r\n-                    <button\r\n-                      onClick={() => reserverDisponibilite(dispo)}\r\n-                      className=\"px-4 py-2 bg-green-600 text-white rounded-md transition-colors hover:bg-green-700\"\r\n+        {selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4\">\r\n+              Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n+\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo) => (\r\n+                    <motion.li\r\n+                      key={dispo.id}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md flex justify-between items-center shadow-sm\"\r\n                     >\r\n-                      Réserver\r\n-                    </button>\r\n-                  </motion.li>\r\n-                ))}\r\n-              </AnimatePresence>\r\n-            </ul>\r\n-          )}\r\n-        </div>\r\n-      )}\r\n-    </div>\r\n+                      <div>\r\n+                        <p className=\"font-medium\">\r\n+                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                          Date : {new Date(dispo.date).toLocaleDateString()}\r\n+                        </p>\r\n+                        <p>\r\n+                          <Clock size={16} className=\"inline-block mr-1\" />\r\n+                          Début : {dispo.heureDebut?.substring(0, 5)} - Fin : {dispo.heureFin?.substring(0, 5)}\r\n+                        </p>\r\n+                      </div>\r\n+                      <button\r\n+                        onClick={() => reserverDisponibilite(dispo)}\r\n+                        className=\"px-4 py-2 bg-green-600 text-white rounded-md transition-colors hover:bg-green-700\"\r\n+                      >\r\n+                        Réserver\r\n+                      </button>\r\n+                    </motion.li>\r\n+                  ))}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <Footer />\r\n+    </>\r\n   );\r\n };\r\n \r\n export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750188632516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n             )}\r\n           </div>\r\n         )}\r\n       </main>\r\n-      <Footer />\r\n+      <PQI/>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750188641525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,9 +129,9 @@\n             )}\r\n           </div>\r\n         )}\r\n       </main>\r\n-      <PQI/>\r\n+      <Pied/>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750188664025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n import Header from '../components/commun/Header'; // adapte le chemin si besoin\r\n import Footer from '../components/commun/Footer'; // adapte aussi si besoin\r\n+import PiedPage from './commun/PiedPage';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n@@ -54,9 +55,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <Header />\r\n+      <header />\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n@@ -129,9 +130,9 @@\n             )}\r\n           </div>\r\n         )}\r\n       </main>\r\n-      <Pied/>\r\n+      <PiedPage/>\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750188670932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <header />\r\n+      <he />\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n"
                },
                {
                    "date": 1750188676831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <he />\r\n+      <heaser />\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n"
                },
                {
                    "date": 1750188682135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <heaser />\r\n+      <header />\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n"
                },
                {
                    "date": 1750188689577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-import Header from '../components/commun/Header'; // adapte le chemin si besoin\r\n+import Header from '../components/commun/eader'; // adapte le chemin si besoin\r\n import Footer from '../components/commun/Footer'; // adapte aussi si besoin\r\n import PiedPage from './commun/PiedPage';\r\n \r\n const ListeProfessionnels = () => {\r\n"
                },
                {
                    "date": 1750188699876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-import Header from '../components/commun/eader'; // adapte le chemin si besoin\r\n-import Footer from '../components/commun/Footer'; // adapte aussi si besoin\r\n+import Header from '../components/commun/header'; // adapte le chemin si besoin\r\n+ \r\n import PiedPage from './commun/PiedPage';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n"
                },
                {
                    "date": 1750188705109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-import Header from '../components/commun/header'; // adapte le chemin si besoin\r\n+import header from '../components/commun/header'; // adapte le chemin si besoin\r\n  \r\n import PiedPage from './commun/PiedPage';\r\n \r\n const ListeProfessionnels = () => {\r\n"
                },
                {
                    "date": 1750188743384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-import header from '../components/commun/header'; // adapte le chemin si besoin\r\n  \r\n+ \r\n import PiedPage from './commun/PiedPage';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n@@ -55,9 +55,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <header />\r\n+      <hea/>\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n"
                },
                {
                    "date": 1750188748877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n \r\n  \r\n  \r\n import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n@@ -55,9 +56,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <hea/>\r\n+      <Header/>\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n         <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n \r\n"
                },
                {
                    "date": 1750191752346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,70 +4,75 @@\n import { toast, ToastContainer } from 'react-toastify';\r\n import { motion, AnimatePresence } from 'framer-motion';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n \r\n- \r\n- \r\n import PiedPage from './commun/PiedPage';\r\n import Header from './commun/header';\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [error, setError] = useState('');\r\n+  const [loadingDispo, setLoadingDispo] = useState(false);\r\n+  const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Charger les professionnels\r\n+  // Charger tous les professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n-        const response = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n-        setProfessionnels(response.data);\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n         setError('');\r\n       } catch (err) {\r\n         console.error(err);\r\n-        setError('Erreur lors du chargement des professionnels.');\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n       }\r\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités d’un pro\r\n+  // Charger les disponibilités d'un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n+      setLoadingDispo(true);\r\n       const today = new Date().toISOString().split('T')[0];\r\n-      const response = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n+      const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n-      setDisponibilites(response.data);\r\n+      setDisponibilites(res.data);\r\n+      setSelectedPro(professionnels.find(p => p.id === proId));\r\n     } catch (err) {\r\n+      console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    } finally {\r\n+      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Réserver\r\n+  // Réservation\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n+      setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n       fetchDisponibilites(dispo.professionnelId);\r\n     } catch (err) {\r\n+      console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n+    } finally {\r\n+      setReservingId(null);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <>\r\n-      <Header/>\r\n+      <Header />\r\n       <ToastContainer position=\"top-right\" />\r\n       <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n-        <h2 className=\"text-3xl font-bold mb-4 text-center\">Liste des professionnels</h2>\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n \r\n-        {error && (\r\n-          <p className=\"text-red-600 text-center mb-6\">\r\n-            {error}\r\n-          </p>\r\n-        )}\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n \r\n         <ul className=\"space-y-4\">\r\n           {professionnels.map((pro) => (\r\n             <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n@@ -75,13 +80,10 @@\n                 <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n                 <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n               </div>\r\n               <button\r\n-                onClick={() => {\r\n-                  setSelectedPro(pro);\r\n-                  fetchDisponibilites(pro.id);\r\n-                }}\r\n-                className=\"px-4 py-2 bg-blue-600 text-white rounded-md transition-colors hover:bg-blue-700\"\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n               >\r\n                 Voir Disponibilités\r\n               </button>\r\n             </li>\r\n@@ -89,14 +91,16 @@\n         </ul>\r\n \r\n         {selectedPro && (\r\n           <div className=\"mt-10\">\r\n-            <h3 className=\"text-2xl font-bold mb-4\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n+            {loadingDispo ? (\r\n+              <p className=\"text-gray-500 text-center\">Chargement des disponibilités...</p>\r\n+            ) : disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n                   {disponibilites.map((dispo) => (\r\n@@ -105,25 +109,26 @@\n                       initial={{ opacity: 0, y: 10 }}\r\n                       animate={{ opacity: 1, y: 0 }}\r\n                       exit={{ opacity: 0, y: -10 }}\r\n                       transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md flex justify-between items-center shadow-sm\"\r\n+                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n                     >\r\n                       <div>\r\n                         <p className=\"font-medium\">\r\n                           <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          Date : {new Date(dispo.date).toLocaleDateString()}\r\n+                          {new Date(dispo.date).toLocaleDateString()}\r\n                         </p>\r\n                         <p>\r\n                           <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          Début : {dispo.heureDebut?.substring(0, 5)} - Fin : {dispo.heureFin?.substring(0, 5)}\r\n+                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n                         </p>\r\n                       </div>\r\n                       <button\r\n+                        disabled={reservingId === dispo.id}\r\n                         onClick={() => reserverDisponibilite(dispo)}\r\n-                        className=\"px-4 py-2 bg-green-600 text-white rounded-md transition-colors hover:bg-green-700\"\r\n+                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n                       >\r\n-                        Réserver\r\n+                        {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n                       </button>\r\n                     </motion.li>\r\n                   ))}\r\n                 </AnimatePresence>\r\n@@ -131,9 +136,9 @@\n             )}\r\n           </div>\r\n         )}\r\n       </main>\r\n-      <PiedPage/>\r\n+      <PiedPage />\r\n     </>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750191897283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,10 @@\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [error, setError] = useState('');\r\n-  const [loadingDispo, setLoadingDispo] = useState(false);\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Charger tous les professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -30,12 +28,10 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités d'un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n-      setLoadingDispo(true);\r\n       const today = new Date().toISOString().split('T')[0];\r\n       const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n@@ -43,14 +39,11 @@\n       setSelectedPro(professionnels.find(p => p.id === proId));\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    } finally {\r\n-      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Réservation\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n@@ -95,11 +88,9 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {loadingDispo ? (\r\n-              <p className=\"text-gray-500 text-center\">Chargement des disponibilités...</p>\r\n-            ) : disponibilites.length === 0 ? (\r\n+            {disponibilites.length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n"
                },
                {
                    "date": 1750192102909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n   useEffect(() => {\r\n@@ -30,8 +31,9 @@\n   }, []);\r\n \r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n+      setDisponibilitesVisibles(true);\r\n       const today = new Date().toISOString().split('T')[0];\r\n       const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n@@ -82,9 +84,9 @@\n             </li>\r\n           ))}\r\n         </ul>\r\n \r\n-        {selectedPro && (\r\n+        {disponibilitesVisibles && selectedPro && (\r\n           <div className=\"mt-10\">\r\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n"
                },
                {
                    "date": 1750192251150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,11 @@\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n   const [reservingId, setReservingId] = useState(null);\r\n+  const [loadingDispo, setLoadingDispo] = useState(false);\r\n \r\n+  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -29,29 +31,42 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n+  // Charger les disponibilités d'un professionnel\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n-      setDisponibilitesVisibles(true);\r\n+      const pro = professionnels.find(p => p.id === proId);\r\n+      setSelectedPro(null); // réinitialiser pour forcer le re-render\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+      setLoadingDispo(true);\r\n+\r\n+      setTimeout(() => {\r\n+        setSelectedPro(pro);\r\n+        setDisponibilitesVisibles(true);\r\n+      }, 0);\r\n+\r\n       const today = new Date().toISOString().split('T')[0];\r\n       const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n       setDisponibilites(res.data);\r\n-      setSelectedPro(professionnels.find(p => p.id === proId));\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    } finally {\r\n+      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n+  // Réserver une disponibilité\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnelId);\r\n+      fetchDisponibilites(dispo.professionnelId); // recharger les dispos\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -90,10 +105,14 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n+            {loadingDispo ? (\r\n+              <p className=\"text-gray-500 text-center\">Chargement des disponibilités...</p>\r\n+            ) : disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel aujourd'hui.\r\n+              </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n                   {disponibilites.map((dispo) => (\r\n"
                },
                {
                    "date": 1750192312192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,10 @@\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n   const [reservingId, setReservingId] = useState(null);\r\n-  const [loadingDispo, setLoadingDispo] = useState(false);\r\n \r\n-  // Charger les professionnels au montage\r\n+  // Charger les professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -31,16 +30,15 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités d'un professionnel\r\n+  // Charger les disponibilités\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       const pro = professionnels.find(p => p.id === proId);\r\n-      setSelectedPro(null); // réinitialiser pour forcer le re-render\r\n+      setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n-      setLoadingDispo(true);\r\n \r\n       setTimeout(() => {\r\n         setSelectedPro(pro);\r\n         setDisponibilitesVisibles(true);\r\n@@ -53,20 +51,18 @@\n       setDisponibilites(res.data);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    } finally {\r\n-      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Réserver une disponibilité\r\n+  // Réserver\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnelId); // recharger les dispos\r\n+      fetchDisponibilites(dispo.professionnelId);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -105,11 +101,9 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {loadingDispo ? (\r\n-              <p className=\"text-gray-500 text-center\">Chargement des disponibilités...</p>\r\n-            ) : disponibilites.length === 0 ? (\r\n+            {disponibilites.length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n                 Aucune disponibilité trouvée pour ce professionnel aujourd'hui.\r\n               </p>\r\n             ) : (\r\n"
                },
                {
                    "date": 1750192428451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,16 @@\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n+      // Attendre un instant pour permettre la mise à jour visuelle\r\n       setTimeout(() => {\r\n         setSelectedPro(pro);\r\n         setDisponibilitesVisibles(true);\r\n       }, 0);\r\n \r\n-      const today = new Date().toISOString().split('T')[0];\r\n+      // ✅ Correction ici : date locale au format YYYY-MM-DD\r\n+      const today = new Date().toLocaleDateString('fr-CA');\r\n       const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n       setDisponibilites(res.data);\r\n"
                },
                {
                    "date": 1750192815836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,41 +30,40 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités\r\n+  // Charger les disponibilités filtrées par date (aujourd'hui)\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       const pro = professionnels.find(p => p.id === proId);\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n-      // Attendre un instant pour permettre la mise à jour visuelle\r\n-      setTimeout(() => {\r\n-        setSelectedPro(pro);\r\n-        setDisponibilitesVisibles(true);\r\n-      }, 0);\r\n+      // Date au format ISO (YYYY-MM-DD) compatible backend\r\n+      const today = new Date().toISOString().split('T')[0];\r\n \r\n-      // ✅ Correction ici : date locale au format YYYY-MM-DD\r\n-      const today = new Date().toLocaleDateString('fr-CA');\r\n       const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n+\r\n       setDisponibilites(res.data);\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // Réserver\r\n+  // Réserver une disponibilité\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnelId);\r\n+      fetchDisponibilites(dispo.professionnel.id || dispo.professionnelId); // Rafraîchir dispo du pro\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n"
                },
                {
                    "date": 1750193025034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,20 +30,17 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les disponibilités filtrées par date (aujourd'hui)\r\n+  // Charger toutes les disponibilités du professionnel (sans filtre de date)\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       const pro = professionnels.find(p => p.id === proId);\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n-      // Date au format ISO (YYYY-MM-DD) compatible backend\r\n-      const today = new Date().toISOString().split('T')[0];\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n+      const res = await axios.get(`/api/disponibilites/filtrees/${proId}`, {\r\n         withCredentials: true,\r\n       });\r\n \r\n       setDisponibilites(res.data);\r\n@@ -61,9 +58,9 @@\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnel.id || dispo.professionnelId); // Rafraîchir dispo du pro\r\n+      fetchDisponibilites(dispo.professionnel.id || dispo.professionnelId); // Rafraîchir dispos\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -104,9 +101,9 @@\n             </h3>\r\n \r\n             {disponibilites.length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel aujourd'hui.\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n               </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n"
                },
                {
                    "date": 1750193354501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Charger les professionnels\r\n+  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -30,24 +30,23 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger toutes les disponibilités du professionnel (sans filtre de date)\r\n+  // Charger toutes les disponibilités du pro (sans filtrage date)\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       const pro = professionnels.find(p => p.id === proId);\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n-      const res = await axios.get(`/api/disponibilites/filtrees/${proId}`, {\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n         withCredentials: true,\r\n       });\r\n \r\n       setDisponibilites(res.data);\r\n       setSelectedPro(pro);\r\n       setDisponibilitesVisibles(true);\r\n-\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n@@ -58,9 +57,9 @@\n     try {\r\n       setReservingId(dispo.id);\r\n       await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnel.id || dispo.professionnelId); // Rafraîchir dispos\r\n+      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId); // Rafraîchir\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n"
                },
                {
                    "date": 1750193634417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,11 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger toutes les disponibilités du pro (sans filtrage date)\r\n+  // Charger les créneaux dispo (découpés) d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n-      const pro = professionnels.find(p => p.id === proId);\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n@@ -43,23 +42,32 @@\n         withCredentials: true,\r\n       });\r\n \r\n       setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n       setSelectedPro(pro);\r\n       setDisponibilitesVisibles(true);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // Réserver une disponibilité\r\n+  // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n-      await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n+      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n+      const payload = {\r\n+        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n+        date: dispo.date,\r\n+        heureDebut: dispo.heureDebut,\r\n+        heureFin: dispo.heureFin,\r\n+      };\r\n+\r\n+      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId); // Rafraîchir\r\n+      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -95,9 +103,9 @@\n \r\n         {disponibilitesVisibles && selectedPro && (\r\n           <div className=\"mt-10\">\r\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n             {disponibilites.length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n@@ -105,11 +113,11 @@\n               </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n-                  {disponibilites.map((dispo) => (\r\n+                  {disponibilites.map((dispo, idx) => (\r\n                     <motion.li\r\n-                      key={dispo.id}\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n                       initial={{ opacity: 0, y: 10 }}\r\n                       animate={{ opacity: 1, y: 0 }}\r\n                       exit={{ opacity: 0, y: -10 }}\r\n                       transition={{ duration: 0.3 }}\r\n"
                },
                {
                    "date": 1750194162026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,156 +0,0 @@\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import { CalendarCheck, Clock } from 'lucide-react';\r\n-import { toast, ToastContainer } from 'react-toastify';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-\r\n-import PiedPage from './commun/PiedPage';\r\n-import Header from './commun/header';\r\n-\r\n-const ListeProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [selectedPro, setSelectedPro] = useState(null);\r\n-  const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [reservingId, setReservingId] = useState(null);\r\n-\r\n-  // Charger les professionnels au montage\r\n-  useEffect(() => {\r\n-    const fetchProfessionnels = async () => {\r\n-      try {\r\n-        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n-        setProfessionnels(res.data);\r\n-        setError('');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        setError(\"Impossible de charger les professionnels.\");\r\n-      }\r\n-    };\r\n-    fetchProfessionnels();\r\n-  }, []);\r\n-\r\n-  // Charger les créneaux dispo (découpés) d’un pro\r\n-  const fetchDisponibilites = async (proId) => {\r\n-    try {\r\n-      setSelectedPro(null);\r\n-      setDisponibilites([]);\r\n-      setDisponibilitesVisibles(false);\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n-        withCredentials: true,\r\n-      });\r\n-\r\n-      setDisponibilites(res.data);\r\n-      const pro = professionnels.find(p => p.id === proId) || null;\r\n-      setSelectedPro(pro);\r\n-      setDisponibilitesVisibles(true);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    }\r\n-  };\r\n-\r\n-  // Réserver un créneau\r\n-  const reserverDisponibilite = async (dispo) => {\r\n-    try {\r\n-      setReservingId(dispo.id);\r\n-      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n-      const payload = {\r\n-        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n-        date: dispo.date,\r\n-        heureDebut: dispo.heureDebut,\r\n-        heureFin: dispo.heureFin,\r\n-      };\r\n-\r\n-      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n-      toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors de la réservation.\");\r\n-    } finally {\r\n-      setReservingId(null);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <Header />\r\n-      <ToastContainer position=\"top-right\" />\r\n-      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n-        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n-\r\n-        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n-\r\n-        <ul className=\"space-y-4\">\r\n-          {professionnels.map((pro) => (\r\n-            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n-              <div>\r\n-                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n-                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n-              </div>\r\n-              <button\r\n-                onClick={() => fetchDisponibilites(pro.id)}\r\n-                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n-              >\r\n-                Voir Disponibilités\r\n-              </button>\r\n-            </li>\r\n-          ))}\r\n-        </ul>\r\n-\r\n-        {disponibilitesVisibles && selectedPro && (\r\n-          <div className=\"mt-10\">\r\n-            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n-            </h3>\r\n-\r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n-              </p>\r\n-            ) : (\r\n-              <ul className=\"space-y-4\">\r\n-                <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => (\r\n-                    <motion.li\r\n-                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                      initial={{ opacity: 0, y: 10 }}\r\n-                      animate={{ opacity: 1, y: 0 }}\r\n-                      exit={{ opacity: 0, y: -10 }}\r\n-                      transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n-                    >\r\n-                      <div>\r\n-                        <p className=\"font-medium\">\r\n-                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          {new Date(dispo.date).toLocaleDateString()}\r\n-                        </p>\r\n-                        <p>\r\n-                          <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                        </p>\r\n-                      </div>\r\n-                      <button\r\n-                        disabled={reservingId === dispo.id}\r\n-                        onClick={() => reserverDisponibilite(dispo)}\r\n-                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n-                      >\r\n-                        {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n-                      </button>\r\n-                    </motion.li>\r\n-                  ))}\r\n-                </AnimatePresence>\r\n-              </ul>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n-      </main>\r\n-      <PiedPage />\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default ListeProfessionnels;\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1750194176942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n+import { toast, ToastContainer } from 'react-toastify';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n+\r\n+const ListeProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [selectedPro, setSelectedPro] = useState(null);\r\n+  const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [reservingId, setReservingId] = useState(null);\r\n+\r\n+  // Charger les professionnels au montage\r\n+  useEffect(() => {\r\n+    const fetchProfessionnels = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n+        setError('');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n+      }\r\n+    };\r\n+    fetchProfessionnels();\r\n+  }, []);\r\n+\r\n+  // Charger les créneaux dispo (découpés) d’un pro\r\n+  const fetchDisponibilites = async (proId) => {\r\n+    try {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n+      });\r\n+\r\n+      setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    }\r\n+  };\r\n+\r\n+  // Réserver un créneau\r\n+  const reserverDisponibilite = async (dispo) => {\r\n+    try {\r\n+      setReservingId(dispo.id);\r\n+      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n+      const payload = {\r\n+        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n+        date: dispo.date,\r\n+        heureDebut: dispo.heureDebut,\r\n+        heureFin: dispo.heureFin,\r\n+      };\r\n+\r\n+      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n+      toast.success(\"Réservation effectuée !\");\r\n+      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors de la réservation.\");\r\n+    } finally {\r\n+      setReservingId(null);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <Header />\r\n+      <ToastContainer position=\"top-right\" />\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n+\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n+\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n+\r\n+        {disponibilitesVisibles && selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n+\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo, idx) => (\r\n+                    <motion.li\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n+                    >\r\n+                      <div>\r\n+                        <p className=\"font-medium\">\r\n+                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                          {new Date(dispo.date).toLocaleDateString()}\r\n+                        </p>\r\n+                        <p>\r\n+                          <Clock size={16} className=\"inline-block mr-1\" />\r\n+                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                        </p>\r\n+                      </div>\r\n+                      <button\r\n+                        disabled={reservingId === dispo.id}\r\n+                        onClick={() => reserverDisponibilite(dispo)}\r\n+                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n+                      >\r\n+                        {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n+                      </button>\r\n+                    </motion.li>\r\n+                  ))}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <PiedPage />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750194292808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,63 +11,56 @@\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n+  const [loadingDispo, setLoadingDispo] = useState(false);\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Charger les professionnels au montage\r\n+  // Chargement des professionnels\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n         setProfessionnels(res.data);\r\n-        setError('');\r\n       } catch (err) {\r\n         console.error(err);\r\n-        setError(\"Impossible de charger les professionnels.\");\r\n+        setError(\"Erreur lors du chargement des professionnels.\");\r\n       }\r\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les créneaux dispo (découpés) d’un pro\r\n+  // Chargement des disponibilités d'un professionnel\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n-      setSelectedPro(null);\r\n-      setDisponibilites([]);\r\n-      setDisponibilitesVisibles(false);\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+      setLoadingDispo(true);\r\n+      setSelectedPro(professionnels.find(p => p.id === proId));\r\n+      const today = new Date().toISOString().split('T')[0];\r\n+      const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n         withCredentials: true,\r\n       });\r\n-\r\n       setDisponibilites(res.data);\r\n-      const pro = professionnels.find(p => p.id === proId) || null;\r\n-      setSelectedPro(pro);\r\n-      setDisponibilitesVisibles(true);\r\n     } catch (err) {\r\n-      console.error(err);\r\n+      console.error(\"Erreur fetch disponibilites\", err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    } finally {\r\n+      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Réserver un créneau\r\n+  // Réservation d'une disponibilité\r\n   const reserverDisponibilite = async (dispo) => {\r\n+    if (!dispo.professionnelId) {\r\n+      toast.error(\"Identifiant du professionnel manquant.\");\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n       setReservingId(dispo.id);\r\n-      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n-      const payload = {\r\n-        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n-        date: dispo.date,\r\n-        heureDebut: dispo.heureDebut,\r\n-        heureFin: dispo.heureFin,\r\n-      };\r\n-\r\n-      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n-      toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n+      await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n+      toast.success(\"Réservation réussie !\");\r\n+      fetchDisponibilites(dispo.professionnelId);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -100,24 +93,24 @@\n             </li>\r\n           ))}\r\n         </ul>\r\n \r\n-        {disponibilitesVisibles && selectedPro && (\r\n+        {selectedPro && (\r\n           <div className=\"mt-10\">\r\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+              Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n-              </p>\r\n+            {loadingDispo ? (\r\n+              <p className=\"text-gray-500 text-center\">Chargement...</p>\r\n+            ) : disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">Aucune disponibilité pour aujourd'hui.</p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => (\r\n+                  {disponibilites.map((dispo) => (\r\n                     <motion.li\r\n-                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      key={dispo.id}\r\n                       initial={{ opacity: 0, y: 10 }}\r\n                       animate={{ opacity: 1, y: 0 }}\r\n                       exit={{ opacity: 0, y: -10 }}\r\n                       transition={{ duration: 0.3 }}\r\n@@ -153,5 +146,4 @@\n   );\r\n };\r\n \r\n export default ListeProfessionnels;\r\n-\n"
                },
                {
                    "date": 1750194414806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,56 +11,63 @@\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n-  const [loadingDispo, setLoadingDispo] = useState(false);\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Chargement des professionnels\r\n+  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n         setProfessionnels(res.data);\r\n+        setError('');\r\n       } catch (err) {\r\n         console.error(err);\r\n-        setError(\"Erreur lors du chargement des professionnels.\");\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n       }\r\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Chargement des disponibilités d'un professionnel\r\n+  // Charger les créneaux dispo (découpés) d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n-      setLoadingDispo(true);\r\n-      setSelectedPro(professionnels.find(p => p.id === proId));\r\n-      const today = new Date().toISOString().split('T')[0];\r\n-      const res = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n         withCredentials: true,\r\n       });\r\n+\r\n       setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n     } catch (err) {\r\n-      console.error(\"Erreur fetch disponibilites\", err);\r\n+      console.error(err);\r\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    } finally {\r\n-      setLoadingDispo(false);\r\n     }\r\n   };\r\n \r\n-  // Réservation d'une disponibilité\r\n+  // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n-    if (!dispo.professionnelId) {\r\n-      toast.error(\"Identifiant du professionnel manquant.\");\r\n-      return;\r\n-    }\r\n-\r\n     try {\r\n       setReservingId(dispo.id);\r\n-      await axios.post('/api/reservations', dispo, { withCredentials: true });\r\n-      toast.success(\"Réservation réussie !\");\r\n-      fetchDisponibilites(dispo.professionnelId);\r\n+      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n+      const payload = {\r\n+        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n+        date: dispo.date,\r\n+        heureDebut: dispo.heureDebut,\r\n+        heureFin: dispo.heureFin,\r\n+      };\r\n+\r\n+      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n+      toast.success(\"Réservation effectuée !\");\r\n+      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -93,24 +100,24 @@\n             </li>\r\n           ))}\r\n         </ul>\r\n \r\n-        {selectedPro && (\r\n+        {disponibilitesVisibles && selectedPro && (\r\n           <div className=\"mt-10\">\r\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {loadingDispo ? (\r\n-              <p className=\"text-gray-500 text-center\">Chargement...</p>\r\n-            ) : disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">Aucune disponibilité pour aujourd'hui.</p>\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n-                  {disponibilites.map((dispo) => (\r\n+                  {disponibilites.map((dispo, idx) => (\r\n                     <motion.li\r\n-                      key={dispo.id}\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n                       initial={{ opacity: 0, y: 10 }}\r\n                       animate={{ opacity: 1, y: 0 }}\r\n                       exit={{ opacity: 0, y: -10 }}\r\n                       transition={{ duration: 0.3 }}\r\n"
                },
                {
                    "date": 1750195078218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n   const [reservingId, setReservingId] = useState(null);\r\n \r\n-  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -30,9 +29,8 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les créneaux dispo (découpés) d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n@@ -51,13 +49,11 @@\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n       setReservingId(dispo.id);\r\n-      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n       const payload = {\r\n         professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n         date: dispo.date,\r\n         heureDebut: dispo.heureDebut,\r\n@@ -65,9 +61,9 @@\n       };\r\n \r\n       await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n+      fetchDisponibilites(payload.professionnelId);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -106,43 +102,45 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {disponibilites.length === 0 ? (\r\n+            {disponibilites.filter(dispo => !dispo.reservee).length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n                 Aucune disponibilité trouvée pour ce professionnel.\r\n               </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => (\r\n-                    <motion.li\r\n-                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                      initial={{ opacity: 0, y: 10 }}\r\n-                      animate={{ opacity: 1, y: 0 }}\r\n-                      exit={{ opacity: 0, y: -10 }}\r\n-                      transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n-                    >\r\n-                      <div>\r\n-                        <p className=\"font-medium\">\r\n-                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          {new Date(dispo.date).toLocaleDateString()}\r\n-                        </p>\r\n-                        <p>\r\n-                          <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                        </p>\r\n-                      </div>\r\n-                      <button\r\n-                        disabled={reservingId === dispo.id}\r\n-                        onClick={() => reserverDisponibilite(dispo)}\r\n-                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n+                  {disponibilites\r\n+                    .filter(dispo => !dispo.reservee)  // Filtrer les créneaux non réservés\r\n+                    .map((dispo, idx) => (\r\n+                      <motion.li\r\n+                        key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                        initial={{ opacity: 0, y: 10 }}\r\n+                        animate={{ opacity: 1, y: 0 }}\r\n+                        exit={{ opacity: 0, y: -10 }}\r\n+                        transition={{ duration: 0.3 }}\r\n+                        className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n                       >\r\n-                        {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n-                      </button>\r\n-                    </motion.li>\r\n-                  ))}\r\n+                        <div>\r\n+                          <p className=\"font-medium\">\r\n+                            <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                            {new Date(dispo.date).toLocaleDateString()}\r\n+                          </p>\r\n+                          <p>\r\n+                            <Clock size={16} className=\"inline-block mr-1\" />\r\n+                            {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                          </p>\r\n+                        </div>\r\n+                        <button\r\n+                          disabled={reservingId === dispo.id}\r\n+                          onClick={() => reserverDisponibilite(dispo)}\r\n+                          className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n+                        >\r\n+                          {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n+                        </button>\r\n+                      </motion.li>\r\n+                    ))}\r\n                 </AnimatePresence>\r\n               </ul>\r\n             )}\r\n           </div>\r\n"
                },
                {
                    "date": 1750195219046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,9 @@\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n-        withCredentials: true,\r\n-      });\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, { withCredentials: true });\r\n \r\n       setDisponibilites(res.data);\r\n       const pro = professionnels.find(p => p.id === proId) || null;\r\n       setSelectedPro(pro);\r\n@@ -61,9 +59,9 @@\n       };\r\n \r\n       await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId);\r\n+      fetchDisponibilites(payload.professionnelId); // rafraîchir\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     } finally {\r\n@@ -102,17 +100,18 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n+            {/* Filtrer pour afficher uniquement les créneaux libres */}\r\n             {disponibilites.filter(dispo => !dispo.reservee).length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n+                Aucune disponibilité libre trouvée pour ce professionnel.\r\n               </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n                   {disponibilites\r\n-                    .filter(dispo => !dispo.reservee)  // Filtrer les créneaux non réservés\r\n+                    .filter(dispo => !dispo.reservee)\r\n                     .map((dispo, idx) => (\r\n                       <motion.li\r\n                         key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n                         initial={{ opacity: 0, y: 10 }}\r\n"
                },
                {
                    "date": 1750195311642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n-  const [reservingId, setReservingId] = useState(null);\r\n \r\n+  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -29,15 +29,18 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n+  // Charger les créneaux dispo (découpés) d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n       setDisponibilitesVisibles(false);\r\n \r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, { withCredentials: true });\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n+      });\r\n \r\n       setDisponibilites(res.data);\r\n       const pro = professionnels.find(p => p.id === proId) || null;\r\n       setSelectedPro(pro);\r\n@@ -47,11 +50,12 @@\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n+  // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n-      setReservingId(dispo.id);\r\n+      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n       const payload = {\r\n         professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n         date: dispo.date,\r\n         heureDebut: dispo.heureDebut,\r\n@@ -59,14 +63,12 @@\n       };\r\n \r\n       await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId); // rafraîchir\r\n+      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n-    } finally {\r\n-      setReservingId(null);\r\n     }\r\n   };\r\n \r\n   return (\r\n@@ -100,46 +102,42 @@\n             <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n               Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n             </h3>\r\n \r\n-            {/* Filtrer pour afficher uniquement les créneaux libres */}\r\n-            {disponibilites.filter(dispo => !dispo.reservee).length === 0 ? (\r\n+            {disponibilites.length === 0 ? (\r\n               <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité libre trouvée pour ce professionnel.\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n               </p>\r\n             ) : (\r\n               <ul className=\"space-y-4\">\r\n                 <AnimatePresence>\r\n-                  {disponibilites\r\n-                    .filter(dispo => !dispo.reservee)\r\n-                    .map((dispo, idx) => (\r\n-                      <motion.li\r\n-                        key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                        initial={{ opacity: 0, y: 10 }}\r\n-                        animate={{ opacity: 1, y: 0 }}\r\n-                        exit={{ opacity: 0, y: -10 }}\r\n-                        transition={{ duration: 0.3 }}\r\n-                        className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n+                  {disponibilites.map((dispo, idx) => (\r\n+                    <motion.li\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n+                    >\r\n+                      <div>\r\n+                        <p className=\"font-medium\">\r\n+                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                          {new Date(dispo.date).toLocaleDateString()}\r\n+                        </p>\r\n+                        <p>\r\n+                          <Clock size={16} className=\"inline-block mr-1\" />\r\n+                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                        </p>\r\n+                      </div>\r\n+                      <button\r\n+                        onClick={() => reserverDisponibilite(dispo)}\r\n+                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\r\n                       >\r\n-                        <div>\r\n-                          <p className=\"font-medium\">\r\n-                            <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                            {new Date(dispo.date).toLocaleDateString()}\r\n-                          </p>\r\n-                          <p>\r\n-                            <Clock size={16} className=\"inline-block mr-1\" />\r\n-                            {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                          </p>\r\n-                        </div>\r\n-                        <button\r\n-                          disabled={reservingId === dispo.id}\r\n-                          onClick={() => reserverDisponibilite(dispo)}\r\n-                          className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50\"\r\n-                        >\r\n-                          {reservingId === dispo.id ? \"Réservation...\" : \"Réserver\"}\r\n-                        </button>\r\n-                      </motion.li>\r\n-                    ))}\r\n+                        Réserver\r\n+                      </button>\r\n+                    </motion.li>\r\n+                  ))}\r\n                 </AnimatePresence>\r\n               </ul>\r\n             )}\r\n           </div>\r\n"
                },
                {
                    "date": 1750195642013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,19 +53,22 @@\n \r\n   // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n-      // Adapter payload selon backend, ici on envoie date + heures + pro id\r\n+      // Formater la date au format \"YYYY-MM-DD\"\r\n+      const dateFormatee = new Date(dispo.date).toISOString().split('T')[0];\r\n+      // Formater l'heure au format \"HH:mm:ss\" si besoin\r\n+      const heureFormatee = dispo.heureDebut.length === 5 ? dispo.heureDebut + \":00\" : dispo.heureDebut;\r\n+\r\n       const payload = {\r\n-        professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n-        date: dispo.date,\r\n-        heureDebut: dispo.heureDebut,\r\n-        heureFin: dispo.heureFin,\r\n+        professionnel: { id: dispo.professionnel?.id || dispo.professionnelId },\r\n+        dateReservation: dateFormatee,\r\n+        heureReservation: heureFormatee,\r\n       };\r\n \r\n       await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnelId); // Rafraîchir la liste des créneaux dispo\r\n+      fetchDisponibilites(payload.professionnel.id);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     }\r\n"
                },
                {
                    "date": 1750196008425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les créneaux dispo (découpés) d’un pro\r\n+  // Charger les créneaux dispo d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n@@ -53,22 +53,16 @@\n \r\n   // Réserver un créneau\r\n   const reserverDisponibilite = async (dispo) => {\r\n     try {\r\n-      // Formater la date au format \"YYYY-MM-DD\"\r\n-      const dateFormatee = new Date(dispo.date).toISOString().split('T')[0];\r\n-      // Formater l'heure au format \"HH:mm:ss\" si besoin\r\n-      const heureFormatee = dispo.heureDebut.length === 5 ? dispo.heureDebut + \":00\" : dispo.heureDebut;\r\n-\r\n+      // Envoyer uniquement l'id de la disponibilité au backend\r\n       const payload = {\r\n-        professionnel: { id: dispo.professionnel?.id || dispo.professionnelId },\r\n-        dateReservation: dateFormatee,\r\n-        heureReservation: heureFormatee,\r\n+        disponibilite: { id: dispo.id }\r\n       };\r\n \r\n       await axios.post('/api/reservations', payload, { withCredentials: true });\r\n       toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(payload.professionnel.id);\r\n+      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId);\r\n     } catch (err) {\r\n       console.error(err);\r\n       toast.error(\"Erreur lors de la réservation.\");\r\n     }\r\n"
                },
                {
                    "date": 1750196170037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,23 +51,24 @@\n     }\r\n   };\r\n \r\n   // Réserver un créneau\r\n-  const reserverDisponibilite = async (dispo) => {\r\n-    try {\r\n-      // Envoyer uniquement l'id de la disponibilité au backend\r\n-      const payload = {\r\n-        disponibilite: { id: dispo.id }\r\n-      };\r\n+ const reserverDisponibilite = async (dispo) => {\r\n+  try {\r\n+    const payload = {\r\n+      professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n+      dateReservation: dispo.date,\r\n+      heureReservation: dispo.heureDebut,\r\n+    };\r\n \r\n-      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n-      toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors de la réservation.\");\r\n-    }\r\n-  };\r\n+    await axios.post('/api/reservations', payload, { withCredentials: true });\r\n+    toast.success(\"Réservation effectuée !\");\r\n+    fetchDisponibilites(payload.professionnelId);\r\n+  } catch (err) {\r\n+    console.error(err);\r\n+    toast.error(\"Erreur lors de la réservation.\");\r\n+  }\r\n+};\r\n \r\n   return (\r\n     <>\r\n       <Header />\r\n"
                },
                {
                    "date": 1750196325661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,24 +51,23 @@\n     }\r\n   };\r\n \r\n   // Réserver un créneau\r\n- const reserverDisponibilite = async (dispo) => {\r\n-  try {\r\n-    const payload = {\r\n-      professionnelId: dispo.professionnel?.id || dispo.professionnelId,\r\n-      dateReservation: dispo.date,\r\n-      heureReservation: dispo.heureDebut,\r\n-    };\r\n+  const reserverDisponibilite = async (dispo) => {\r\n+    try {\r\n+      // Envoyer uniquement l'id de la disponibilité au backend\r\n+      const payload = {\r\n+        disponibilite: { id: dispo.id }\r\n+      };\r\n \r\n-    await axios.post('/api/reservations', payload, { withCredentials: true });\r\n-    toast.success(\"Réservation effectuée !\");\r\n-    fetchDisponibilites(payload.professionnelId);\r\n-  } catch (err) {\r\n-    console.error(err);\r\n-    toast.error(\"Erreur lors de la réservation.\");\r\n-  }\r\n-};\r\n+      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n+      toast.success(\"Réservation effectuée !\");\r\n+      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors de la réservation.\");\r\n+    }\r\n+  };\r\n \r\n   return (\r\n     <>\r\n       <Header />\r\n"
                },
                {
                    "date": 1750196432175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,154 @@\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n+import { toast, ToastContainer } from 'react-toastify';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n+\r\n+const ListeProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [selectedPro, setSelectedPro] = useState(null);\r\n+  const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+\r\n+  // Charger les professionnels au montage\r\n+  useEffect(() => {\r\n+    const fetchProfessionnels = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n+        setError('');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n+      }\r\n+    };\r\n+    fetchProfessionnels();\r\n+  }, []);\r\n+\r\n+  // Charger les créneaux dispo d’un pro\r\n+  const fetchDisponibilites = async (proId) => {\r\n+    try {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n+      });\r\n+\r\n+      setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    }\r\n+  };\r\n+\r\n+  // Réserver un créneau\r\n+ async function reserverDisponibilite(dispo) {\r\n+  try {\r\n+    // Construire un objet Reservation minimal\r\n+    const reservation = {\r\n+      disponibilite: { id: dispo.id }  // uniquement l'id de la dispo est nécessaire\r\n+      // Pas besoin de fournir heureReservation, prix, etc. : le backend les gère\r\n+    };\r\n+\r\n+    const response = await axios.post('/api/reservations', reservation);\r\n+    console.log('Réservation réussie', response.data);\r\n+    toast.success('Réservation enregistrée !');\r\n+  } catch (error) {\r\n+    if (error.response) {\r\n+      console.error('Erreur serveur:', error.response.data);\r\n+      toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n+    } else {\r\n+      console.error('Erreur axios:', error.message);\r\n+      toast.error('Erreur réseau');\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+  return (\r\n+    <>\r\n+      <Header />\r\n+      <ToastContainer position=\"top-right\" />\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n+\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n+\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n+\r\n+        {disponibilitesVisibles && selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n+\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo, idx) => (\r\n+                    <motion.li\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n+                    >\r\n+                      <div>\r\n+                        <p className=\"font-medium\">\r\n+                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                          {new Date(dispo.date).toLocaleDateString()}\r\n+                        </p>\r\n+                        <p>\r\n+                          <Clock size={16} className=\"inline-block mr-1\" />\r\n+                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                        </p>\r\n+                      </div>\r\n+                      <button\r\n+                        onClick={() => reserverDisponibilite(dispo)}\r\n+                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\r\n+                      >\r\n+                        Réserver\r\n+                      </button>\r\n+                    </motion.li>\r\n+                  ))}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <PiedPage />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750198608460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,17 @@\n \r\n import PiedPage from './commun/PiedPage';\r\n import Header from './commun/header';\r\n \r\n+const DUREE_CONSULTATION_MINUTES = 45; // ✅ durée de consultation définie ici\r\n+\r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n   const [disponibilites, setDisponibilites] = useState([]);\r\n   const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n   const [error, setError] = useState('');\r\n \r\n-  // Charger les professionnels au montage\r\n   useEffect(() => {\r\n     const fetchProfessionnels = async () => {\r\n       try {\r\n         const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n@@ -29,9 +30,8 @@\n     };\r\n     fetchProfessionnels();\r\n   }, []);\r\n \r\n-  // Charger les créneaux dispo d’un pro\r\n   const fetchDisponibilites = async (proId) => {\r\n     try {\r\n       setSelectedPro(null);\r\n       setDisponibilites([]);\r\n@@ -50,31 +50,54 @@\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // Réserver un créneau\r\n- async function reserverDisponibilite(dispo) {\r\n-  try {\r\n-    // Construire un objet Reservation minimal\r\n-    const reservation = {\r\n-      disponibilite: { id: dispo.id }  // uniquement l'id de la dispo est nécessaire\r\n-      // Pas besoin de fournir heureReservation, prix, etc. : le backend les gère\r\n-    };\r\n+  // ⏱️ Découpe les plages horaires en sous-créneaux de 45 minutes\r\n+  const genererSousCreneaux = (dispo) => {\r\n+    const sousCreneaux = [];\r\n \r\n-    const response = await axios.post('/api/reservations', reservation);\r\n-    console.log('Réservation réussie', response.data);\r\n-    toast.success('Réservation enregistrée !');\r\n-  } catch (error) {\r\n-    if (error.response) {\r\n-      console.error('Erreur serveur:', error.response.data);\r\n-      toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n-    } else {\r\n-      console.error('Erreur axios:', error.message);\r\n-      toast.error('Erreur réseau');\r\n+    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n+    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n+\r\n+    const debut = new Date();\r\n+    debut.setHours(hStart, mStart, 0, 0);\r\n+\r\n+    const fin = new Date();\r\n+    fin.setHours(hEnd, mEnd, 0, 0);\r\n+\r\n+    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n+\r\n+    while (debut.getTime() + duree <= fin.getTime()) {\r\n+      const heureStr = debut.toTimeString().slice(0, 5);\r\n+      sousCreneaux.push(heureStr);\r\n+      debut.setTime(debut.getTime() + duree);\r\n     }\r\n-  }\r\n-}\r\n \r\n+    return sousCreneaux;\r\n+  };\r\n+\r\n+  // 📥 Réservation avec heureConsultation envoyée\r\n+  const reserverCreneau = async (dispo, heureConsultation) => {\r\n+    try {\r\n+      const reservation = {\r\n+        disponibilite: { id: dispo.id },\r\n+        heureConsultation, // obligatoire pour le backend\r\n+      };\r\n+\r\n+      const response = await axios.post('/api/reservations', reservation);\r\n+      console.log('Réservation réussie', response.data);\r\n+      toast.success('Réservation enregistrée !');\r\n+    } catch (error) {\r\n+      if (error.response) {\r\n+        console.error('Erreur serveur:', error.response.data);\r\n+        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n+      } else {\r\n+        console.error('Erreur axios:', error.message);\r\n+        toast.error('Erreur réseau');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <>\r\n       <Header />\r\n       <ToastContainer position=\"top-right\" />\r\n@@ -119,26 +142,30 @@\n                       initial={{ opacity: 0, y: 10 }}\r\n                       animate={{ opacity: 1, y: 0 }}\r\n                       exit={{ opacity: 0, y: -10 }}\r\n                       transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n+                      className=\"border p-4 rounded-md shadow-md\"\r\n                     >\r\n-                      <div>\r\n-                        <p className=\"font-medium\">\r\n-                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          {new Date(dispo.date).toLocaleDateString()}\r\n-                        </p>\r\n-                        <p>\r\n-                          <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                        </p>\r\n+                      <p className=\"font-medium mb-2\">\r\n+                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                        {new Date(dispo.date).toLocaleDateString()}\r\n+                      </p>\r\n+                      <p className=\"text-sm text-gray-700 mb-2\">\r\n+                        <Clock size={16} className=\"inline-block mr-1\" />\r\n+                        {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                      </p>\r\n+\r\n+                      <div className=\"flex flex-wrap gap-2\">\r\n+                        {genererSousCreneaux(dispo).map((heure, i) => (\r\n+                          <button\r\n+                            key={i}\r\n+                            onClick={() => reserverCreneau(dispo, heure)}\r\n+                            className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n+                          >\r\n+                            {heure}\r\n+                          </button>\r\n+                        ))}\r\n                       </div>\r\n-                      <button\r\n-                        onClick={() => reserverDisponibilite(dispo)}\r\n-                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\r\n-                      >\r\n-                        Réserver\r\n-                      </button>\r\n                     </motion.li>\r\n                   ))}\r\n                 </AnimatePresence>\r\n               </ul>\r\n"
                },
                {
                    "date": 1750199478335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n import PiedPage from './commun/PiedPage';\r\n import Header from './commun/header';\r\n \r\n-const DUREE_CONSULTATION_MINUTES = 45; // ✅ durée de consultation définie ici\r\n+const DUREE_CONSULTATION_MINUTES = 45; // durée de consultation\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n@@ -50,9 +50,9 @@\n       toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n     }\r\n   };\r\n \r\n-  // ⏱️ Découpe les plages horaires en sous-créneaux de 45 minutes\r\n+  // Découpe les plages horaires en sous-créneaux de 45 minutes\r\n   const genererSousCreneaux = (dispo) => {\r\n     const sousCreneaux = [];\r\n \r\n     const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n@@ -74,14 +74,13 @@\n \r\n     return sousCreneaux;\r\n   };\r\n \r\n-  // 📥 Réservation avec heureConsultation envoyée\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n     try {\r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n-        heureConsultation, // obligatoire pour le backend\r\n+        heureConsultation,\r\n       };\r\n \r\n       const response = await axios.post('/api/reservations', reservation);\r\n       console.log('Réservation réussie', response.data);\r\n@@ -178,152 +177,4 @@\n   );\r\n };\r\n \r\n export default ListeProfessionnels;\r\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import { CalendarCheck, Clock } from 'lucide-react';\r\n-import { toast, ToastContainer } from 'react-toastify';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-\r\n-import PiedPage from './commun/PiedPage';\r\n-import Header from './commun/header';\r\n-\r\n-const ListeProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [selectedPro, setSelectedPro] = useState(null);\r\n-  const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-\r\n-  // Charger les professionnels au montage\r\n-  useEffect(() => {\r\n-    const fetchProfessionnels = async () => {\r\n-      try {\r\n-        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n-        setProfessionnels(res.data);\r\n-        setError('');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        setError(\"Impossible de charger les professionnels.\");\r\n-      }\r\n-    };\r\n-    fetchProfessionnels();\r\n-  }, []);\r\n-\r\n-  // Charger les créneaux dispo d’un pro\r\n-  const fetchDisponibilites = async (proId) => {\r\n-    try {\r\n-      setSelectedPro(null);\r\n-      setDisponibilites([]);\r\n-      setDisponibilitesVisibles(false);\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n-        withCredentials: true,\r\n-      });\r\n-\r\n-      setDisponibilites(res.data);\r\n-      const pro = professionnels.find(p => p.id === proId) || null;\r\n-      setSelectedPro(pro);\r\n-      setDisponibilitesVisibles(true);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    }\r\n-  };\r\n-\r\n-  // Réserver un créneau\r\n-  const reserverDisponibilite = async (dispo) => {\r\n-    try {\r\n-      // Envoyer uniquement l'id de la disponibilité au backend\r\n-      const payload = {\r\n-        disponibilite: { id: dispo.id }\r\n-      };\r\n-\r\n-      await axios.post('/api/reservations', payload, { withCredentials: true });\r\n-      toast.success(\"Réservation effectuée !\");\r\n-      fetchDisponibilites(dispo.professionnel?.id || dispo.professionnelId);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors de la réservation.\");\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <Header />\r\n-      <ToastContainer position=\"top-right\" />\r\n-      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n-        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n-\r\n-        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n-\r\n-        <ul className=\"space-y-4\">\r\n-          {professionnels.map((pro) => (\r\n-            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n-              <div>\r\n-                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n-                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n-              </div>\r\n-              <button\r\n-                onClick={() => fetchDisponibilites(pro.id)}\r\n-                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n-              >\r\n-                Voir Disponibilités\r\n-              </button>\r\n-            </li>\r\n-          ))}\r\n-        </ul>\r\n-\r\n-        {disponibilitesVisibles && selectedPro && (\r\n-          <div className=\"mt-10\">\r\n-            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n-            </h3>\r\n-\r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n-              </p>\r\n-            ) : (\r\n-              <ul className=\"space-y-4\">\r\n-                <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => (\r\n-                    <motion.li\r\n-                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                      initial={{ opacity: 0, y: 10 }}\r\n-                      animate={{ opacity: 1, y: 0 }}\r\n-                      exit={{ opacity: 0, y: -10 }}\r\n-                      transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md shadow-md flex justify-between items-center\"\r\n-                    >\r\n-                      <div>\r\n-                        <p className=\"font-medium\">\r\n-                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          {new Date(dispo.date).toLocaleDateString()}\r\n-                        </p>\r\n-                        <p>\r\n-                          <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                        </p>\r\n-                      </div>\r\n-                      <button\r\n-                        onClick={() => reserverDisponibilite(dispo)}\r\n-                        className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\r\n-                      >\r\n-                        Réserver\r\n-                      </button>\r\n-                    </motion.li>\r\n-                  ))}\r\n-                </AnimatePresence>\r\n-              </ul>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n-      </main>\r\n-      <PiedPage />\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750199839851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n import PiedPage from './commun/PiedPage';\r\n import Header from './commun/header';\r\n \r\n-const DUREE_CONSULTATION_MINUTES = 45; // durée de consultation\r\n+const DUREE_CONSULTATION_MINUTES = 45; // durée de consultation définie ici\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n@@ -74,13 +74,14 @@\n \r\n     return sousCreneaux;\r\n   };\r\n \r\n+  // Réservation avec heureConsultation envoyée\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n     try {\r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n-        heureConsultation,\r\n+        heureConsultation: heureConsultation,  // bien envoyer l'heure choisie\r\n       };\r\n \r\n       const response = await axios.post('/api/reservations', reservation);\r\n       console.log('Réservation réussie', response.data);\r\n@@ -159,9 +160,9 @@\n                             key={i}\r\n                             onClick={() => reserverCreneau(dispo, heure)}\r\n                             className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n                           >\r\n-                            {heure}\r\n+                            Réserver\r\n                           </button>\r\n                         ))}\r\n                       </div>\r\n                     </motion.li>\r\n"
                },
                {
                    "date": 1750200125117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,18 +76,19 @@\n   };\r\n \r\n   // Réservation avec heureConsultation envoyée\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n-    try {\r\n-      const reservation = {\r\n-        disponibilite: { id: dispo.id },\r\n-        heureConsultation: heureConsultation,  // bien envoyer l'heure choisie\r\n-      };\r\n+  try {\r\n+    const reservation = {\r\n+      disponibilite: { id: dispo.id },\r\n+      heureConsultation: heureConsultation,\r\n+    };\r\n+    console.log('Données envoyées:', reservation);\r\n \r\n-      const response = await axios.post('/api/reservations', reservation);\r\n-      console.log('Réservation réussie', response.data);\r\n-      toast.success('Réservation enregistrée !');\r\n-    } catch (error) {\r\n+    const response = await axios.post('/api/reservations', reservation);\r\n+    console.log('Réservation réussie', response.data);\r\n+    toast.success('Réservation enregistrée !');\r\n+  } catch (error)\r\n       if (error.response) {\r\n         console.error('Erreur serveur:', error.response.data);\r\n         toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n       } else {\r\n"
                },
                {
                    "date": 1750200130378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,19 +76,18 @@\n   };\r\n \r\n   // Réservation avec heureConsultation envoyée\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n-  try {\r\n-    const reservation = {\r\n-      disponibilite: { id: dispo.id },\r\n-      heureConsultation: heureConsultation,\r\n-    };\r\n-    console.log('Données envoyées:', reservation);\r\n+    try {\r\n+      const reservation = {\r\n+        disponibilite: { id: dispo.id },\r\n+        heureConsultation: heureConsultation,  // bien envoyer l'heure choisie\r\n+      };\r\n \r\n-    const response = await axios.post('/api/reservations', reservation);\r\n-    console.log('Réservation réussie', response.data);\r\n-    toast.success('Réservation enregistrée !');\r\n-  } catch (error)\r\n+      const response = await axios.post('/api/reservations', reservation);\r\n+      console.log('Réservation réussie', response.data);\r\n+      toast.success('Réservation enregistrée !');\r\n+    } catch (error) {\r\n       if (error.response) {\r\n         console.error('Erreur serveur:', error.response.data);\r\n         toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n       } else {\r\n"
                },
                {
                    "date": 1750200135848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,18 +76,19 @@\n   };\r\n \r\n   // Réservation avec heureConsultation envoyée\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n-    try {\r\n-      const reservation = {\r\n-        disponibilite: { id: dispo.id },\r\n-        heureConsultation: heureConsultation,  // bien envoyer l'heure choisie\r\n-      };\r\n+  try {\r\n+    const reservation = {\r\n+      disponibilite: { id: dispo.id },\r\n+      heureConsultation: heureConsultation,\r\n+    };\r\n+    console.log('Données envoyées:', reservation);\r\n \r\n-      const response = await axios.post('/api/reservations', reservation);\r\n-      console.log('Réservation réussie', response.data);\r\n-      toast.success('Réservation enregistrée !');\r\n-    } catch (error) {\r\n+    const response = await axios.post('/api/reservations', reservation);\r\n+    console.log('Réservation réussie', response.data);\r\n+    toast.success('Réservation enregistrée !');\r\n+  } catch (error) {\r\n       if (error.response) {\r\n         console.error('Erreur serveur:', error.response.data);\r\n         toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n       } else {\r\n"
                },
                {
                    "date": 1750200798966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n import PiedPage from './commun/PiedPage';\r\n import Header from './commun/header';\r\n \r\n-const DUREE_CONSULTATION_MINUTES = 45; // durée de consultation définie ici\r\n+const DUREE_CONSULTATION_MINUTES = 45;\r\n \r\n const ListeProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [selectedPro, setSelectedPro] = useState(null);\r\n@@ -74,21 +74,25 @@\n \r\n     return sousCreneaux;\r\n   };\r\n \r\n-  // Réservation avec heureConsultation envoyée\r\n+  // Réservation avec l'id de la disponibilité et heureConsultation\r\n   const reserverCreneau = async (dispo, heureConsultation) => {\r\n-  try {\r\n-    const reservation = {\r\n-      disponibilite: { id: dispo.id },\r\n-      heureConsultation: heureConsultation,\r\n-    };\r\n-    console.log('Données envoyées:', reservation);\r\n+    try {\r\n+      if (!dispo.id) {\r\n+        toast.error(\"ID de la disponibilité introuvable.\");\r\n+        return;\r\n+      }\r\n \r\n-    const response = await axios.post('/api/reservations', reservation);\r\n-    console.log('Réservation réussie', response.data);\r\n-    toast.success('Réservation enregistrée !');\r\n-  } catch (error) {\r\n+      const reservation = {\r\n+        disponibilite: { id: dispo.id },\r\n+        heureConsultation: heureConsultation,\r\n+      };\r\n+\r\n+      const response = await axios.post('/api/reservations', reservation);\r\n+      console.log('Réservation réussie', response.data);\r\n+      toast.success('Réservation enregistrée !');\r\n+    } catch (error) {\r\n       if (error.response) {\r\n         console.error('Erreur serveur:', error.response.data);\r\n         toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n       } else {\r\n@@ -161,9 +165,9 @@\n                             key={i}\r\n                             onClick={() => reserverCreneau(dispo, heure)}\r\n                             className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n                           >\r\n-                            Réserver\r\n+                            Réserver {heure}\r\n                           </button>\r\n                         ))}\r\n                       </div>\r\n                     </motion.li>\r\n"
                },
                {
                    "date": 1750201897815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n+import { toast, ToastContainer } from 'react-toastify';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n+\r\n+const DUREE_CONSULTATION_MINUTES = 45;\r\n+\r\n+const ListeProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [selectedPro, setSelectedPro] = useState(null);\r\n+  const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+\r\n+  useEffect(() => {\r\n+    const fetchProfessionnels = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n+        setError('');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n+      }\r\n+    };\r\n+    fetchProfessionnels();\r\n+  }, []);\r\n+\r\n+  const fetchDisponibilites = async (proId) => {\r\n+    try {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n+      });\r\n+\r\n+      setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    }\r\n+  };\r\n+\r\n+  // Découpe les plages horaires en sous-créneaux de 45 minutes\r\n+  const genererSousCreneaux = (dispo) => {\r\n+    const sousCreneaux = [];\r\n+\r\n+    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n+    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n+\r\n+    const [year, month, day] = dispo.date.split('-').map(Number);\r\n+    const debut = new Date(year, month - 1, day, hStart, mStart, 0, 0);\r\n+    const fin = new Date(year, month - 1, day, hEnd, mEnd, 0, 0);\r\n+\r\n+    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n+\r\n+    while (debut.getTime() + duree <= fin.getTime()) {\r\n+      const heureStr = debut.toTimeString().slice(0, 5);\r\n+      sousCreneaux.push(heureStr);\r\n+      debut.setTime(debut.getTime() + duree);\r\n+    }\r\n+\r\n+    return sousCreneaux;\r\n+  };\r\n+\r\n+  const reserverCreneau = async (dispo, heureReservation) => {\r\n+    try {\r\n+      if (!dispo.id) {\r\n+        toast.error(\"ID de la disponibilité introuvable.\");\r\n+        return;\r\n+      }\r\n+\r\n+      const reservation = {\r\n+        disponibilite: { id: dispo.id },\r\n+        heureReservation: heureReservation,\r\n+      };\r\n+\r\n+      const response = await axios.post('/api/reservations', reservation, { withCredentials: true });\r\n+      console.log('Réservation réussie', response.data);\r\n+      toast.success('Réservation enregistrée !');\r\n+    } catch (error) {\r\n+      if (error.response) {\r\n+        console.error('Erreur serveur:', error.response.data);\r\n+        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n+      } else {\r\n+        console.error('Erreur axios:', error.message);\r\n+        toast.error('Erreur réseau');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <Header />\r\n+      <ToastContainer position=\"top-right\" />\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n+\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n+\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n+\r\n+        {disponibilitesVisibles && selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n+\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo, idx) => (\r\n+                    <motion.li\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md shadow-md\"\r\n+                    >\r\n+                      <p className=\"font-medium mb-2\">\r\n+                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                        {new Date(dispo.date).toLocaleDateString()}\r\n+                      </p>\r\n+                      <p className=\"text-sm text-gray-700 mb-2\">\r\n+                        <Clock size={16} className=\"inline-block mr-1\" />\r\n+                        {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                      </p>\r\n+\r\n+                      <div className=\"flex flex-wrap gap-2\">\r\n+                        {genererSousCreneaux(dispo).map((heure, i) => (\r\n+                          <button\r\n+                            key={i}\r\n+                            onClick={() => reserverCreneau(dispo, heure)}\r\n+                            className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n+                          >\r\n+                            Réserver {heure}\r\n+                          </button>\r\n+                        ))}\r\n+                      </div>\r\n+                    </motion.li>\r\n+                  ))}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <PiedPage />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750202075363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,13 @@\n \r\n     return sousCreneaux;\r\n   };\r\n \r\n-  const reserverCreneau = async (dispo, heureReservation) => {\r\n-    try {\r\n-      if (!dispo.id) {\r\n-        toast.error(\"ID de la disponibilité introuvable.\");\r\n-        return;\r\n-      }\r\n+const reserverCreneau = async (dispo, heureReservation) => {\r\n+  console.log('ID disponibilité:', dispo.id);  // Ajouté pour debug\r\n+  if (!dispo.id) {\r\n+    toast.error(\"ID de la disponibilité introuvable.\");\r\n+    return;\r\n \r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n         heureReservation: heureReservation,\r\n@@ -180,190 +179,4 @@\n   );\r\n };\r\n \r\n export default ListeProfessionnels;\r\n-import React, { useEffect, useState } from 'react';\r\n-import axios from 'axios';\r\n-import { CalendarCheck, Clock } from 'lucide-react';\r\n-import { toast, ToastContainer } from 'react-toastify';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-\r\n-import PiedPage from './commun/PiedPage';\r\n-import Header from './commun/header';\r\n-\r\n-const DUREE_CONSULTATION_MINUTES = 45;\r\n-\r\n-const ListeProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [selectedPro, setSelectedPro] = useState(null);\r\n-  const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-\r\n-  useEffect(() => {\r\n-    const fetchProfessionnels = async () => {\r\n-      try {\r\n-        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n-        setProfessionnels(res.data);\r\n-        setError('');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        setError(\"Impossible de charger les professionnels.\");\r\n-      }\r\n-    };\r\n-    fetchProfessionnels();\r\n-  }, []);\r\n-\r\n-  const fetchDisponibilites = async (proId) => {\r\n-    try {\r\n-      setSelectedPro(null);\r\n-      setDisponibilites([]);\r\n-      setDisponibilitesVisibles(false);\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n-        withCredentials: true,\r\n-      });\r\n-\r\n-      setDisponibilites(res.data);\r\n-      const pro = professionnels.find(p => p.id === proId) || null;\r\n-      setSelectedPro(pro);\r\n-      setDisponibilitesVisibles(true);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    }\r\n-  };\r\n-\r\n-  // Découpe les plages horaires en sous-créneaux de 45 minutes\r\n-  const genererSousCreneaux = (dispo) => {\r\n-    const sousCreneaux = [];\r\n-\r\n-    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n-    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n-\r\n-    const debut = new Date();\r\n-    debut.setHours(hStart, mStart, 0, 0);\r\n-\r\n-    const fin = new Date();\r\n-    fin.setHours(hEnd, mEnd, 0, 0);\r\n-\r\n-    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n-\r\n-    while (debut.getTime() + duree <= fin.getTime()) {\r\n-      const heureStr = debut.toTimeString().slice(0, 5);\r\n-      sousCreneaux.push(heureStr);\r\n-      debut.setTime(debut.getTime() + duree);\r\n-    }\r\n-\r\n-    return sousCreneaux;\r\n-  };\r\n-\r\n-  // Réservation avec l'id de la disponibilité et heureConsultation\r\n-  const reserverCreneau = async (dispo, heureConsultation) => {\r\n-    try {\r\n-      if (!dispo.id) {\r\n-        toast.error(\"ID de la disponibilité introuvable.\");\r\n-        return;\r\n-      }\r\n-\r\n-      const reservation = {\r\n-        disponibilite: { id: dispo.id },\r\n-        heureConsultation: heureConsultation,\r\n-      };\r\n-\r\n-      const response = await axios.post('/api/reservations', reservation);\r\n-      console.log('Réservation réussie', response.data);\r\n-      toast.success('Réservation enregistrée !');\r\n-    } catch (error) {\r\n-      if (error.response) {\r\n-        console.error('Erreur serveur:', error.response.data);\r\n-        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n-      } else {\r\n-        console.error('Erreur axios:', error.message);\r\n-        toast.error('Erreur réseau');\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <Header />\r\n-      <ToastContainer position=\"top-right\" />\r\n-      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n-        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n-\r\n-        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n-\r\n-        <ul className=\"space-y-4\">\r\n-          {professionnels.map((pro) => (\r\n-            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n-              <div>\r\n-                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n-                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n-              </div>\r\n-              <button\r\n-                onClick={() => fetchDisponibilites(pro.id)}\r\n-                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n-              >\r\n-                Voir Disponibilités\r\n-              </button>\r\n-            </li>\r\n-          ))}\r\n-        </ul>\r\n-\r\n-        {disponibilitesVisibles && selectedPro && (\r\n-          <div className=\"mt-10\">\r\n-            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n-            </h3>\r\n-\r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n-              </p>\r\n-            ) : (\r\n-              <ul className=\"space-y-4\">\r\n-                <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => (\r\n-                    <motion.li\r\n-                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                      initial={{ opacity: 0, y: 10 }}\r\n-                      animate={{ opacity: 1, y: 0 }}\r\n-                      exit={{ opacity: 0, y: -10 }}\r\n-                      transition={{ duration: 0.3 }}\r\n-                      className=\"border p-4 rounded-md shadow-md\"\r\n-                    >\r\n-                      <p className=\"font-medium mb-2\">\r\n-                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                        {new Date(dispo.date).toLocaleDateString()}\r\n-                      </p>\r\n-                      <p className=\"text-sm text-gray-700 mb-2\">\r\n-                        <Clock size={16} className=\"inline-block mr-1\" />\r\n-                        {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                      </p>\r\n-\r\n-                      <div className=\"flex flex-wrap gap-2\">\r\n-                        {genererSousCreneaux(dispo).map((heure, i) => (\r\n-                          <button\r\n-                            key={i}\r\n-                            onClick={() => reserverCreneau(dispo, heure)}\r\n-                            className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n-                          >\r\n-                            Réserver {heure}\r\n-                          </button>\r\n-                        ))}\r\n-                      </div>\r\n-                    </motion.li>\r\n-                  ))}\r\n-                </AnimatePresence>\r\n-              </ul>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n-      </main>\r\n-      <PiedPage />\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750202085784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,13 +72,14 @@\n \r\n     return sousCreneaux;\r\n   };\r\n \r\n-const reserverCreneau = async (dispo, heureReservation) => {\r\n-  console.log('ID disponibilité:', dispo.id);  // Ajouté pour debug\r\n-  if (!dispo.id) {\r\n-    toast.error(\"ID de la disponibilité introuvable.\");\r\n-    return;\r\n+  const reserverCreneau = async (dispo, heureReservation) => {\r\n+    try {\r\n+      if (!dispo.id) {\r\n+        toast.error(\"ID de la disponibilité introuvable.\");\r\n+        return;\r\n+      }\r\n \r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n         heureReservation: heureReservation,\r\n"
                },
                {
                    "date": 1750202098706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,12 +73,12 @@\n     return sousCreneaux;\r\n   };\r\n \r\n   const reserverCreneau = async (dispo, heureReservation) => {\r\n-    try {\r\n-      if (!dispo.id) {\r\n-        toast.error(\"ID de la disponibilité introuvable.\");\r\n-        return;\r\n+  console.log('ID disponibilité:', dispo.id);  // Ajouté pour debug\r\n+  if (!dispo.id) {\r\n+    toast.error(\"ID de la disponibilité introuvable.\");\r\n+    return;\r\n       }\r\n \r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n"
                },
                {
                    "date": 1750202122417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,12 +73,12 @@\n     return sousCreneaux;\r\n   };\r\n \r\n   const reserverCreneau = async (dispo, heureReservation) => {\r\n-    try {\r\n-      if (!dispo.id) {\r\n-        toast.error(\"ID de la disponibilité introuvable.\");\r\n-        return;\r\n+  console.log('ID disponibilité:', dispo.id);  // Ajouté pour debug\r\n+  if (!dispo.id) {\r\n+    toast.error(\"ID de la disponibilité introuvable.\");\r\n+    return;\r\n       }\r\n \r\n       const reservation = {\r\n         disponibilite: { id: dispo.id },\r\n"
                },
                {
                    "date": 1750203660123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,196 @@\n+import React, { useEffect, useState } from 'react';\r\n+import axios from 'axios';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n+import { toast, ToastContainer } from 'react-toastify';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n+\r\n+const DUREE_CONSULTATION_MINUTES = 45;\r\n+\r\n+const ListeProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [selectedPro, setSelectedPro] = useState(null);\r\n+  const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+\r\n+  useEffect(() => {\r\n+    const fetchProfessionnels = async () => {\r\n+      try {\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n+        setError('');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n+      }\r\n+    };\r\n+    fetchProfessionnels();\r\n+  }, []);\r\n+\r\n+  const fetchDisponibilites = async (proId) => {\r\n+    try {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n+\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n+      });\r\n+      console.log('Disponibilités reçues:', res.data);\r\n+\r\n+      res.data.forEach((dispo) => {\r\n+        if (!dispo.id) {\r\n+          console.warn(\"Disponibilité sans id détectée:\", dispo);\r\n+        }\r\n+      });\r\n+\r\n+      setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    }\r\n+  };\r\n+\r\n+  const genererSousCreneaux = (dispo) => {\r\n+    const sousCreneaux = [];\r\n+\r\n+    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n+    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n+\r\n+    const debut = new Date();\r\n+    debut.setHours(hStart, mStart, 0, 0);\r\n+\r\n+    const fin = new Date();\r\n+    fin.setHours(hEnd, mEnd, 0, 0);\r\n+\r\n+    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n+\r\n+    while (debut.getTime() + duree <= fin.getTime()) {\r\n+      const heureStr = debut.toTimeString().slice(0, 5);\r\n+      sousCreneaux.push(heureStr);\r\n+      debut.setTime(debut.getTime() + duree);\r\n+    }\r\n+\r\n+    return sousCreneaux;\r\n+  };\r\n+\r\n+  const reserverCreneau = async (dispo, heureConsultation) => {\r\n+    console.log('Tentative de réservation, dispo:', dispo);\r\n+\r\n+    if (!dispo?.id) {\r\n+      toast.error(\"ID de la disponibilité introuvable.\");\r\n+      return;\r\n+    }\r\n+\r\n+    // Format heureReservation en LocalDateTime ISO : YYYY-MM-DDTHH:mm:ss\r\n+    const heureReservation = `${dispo.date}T${heureConsultation}:00`;\r\n+\r\n+    const reservation = {\r\n+      disponibilite: { id: dispo.id },\r\n+      heureReservation: heureReservation,\r\n+    };\r\n+\r\n+    try {\r\n+      const response = await axios.post('/api/reservations', reservation, { withCredentials: true });\r\n+      console.log('Réservation réussie', response.data);\r\n+      toast.success('Réservation enregistrée !');\r\n+    } catch (error) {\r\n+      if (error.response) {\r\n+        console.error('Erreur serveur:', error.response.data);\r\n+        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n+      } else {\r\n+        console.error('Erreur axios:', error.message);\r\n+        toast.error('Erreur réseau');\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <Header />\r\n+      <ToastContainer position=\"top-right\" />\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n+\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n+\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n+\r\n+        {disponibilitesVisibles && selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n+\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo, idx) => (\r\n+                    <motion.li\r\n+                      key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                      initial={{ opacity: 0, y: 10 }}\r\n+                      animate={{ opacity: 1, y: 0 }}\r\n+                      exit={{ opacity: 0, y: -10 }}\r\n+                      transition={{ duration: 0.3 }}\r\n+                      className=\"border p-4 rounded-md shadow-md\"\r\n+                    >\r\n+                      <p className=\"font-medium mb-2\">\r\n+                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                        {new Date(dispo.date).toLocaleDateString()}\r\n+                      </p>\r\n+                      <p className=\"text-sm text-gray-700 mb-2\">\r\n+                        <Clock size={16} className=\"inline-block mr-1\" />\r\n+                        {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                      </p>\r\n+\r\n+                      <div className=\"flex flex-wrap gap-2\">\r\n+                        {genererSousCreneaux(dispo).map((heure, i) => (\r\n+                          <button\r\n+                            key={i}\r\n+                            onClick={() => reserverCreneau(dispo, heure)}\r\n+                            className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n+                          >\r\n+                            Réserver {heure}\r\n+                          </button>\r\n+                        ))}\r\n+                      </div>\r\n+                    </motion.li>\r\n+                  ))}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <PiedPage />\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default ListeProfessionnels;\r\n"
                }
            ],
            "date": 1750187786088,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { CalendarCheck, Clock, User, Euro } from 'lucide-react';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst ListeProfessionnels = () => {\r\n  const [professionnels, setProfessionnels] = useState([]);\r\n  const [selectedPro, setSelectedPro] = useState(null);\r\n  const [disponibilites, setDisponibilites] = useState([]);\r\n  const [loadingDispo, setLoadingDispo] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  // Chargement de la liste des professionnels\r\n  useEffect(() => {\r\n    const fetchProfessionnels = async () => {\r\n      try {\r\n        const response = await axios.get('/api/professionnels/tous', {\r\n          withCredentials: true,\r\n        });\r\n        setProfessionnels(response.data);\r\n      } catch (err) {\r\n        setError('Erreur lors du chargement des professionnels.');\r\n      }\r\n    };\r\n    fetchProfessionnels();\r\n  }, []);\r\n\r\n  // Chargement des disponibilités pour un professionnel donné (pour aujourd'hui)\r\n  const fetchDisponibilites = async (proId) => {\r\n    setLoadingDispo(true);\r\n    try {\r\n      // On utilise la date du jour au format ISO (YYYY-MM-DD)\r\n      const today = new Date().toISOString().split('T')[0];\r\n      const response = await axios.get(`/api/disponibilites/filtrees/${proId}?date=${today}`, {\r\n        withCredentials: true,\r\n      });\r\n      setDisponibilites(response.data);\r\n    } catch (err) {\r\n      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n    } finally {\r\n      setLoadingDispo(false);\r\n    }\r\n  };\r\n\r\n  // Fonction pour réserver une disponibilité\r\n  const reserverDisponibilite = async (dispo) => {\r\n    try {\r\n      // Appel à ton endpoint de réservation (à adapter selon ton API réelle)\r\n      const response = await axios.post('/api/reservations', dispo, {\r\n        withCredentials: true,\r\n      });\r\n      toast.success(\"Réservation effectuée !\");\r\n      // Optionnel : rafraîchir la liste des disponibilités après réservation\r\n      fetchDisponibilites(dispo.professionnelId);\r\n    } catch (err) {\r\n      toast.error(\"Erreur lors de la réservation.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto p-6\">\r\n      <ToastContainer position=\"top-right\" />\r\n      {error && <p className=\"text-red-600\">{error}</p>}\r\n\r\n      {/* Liste des professionnels */}\r\n      <h2 className=\"text-3xl font-bold mb-4\">Liste des professionnels</h2>\r\n      <ul className=\"space-y-4\">\r\n        {professionnels.map((pro) => (\r\n          <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n            <div>\r\n              <p className=\"text-xl font-semibold\">\r\n                {pro.prenom} {pro.nom}\r\n              </p>\r\n              <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => {\r\n                setSelectedPro(pro);\r\n                fetchDisponibilites(pro.id);\r\n              }}\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-md transition-colors hover:bg-blue-700\"\r\n            >\r\n              Voir Disponibilités\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Afficher les disponibilités pour le professionnel sélectionné */}\r\n      {selectedPro && (\r\n        <div className=\"mt-8\">\r\n          <h3 className=\"text-2xl font-bold mb-4\">\r\n            Disponibilités pour {selectedPro.prenom} {selectedPro.nom}\r\n          </h3>\r\n          {loadingDispo ? (\r\n            <p>Chargement des disponibilités...</p>\r\n          ) : disponibilites.length === 0 ? (\r\n            <p className=\"text-gray-600\">Aucune disponibilité trouvée pour aujourd'hui.</p>\r\n          ) : (\r\n            <ul className=\"space-y-4\">\r\n              <AnimatePresence>\r\n                {disponibilites.map((dispo) => (\r\n                  <motion.li\r\n                    key={dispo.id}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -10 }}\r\n                    transition={{ duration: 0.3 }}\r\n                    className=\"border p-4 rounded-md flex justify-between items-center shadow-sm\"\r\n                  >\r\n                    <div>\r\n                      <p className=\"font-medium\">\r\n                        <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n                        Date : {new Date(dispo.date).toLocaleDateString()}\r\n                      </p>\r\n                      <p>\r\n                        <Clock size={16} className=\"inline-block mr-1\" />\r\n                        Début : {dispo.heureDebut?.substring(0, 5)} - Fin : {dispo.heureFin?.substring(0, 5)}\r\n                      </p>\r\n                    </div>\r\n                    <button\r\n                      onClick={() => reserverDisponibilite(dispo)}\r\n                      className=\"px-4 py-2 bg-green-600 text-white rounded-md transition-colors hover:bg-green-700\"\r\n                    >\r\n                      Réserver\r\n                    </button>\r\n                  </motion.li>\r\n                ))}\r\n              </AnimatePresence>\r\n            </ul>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListeProfessionnels;\r\n"
        }
    ]
}