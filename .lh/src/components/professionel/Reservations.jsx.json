{
    "sourceFile": "src/components/professionel/Reservations.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1750969106658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750971012990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n \r\n       {/* Conteneur Toast */}\r\n       <ToastContainer\r\n         position=\"top-right\"\r\n-        autoClose={3000}\r\n+        autoClose={000}\r\n         hideProgressBar={false}\r\n         newestOnTop\r\n         closeOnClick\r\n         rtl={false}\r\n"
                },
                {
                    "date": 1750971196201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,57 +70,60 @@\n     filtre === 'TOUTES' ? true : mapStatutValidation(r) === filtre\r\n   );\r\n \r\n   const renderActions = (id, statut) => {\r\n-    switch (statut) {\r\n-      case 'EN_ATTENTE':\r\n-        return (\r\n-          <>\r\n-            <button\r\n-              onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n-              className=\"text-green-600 hover:text-green-800\"\r\n-              title=\"Valider\"\r\n-              disabled={updatingId === id}\r\n-            >\r\n-              <CheckCircle size={18} />\r\n-            </button>\r\n-            <button\r\n-              onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n-              className=\"text-red-600 hover:text-red-800\"\r\n-              title=\"Refuser\"\r\n-              disabled={updatingId === id}\r\n-            >\r\n-              <XCircle size={18} />\r\n-            </button>\r\n-          </>\r\n-        );\r\n-      case 'VALIDE':\r\n-        return (\r\n+  const iconBtnStyle = \"p-0 m-0 bg-transparent border-none focus:outline-none hover:scale-110 transition-transform\";\r\n+\r\n+  switch (statut) {\r\n+    case 'EN_ATTENTE':\r\n+      return (\r\n+        <>\r\n           <button\r\n-            onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n-            className=\"text-red-600 hover:text-red-800\"\r\n-            title=\"Refuser\"\r\n+            onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n+            className={`${iconBtnStyle} text-green-600`}\r\n+            title=\"Valider\"\r\n             disabled={updatingId === id}\r\n           >\r\n-            <XCircle size={18} />\r\n+            <CheckCircle size={20} />\r\n           </button>\r\n-        );\r\n-      case 'REFUSE':\r\n-        return (\r\n           <button\r\n-            onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n-            className=\"text-green-600 hover:text-green-800\"\r\n-            title=\"Valider\"\r\n+            onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n+            className={`${iconBtnStyle} text-red-600`}\r\n+            title=\"Refuser\"\r\n             disabled={updatingId === id}\r\n           >\r\n-            <CheckCircle size={18} />\r\n+            <XCircle size={20} />\r\n           </button>\r\n-        );\r\n-      default:\r\n-        return null;\r\n-    }\r\n-  };\r\n+        </>\r\n+      );\r\n+    case 'VALIDE':\r\n+      return (\r\n+        <button\r\n+          onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n+          className={`${iconBtnStyle} text-red-600`}\r\n+          title=\"Refuser\"\r\n+          disabled={updatingId === id}\r\n+        >\r\n+          <XCircle size={20} />\r\n+        </button>\r\n+      );\r\n+    case 'REFUSE':\r\n+      return (\r\n+        <button\r\n+          onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n+          className={`${iconBtnStyle} text-green-600`}\r\n+          title=\"Valider\"\r\n+          disabled={updatingId === id}\r\n+        >\r\n+          <CheckCircle size={20} />\r\n+        </button>\r\n+      );\r\n+    default:\r\n+      return null;\r\n+  }\r\n+};\r\n \r\n+\r\n   const getStatutMessage = (statut) => {\r\n     switch (statut) {\r\n       case 'VALIDE':\r\n         return <span className=\"text-green-600 font-medium\">Réservation validée</span>;\r\n"
                },
                {
                    "date": 1750971335805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,20 +38,16 @@\n     setUpdatingId(id);\r\n     try {\r\n       await updateReservationStatus(id, status);\r\n       await fetchReservations();\r\n-      setError(null);\r\n-\r\n-      // Notification toast selon action\r\n       if (status === 'VALIDE') {\r\n         toast.success(\"La réservation a été validée.\");\r\n       } else if (status === 'REFUSE') {\r\n         toast.error(\"La réservation a été refusée.\");\r\n       }\r\n-\r\n     } catch (err) {\r\n       setError(\"Erreur lors de la mise à jour du statut.\");\r\n-      alert(\"Erreur lors de la mise à jour du statut, veuillez réessayer.\");\r\n+      toast.error(\"Erreur lors de la mise à jour.\");\r\n     } finally {\r\n       setUpdatingId(null);\r\n     }\r\n   };\r\n@@ -65,95 +61,100 @@\n     }\r\n     return 'EN_ATTENTE';\r\n   };\r\n \r\n+  const formatHeure = (heure) => {\r\n+    if (!heure) return '';\r\n+    const [h, m] = heure.split(':');\r\n+    return `${h}h${m}`;\r\n+  };\r\n+\r\n+  const getStatutMessage = (statut) => {\r\n+    switch (statut) {\r\n+      case 'VALIDE':\r\n+        return <span className=\"text-green-600 font-semibold\">Validée</span>;\r\n+      case 'REFUSE':\r\n+        return <span className=\"text-red-600 font-semibold\">Refusée</span>;\r\n+      default:\r\n+        return <span className=\"text-gray-600 font-semibold\">En attente</span>;\r\n+    }\r\n+  };\r\n+\r\n   const reservationsFiltrees = reservations.filter((r) =>\r\n     filtre === 'TOUTES' ? true : mapStatutValidation(r) === filtre\r\n   );\r\n \r\n   const renderActions = (id, statut) => {\r\n-  const iconBtnStyle = \"p-0 m-0 bg-transparent border-none focus:outline-none hover:scale-110 transition-transform\";\r\n+    const btnStyle = \"p-0 m-0 bg-transparent border-none focus:outline-none hover:scale-110 transition-transform\";\r\n \r\n-  switch (statut) {\r\n-    case 'EN_ATTENTE':\r\n-      return (\r\n-        <>\r\n+    switch (statut) {\r\n+      case 'EN_ATTENTE':\r\n+        return (\r\n+          <>\r\n+            <button\r\n+              onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n+              className={`${btnStyle} text-green-600`}\r\n+              title=\"Valider\"\r\n+              disabled={updatingId === id}\r\n+            >\r\n+              <CheckCircle size={20} />\r\n+            </button>\r\n+            <button\r\n+              onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n+              className={`${btnStyle} text-red-600`}\r\n+              title=\"Refuser\"\r\n+              disabled={updatingId === id}\r\n+            >\r\n+              <XCircle size={20} />\r\n+            </button>\r\n+          </>\r\n+        );\r\n+      case 'VALIDE':\r\n+        return (\r\n           <button\r\n-            onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n-            className={`${iconBtnStyle} text-green-600`}\r\n-            title=\"Valider\"\r\n+            onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n+            className={`${btnStyle} text-red-600`}\r\n+            title=\"Refuser\"\r\n             disabled={updatingId === id}\r\n           >\r\n-            <CheckCircle size={20} />\r\n+            <XCircle size={20} />\r\n           </button>\r\n+        );\r\n+      case 'REFUSE':\r\n+        return (\r\n           <button\r\n-            onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n-            className={`${iconBtnStyle} text-red-600`}\r\n-            title=\"Refuser\"\r\n+            onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n+            className={`${btnStyle} text-green-600`}\r\n+            title=\"Valider\"\r\n             disabled={updatingId === id}\r\n           >\r\n-            <XCircle size={20} />\r\n+            <CheckCircle size={20} />\r\n           </button>\r\n-        </>\r\n-      );\r\n-    case 'VALIDE':\r\n-      return (\r\n-        <button\r\n-          onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n-          className={`${iconBtnStyle} text-red-600`}\r\n-          title=\"Refuser\"\r\n-          disabled={updatingId === id}\r\n-        >\r\n-          <XCircle size={20} />\r\n-        </button>\r\n-      );\r\n-    case 'REFUSE':\r\n-      return (\r\n-        <button\r\n-          onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n-          className={`${iconBtnStyle} text-green-600`}\r\n-          title=\"Valider\"\r\n-          disabled={updatingId === id}\r\n-        >\r\n-          <CheckCircle size={20} />\r\n-        </button>\r\n-      );\r\n-    default:\r\n-      return null;\r\n-  }\r\n-};\r\n-\r\n-\r\n-  const getStatutMessage = (statut) => {\r\n-    switch (statut) {\r\n-      case 'VALIDE':\r\n-        return <span className=\"text-green-600 font-medium\">Réservation validée</span>;\r\n-      case 'REFUSE':\r\n-        return <span className=\"text-red-600 font-medium\">Réservation refusée</span>;\r\n-      case 'EN_ATTENTE':\r\n+        );\r\n       default:\r\n-        return <span className=\"text-gray-600 font-medium\">En attente de validation</span>;\r\n+        return null;\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"max-w-5xl mx-auto p-4\">\r\n-      <h2 className=\"text-2xl font-semibold text-blue-700 dark:text-blue-400 mb-6 flex items-center gap-2\">\r\n+      <h2 className=\"text-2xl font-semibold text-blue-700 mb-6 flex items-center gap-2\">\r\n         <CheckCircle size={24} /> Mes réservations\r\n       </h2>\r\n \r\n+      {/* Erreur */}\r\n       {error && <div className=\"text-red-500 mb-4\">{error}</div>}\r\n \r\n       {/* Filtres */}\r\n-      <div className=\"mb-4 flex gap-3 flex-wrap\">\r\n+      <div className=\"mb-4 flex gap-2 flex-wrap\">\r\n         {['TOUTES', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map((f) => (\r\n           <button\r\n             key={f}\r\n             onClick={() => setFiltre(f)}\r\n-            className={`px-3 py-1 rounded-full text-sm border ${\r\n+            className={`px-3 py-1 rounded-full text-sm font-medium transition-all duration-150 ${\r\n               filtre === f\r\n-                ? 'bg-blue-600 text-white border-blue-600'\r\n-                : 'bg-white text-gray-700 border-gray-300'\r\n+                ? 'bg-blue-600 text-white shadow-md'\r\n+                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n             }`}\r\n           >\r\n             {f === 'TOUTES'\r\n               ? 'Toutes'\r\n@@ -165,58 +166,57 @@\n           </button>\r\n         ))}\r\n       </div>\r\n \r\n+      {/* Table */}\r\n       {loading ? (\r\n-        <p className=\"text-blue-600 dark:text-blue-400\">Chargement...</p>\r\n+        <p className=\"text-blue-600\">Chargement...</p>\r\n       ) : reservationsFiltrees.length === 0 ? (\r\n-        <p className=\"text-gray-500 dark:text-gray-400\">Aucune réservation</p>\r\n+        <p className=\"text-gray-500\">Aucune réservation</p>\r\n       ) : (\r\n-        <table className=\"w-full table-auto border-collapse border border-gray-300 dark:border-gray-700\">\r\n-          <thead>\r\n-            <tr className=\"bg-blue-100 dark:bg-blue-800 text-left\">\r\n-              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Date</th>\r\n-              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Heure</th>\r\n-              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Utilisateur</th>\r\n-              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Statut</th>\r\n-              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Actions</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {reservationsFiltrees.map((reservation) => {\r\n-              const statutMapped = mapStatutValidation(reservation);\r\n-              const utilisateurNomPrenom = reservation.utilisateur\r\n-                ? `${reservation.utilisateur.prenom || ''} ${reservation.utilisateur.nom || ''}`.trim()\r\n-                : 'Utilisateur inconnu';\r\n+        <div className=\"overflow-x-auto rounded-lg shadow\">\r\n+          <table className=\"w-full border-collapse\">\r\n+            <thead className=\"bg-blue-50\">\r\n+              <tr>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Date</th>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Heure</th>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Utilisateur</th>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Statut</th>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Actions</th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody className=\"bg-white\">\r\n+              {reservationsFiltrees.map((reservation) => {\r\n+                const statutMapped = mapStatutValidation(reservation);\r\n+                const utilisateurNomPrenom = reservation.utilisateur\r\n+                  ? `${reservation.utilisateur.prenom || ''} ${reservation.utilisateur.nom || ''}`.trim()\r\n+                  : 'Utilisateur inconnu';\r\n \r\n-              return (\r\n-                <tr key={reservation.id} className=\"border-t border-gray-300 dark:border-gray-700\">\r\n-                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">\r\n-                    {new Date(reservation.dateReservation).toLocaleDateString()}\r\n-                  </td>\r\n-                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">{reservation.heureConsultation}</td>\r\n-                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">{utilisateurNomPrenom}</td>\r\n-                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">\r\n-                    {getStatutMessage(statutMapped)}\r\n-                  </td>\r\n-                  <td className=\"p-2 border border-gray-300 dark:border-gray-700 flex gap-2\">\r\n-                    {renderActions(reservation.id, statutMapped)}\r\n-                  </td>\r\n-                </tr>\r\n-              );\r\n-            })}\r\n-          </tbody>\r\n-        </table>\r\n+                return (\r\n+                  <tr key={reservation.id} className=\"border-t hover:bg-gray-50\">\r\n+                    <td className=\"px-4 py-2\">\r\n+                      {new Date(reservation.dateReservation).toLocaleDateString('fr-FR')}\r\n+                    </td>\r\n+                    <td className=\"px-4 py-2\">\r\n+                      {formatHeure(reservation.heureConsultation)}\r\n+                    </td>\r\n+                    <td className=\"px-4 py-2\">{utilisateurNomPrenom}</td>\r\n+                    <td className=\"px-4 py-2\">{getStatutMessage(statutMapped)}</td>\r\n+                    <td className=\"px-4 py-2 flex gap-2\">{renderActions(reservation.id, statutMapped)}</td>\r\n+                  </tr>\r\n+                );\r\n+              })}\r\n+            </tbody>\r\n+          </table>\r\n+        </div>\r\n       )}\r\n \r\n-      {/* Conteneur Toast */}\r\n       <ToastContainer\r\n         position=\"top-right\"\r\n         autoClose={2000}\r\n         hideProgressBar={false}\r\n         newestOnTop\r\n         closeOnClick\r\n-        rtl={false}\r\n         pauseOnFocusLoss\r\n         draggable\r\n         pauseOnHover\r\n         theme=\"colored\"\r\n@@ -224,5 +224,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Reservations;\n\\ No newline at end of file\n+export default Reservations;\r\n"
                },
                {
                    "date": 1750971378204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n         <div className=\"overflow-x-auto rounded-lg shadow\">\r\n           <table className=\"w-full border-collapse\">\r\n             <thead className=\"bg-blue-50\">\r\n               <tr>\r\n-                <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Date</th>\r\n+                <th className=\"px-4 py-2 text-left text-sm font-semibold text-primary-600\">Date</th>\r\n                 <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Heure</th>\r\n                 <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Utilisateur</th>\r\n                 <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Statut</th>\r\n                 <th className=\"px-4 py-2 text-left text-sm font-semibold text-gray-600\">Actions</th>\r\n"
                }
            ],
            "date": 1750969106658,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { getReservations, updateReservationStatus } from '../../services/servicePsy';\r\nimport { CheckCircle, XCircle } from 'lucide-react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst Reservations = ({ proId }) => {\r\n  const [reservations, setReservations] = useState([]);\r\n  const [filtre, setFiltre] = useState('TOUTES');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [updatingId, setUpdatingId] = useState(null);\r\n\r\n  const fetchReservations = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const data = await getReservations(proId);\r\n      setReservations(data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError(\"Erreur lors du chargement des réservations.\");\r\n      setReservations([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (proId) {\r\n      fetchReservations();\r\n    } else {\r\n      setLoading(false);\r\n      setError(\"ID professionnel manquant.\");\r\n    }\r\n  }, [proId]);\r\n\r\n  const handleUpdateStatus = async (id, status) => {\r\n    setUpdatingId(id);\r\n    try {\r\n      await updateReservationStatus(id, status);\r\n      await fetchReservations();\r\n      setError(null);\r\n\r\n      // Notification toast selon action\r\n      if (status === 'VALIDE') {\r\n        toast.success(\"La réservation a été validée.\");\r\n      } else if (status === 'REFUSE') {\r\n        toast.error(\"La réservation a été refusée.\");\r\n      }\r\n\r\n    } catch (err) {\r\n      setError(\"Erreur lors de la mise à jour du statut.\");\r\n      alert(\"Erreur lors de la mise à jour du statut, veuillez réessayer.\");\r\n    } finally {\r\n      setUpdatingId(null);\r\n    }\r\n  };\r\n\r\n  const mapStatutValidation = (reservation) => {\r\n    if (reservation.statut === 'PAYEE' || reservation.statut === 'EN_ATTENTE_PAIEMENT') {\r\n      return 'VALIDE';\r\n    }\r\n    if (reservation.statut === 'REFUSE' || reservation.statut === 'ANNULEE') {\r\n      return 'REFUSE';\r\n    }\r\n    return 'EN_ATTENTE';\r\n  };\r\n\r\n  const reservationsFiltrees = reservations.filter((r) =>\r\n    filtre === 'TOUTES' ? true : mapStatutValidation(r) === filtre\r\n  );\r\n\r\n  const renderActions = (id, statut) => {\r\n    switch (statut) {\r\n      case 'EN_ATTENTE':\r\n        return (\r\n          <>\r\n            <button\r\n              onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n              className=\"text-green-600 hover:text-green-800\"\r\n              title=\"Valider\"\r\n              disabled={updatingId === id}\r\n            >\r\n              <CheckCircle size={18} />\r\n            </button>\r\n            <button\r\n              onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n              className=\"text-red-600 hover:text-red-800\"\r\n              title=\"Refuser\"\r\n              disabled={updatingId === id}\r\n            >\r\n              <XCircle size={18} />\r\n            </button>\r\n          </>\r\n        );\r\n      case 'VALIDE':\r\n        return (\r\n          <button\r\n            onClick={() => handleUpdateStatus(id, 'REFUSE')}\r\n            className=\"text-red-600 hover:text-red-800\"\r\n            title=\"Refuser\"\r\n            disabled={updatingId === id}\r\n          >\r\n            <XCircle size={18} />\r\n          </button>\r\n        );\r\n      case 'REFUSE':\r\n        return (\r\n          <button\r\n            onClick={() => handleUpdateStatus(id, 'VALIDE')}\r\n            className=\"text-green-600 hover:text-green-800\"\r\n            title=\"Valider\"\r\n            disabled={updatingId === id}\r\n          >\r\n            <CheckCircle size={18} />\r\n          </button>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const getStatutMessage = (statut) => {\r\n    switch (statut) {\r\n      case 'VALIDE':\r\n        return <span className=\"text-green-600 font-medium\">Réservation validée</span>;\r\n      case 'REFUSE':\r\n        return <span className=\"text-red-600 font-medium\">Réservation refusée</span>;\r\n      case 'EN_ATTENTE':\r\n      default:\r\n        return <span className=\"text-gray-600 font-medium\">En attente de validation</span>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto p-4\">\r\n      <h2 className=\"text-2xl font-semibold text-blue-700 dark:text-blue-400 mb-6 flex items-center gap-2\">\r\n        <CheckCircle size={24} /> Mes réservations\r\n      </h2>\r\n\r\n      {error && <div className=\"text-red-500 mb-4\">{error}</div>}\r\n\r\n      {/* Filtres */}\r\n      <div className=\"mb-4 flex gap-3 flex-wrap\">\r\n        {['TOUTES', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map((f) => (\r\n          <button\r\n            key={f}\r\n            onClick={() => setFiltre(f)}\r\n            className={`px-3 py-1 rounded-full text-sm border ${\r\n              filtre === f\r\n                ? 'bg-blue-600 text-white border-blue-600'\r\n                : 'bg-white text-gray-700 border-gray-300'\r\n            }`}\r\n          >\r\n            {f === 'TOUTES'\r\n              ? 'Toutes'\r\n              : f === 'EN_ATTENTE'\r\n              ? 'En attente'\r\n              : f === 'VALIDE'\r\n              ? 'Validées'\r\n              : 'Refusées'}\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {loading ? (\r\n        <p className=\"text-blue-600 dark:text-blue-400\">Chargement...</p>\r\n      ) : reservationsFiltrees.length === 0 ? (\r\n        <p className=\"text-gray-500 dark:text-gray-400\">Aucune réservation</p>\r\n      ) : (\r\n        <table className=\"w-full table-auto border-collapse border border-gray-300 dark:border-gray-700\">\r\n          <thead>\r\n            <tr className=\"bg-blue-100 dark:bg-blue-800 text-left\">\r\n              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Date</th>\r\n              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Heure</th>\r\n              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Utilisateur</th>\r\n              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Statut</th>\r\n              <th className=\"p-2 border border-gray-300 dark:border-gray-700\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {reservationsFiltrees.map((reservation) => {\r\n              const statutMapped = mapStatutValidation(reservation);\r\n              const utilisateurNomPrenom = reservation.utilisateur\r\n                ? `${reservation.utilisateur.prenom || ''} ${reservation.utilisateur.nom || ''}`.trim()\r\n                : 'Utilisateur inconnu';\r\n\r\n              return (\r\n                <tr key={reservation.id} className=\"border-t border-gray-300 dark:border-gray-700\">\r\n                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">\r\n                    {new Date(reservation.dateReservation).toLocaleDateString()}\r\n                  </td>\r\n                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">{reservation.heureConsultation}</td>\r\n                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">{utilisateurNomPrenom}</td>\r\n                  <td className=\"p-2 border border-gray-300 dark:border-gray-700\">\r\n                    {getStatutMessage(statutMapped)}\r\n                  </td>\r\n                  <td className=\"p-2 border border-gray-300 dark:border-gray-700 flex gap-2\">\r\n                    {renderActions(reservation.id, statutMapped)}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      {/* Conteneur Toast */}\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reservations;"
        }
    ]
}