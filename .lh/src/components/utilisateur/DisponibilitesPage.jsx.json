{
    "sourceFile": "src/components/utilisateur/DisponibilitesPage.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1750880972806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750881233967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useEffect, useState } from 'react';\r\n import axios from 'axios';\r\n import { useParams, useNavigate } from 'react-router-dom';\r\n import { toast } from 'react-toastify';\r\n-import DisponibilitesModal from './utilisateur/DisponibilitesModal'; // On peut renommer ou copier le composant pour l'adapter en page\r\n+  // On peut renommer ou copier le composant pour l'adapter en page\r\n \r\n const DisponibilitesPage = () => {\r\n   const { proId } = useParams();\r\n   const navigate = useNavigate();\r\n"
                }
            ],
            "date": 1750880972806,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport DisponibilitesModal from './utilisateur/DisponibilitesModal'; // On peut renommer ou copier le composant pour l'adapter en page\r\n\r\nconst DisponibilitesPage = () => {\r\n  const { proId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [disponibilites, setDisponibilites] = useState([]);\r\n  const [pro, setPro] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchDisponibilites = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const resDisponibilites = await axios.get(`/api/disponibilites/${proId}`, { withCredentials: true });\r\n        setDisponibilites(resDisponibilites.data);\r\n        // Pour info du pro, tu peux soit passer l'objet via state lors de la navigation, soit recharger ici :\r\n        const resPro = await axios.get(`/api/professionnels/${proId}`, { withCredentials: true });\r\n        setPro(resPro.data);\r\n      } catch (error) {\r\n        toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n        navigate('/'); // Retour à la liste si erreur\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDisponibilites();\r\n  }, [proId, navigate]);\r\n\r\n  // Le composant DisponibilitesModal attend un onClose (pour fermer le modal)\r\n  // Ici on peut afficher directement son contenu en enlevant la partie modal,\r\n  // Ou bien extraire son contenu dans un composant Présentation simple.\r\n\r\n  if (loading) return <p className=\"text-center mt-20\">Chargement...</p>;\r\n\r\n  return (\r\n    <div className=\"max-w-5xl mx-auto p-6\" style={{ fontFamily: \"'Poppins', sans-serif\" }}>\r\n      <button\r\n        onClick={() => navigate(-1)}\r\n        className=\"mb-6 text-indigo-700 font-semibold underline\"\r\n      >\r\n        ← Retour à la liste des professionnels\r\n      </button>\r\n\r\n      <h1 className=\"text-3xl font-bold mb-6\">\r\n        Disponibilités du Dr {pro?.prenom} {pro?.nom}\r\n      </h1>\r\n\r\n      {/* Ici tu peux réutiliser la logique de DisponibilitesModal mais sans le décor modal */}\r\n      {/* Par exemple, tu peux extraire la partie affichage créneaux dans un composant à part, sinon coller le code ici */}\r\n      {/* Je te recommande d'extraire l'affichage pour éviter la duplication */}\r\n\r\n      {/* Exemple simplifié : */}\r\n      {disponibilites.length === 0 ? (\r\n        <p>Aucune disponibilité trouvée.</p>\r\n      ) : (\r\n        disponibilites.map((dispo, idx) => {\r\n          // ... réutilise la fonction générerSousCreneaux et l'affichage ici\r\n          // Pour gagner du temps, tu peux adapter la fonction et JSX de DisponibilitesModal sans les balises modal et animation\r\n          return (\r\n            <div key={idx} className=\"mb-8 border p-4 rounded shadow-sm\">\r\n              <p>{new Date(dispo.date).toLocaleDateString('fr-FR')}</p>\r\n              <p>{dispo.heureDebut} - {dispo.heureFin}</p>\r\n              {/* Boutons réserver, etc */}\r\n            </div>\r\n          );\r\n        })\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisponibilitesPage;\r\n"
        }
    ]
}