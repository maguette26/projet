{
    "sourceFile": "src/components/utilisateur/PaymentForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1750273328802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750273674003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,213 @@\n-// PaymentForm.jsx\r\n-import React, { useState } from 'react';\r\n+import React, { useEffect, useState } from 'react';\r\n+import PropTypes from 'prop-types';\r\n+\r\n import { loadStripe } from '@stripe/stripe-js';\r\n-import { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n+import {\r\n+  Elements,\r\n+  CardElement,\r\n+  useStripe,\r\n+  useElements,\r\n+} from '@stripe/react-stripe-js';\r\n \r\n-const stripePromise = loadStripe('pk_test_TA_CLÉ_PUBLIQUE');\r\n+import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\r\n \r\n-function CheckoutForm({ reservationId, onClose }) {\r\n-  // ... code complet comme avant ...\r\n+import axios from 'axios';\r\n \r\n+const stripePromise = loadStripe('pk_test_TA_CLE_PUBLIQUE_STRIPE'); // Remplace par ta clé publique Stripe\r\n+\r\n+// Composant interne Stripe Checkout\r\n+const CheckoutForm = ({ reservationId, onSuccess, onError }) => {\r\n+  const stripe = useStripe();\r\n+  const elements = useElements();\r\n+\r\n+  const [clientSecret, setClientSecret] = useState(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    // Créer le PaymentIntent backend pour cette réservation\r\n+    const createPaymentIntent = async () => {\r\n+      try {\r\n+        const res = await axios.post(\r\n+          `/api/payment/stripe/create-payment-intent`,\r\n+          { reservationId },\r\n+          { withCredentials: true }\r\n+        );\r\n+        setClientSecret(res.data.clientSecret);\r\n+      } catch (error) {\r\n+        onError('Erreur lors de la création du paiement Stripe');\r\n+      }\r\n+    };\r\n+    createPaymentIntent();\r\n+  }, [reservationId, onError]);\r\n+\r\n+  const handleSubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    if (!stripe || !elements) return;\r\n+\r\n+    setLoading(true);\r\n+    const cardElement = elements.getElement(CardElement);\r\n+\r\n+    try {\r\n+      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n+        payment_method: {\r\n+          card: cardElement,\r\n+        },\r\n+      });\r\n+\r\n+      if (error) {\r\n+        onError(error.message);\r\n+        setLoading(false);\r\n+      } else if (paymentIntent.status === 'succeeded') {\r\n+        onSuccess('Paiement Stripe réussi');\r\n+        setLoading(false);\r\n+      }\r\n+    } catch (e) {\r\n+      onError('Erreur lors du paiement Stripe');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (!clientSecret) return <p>Chargement du paiement Stripe...</p>;\r\n+\r\n   return (\r\n-    <div style={{ maxWidth: 400, margin: 'auto', border: '1px solid #ddd', padding: 20, borderRadius: 8 }}>\r\n-      <button onClick={onClose} style={{ float: 'right' }}>X</button>\r\n-      {/* le reste du formulaire */}\r\n-    </div>\r\n+    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+      <CardElement\r\n+        options={{\r\n+          style: {\r\n+            base: {\r\n+              fontSize: '16px',\r\n+              color: '#32325d',\r\n+              '::placeholder': { color: '#a0aec0' },\r\n+            },\r\n+            invalid: { color: '#fa755a' },\r\n+          },\r\n+        }}\r\n+      />\r\n+      <button\r\n+        type=\"submit\"\r\n+        disabled={!stripe || loading}\r\n+        className=\"px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50\"\r\n+      >\r\n+        {loading ? 'Paiement en cours...' : 'Payer avec Stripe'}\r\n+      </button>\r\n+    </form>\r\n   );\r\n-}\r\n+};\r\n \r\n-export default function PaymentForm(props) {\r\n+// Composant principal PaymentForm\r\n+const PaymentForm = ({ reservationId, onClose }) => {\r\n+  const [message, setMessage] = useState(null);\r\n+  const [paymentMethod, setPaymentMethod] = useState('stripe'); // 'stripe' ou 'paypal'\r\n+\r\n+  // Gestion des succès et erreurs pour affichage\r\n+  const handleSuccess = (msg) => {\r\n+    setMessage({ type: 'success', text: msg });\r\n+  };\r\n+  const handleError = (msg) => {\r\n+    setMessage({ type: 'error', text: msg });\r\n+  };\r\n+\r\n   return (\r\n-    <Elements stripe={stripePromise}>\r\n-      <CheckoutForm {...props} />\r\n-    </Elements>\r\n+    <div\r\n+      className=\"bg-white rounded p-6 w-full max-w-md shadow-lg relative\"\r\n+      role=\"dialog\"\r\n+      aria-modal=\"true\"\r\n+    >\r\n+      <button\r\n+        onClick={onClose}\r\n+        className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\r\n+        aria-label=\"Fermer le formulaire de paiement\"\r\n+      >\r\n+        ✕\r\n+      </button>\r\n+\r\n+      <h2 className=\"text-xl font-bold mb-4 text-center\">Paiement de la réservation #{reservationId}</h2>\r\n+\r\n+      <div className=\"mb-4 flex justify-center gap-4\">\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('stripe');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'stripe' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          Stripe\r\n+        </button>\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('paypal');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'paypal' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          PayPal\r\n+        </button>\r\n+      </div>\r\n+\r\n+      {message && (\r\n+        <p\r\n+          className={`mb-4 text-center ${\r\n+            message.type === 'success' ? 'text-green-600' : 'text-red-600'\r\n+          }`}\r\n+        >\r\n+          {message.text}\r\n+        </p>\r\n+      )}\r\n+\r\n+      {paymentMethod === 'stripe' && (\r\n+        <Elements stripe={stripePromise}>\r\n+          <CheckoutForm\r\n+            reservationId={reservationId}\r\n+            onSuccess={handleSuccess}\r\n+            onError={handleError}\r\n+          />\r\n+        </Elements>\r\n+      )}\r\n+\r\n+      {paymentMethod === 'paypal' && (\r\n+        <PayPalScriptProvider\r\n+          options={{\r\n+            'client-id': 'sb', // 'sb' pour sandbox, remplace par ta clé PayPal en prod\r\n+            currency: 'EUR',\r\n+          }}\r\n+        >\r\n+          <PayPalButtons\r\n+            createOrder={async (_, actions) => {\r\n+              try {\r\n+                const res = await axios.post(\r\n+                  `/api/payment/paypal/create-order`,\r\n+                  { reservationId },\r\n+                  { withCredentials: true }\r\n+                );\r\n+                return res.data.orderID; // backend doit renvoyer orderID PayPal\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la création de la commande PayPal');\r\n+              }\r\n+            }}\r\n+            onApprove={async (_, actions) => {\r\n+              try {\r\n+                const details = await actions.order.capture();\r\n+                handleSuccess('Paiement PayPal réussi');\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la capture du paiement PayPal');\r\n+              }\r\n+            }}\r\n+            onError={(err) => handleError(`Erreur PayPal : ${err.toString()}`)}\r\n+            style={{ layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' }}\r\n+          />\r\n+        </PayPalScriptProvider>\r\n+      )}\r\n+    </div>\r\n   );\r\n-}\r\n+};\r\n+\r\n+PaymentForm.propTypes = {\r\n+  reservationId: PropTypes.number.isRequired,\r\n+  onClose: PropTypes.func.isRequired,\r\n+};\r\n+\r\n+export default PaymentForm;\r\n"
                },
                {
                    "date": 1750273958000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,213 +1,220 @@\n import React, { useEffect, useState } from 'react';\r\n-import PropTypes from 'prop-types';\r\n-\r\n-import { loadStripe } from '@stripe/stripe-js';\r\n-import {\r\n-  Elements,\r\n-  CardElement,\r\n-  useStripe,\r\n-  useElements,\r\n-} from '@stripe/react-stripe-js';\r\n-\r\n-import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\r\n-\r\n import axios from 'axios';\r\n+import { CalendarCheck, Clock } from 'lucide-react';\r\n+import { toast, ToastContainer } from 'react-toastify';\r\n+import { motion, AnimatePresence } from 'framer-motion';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-const stripePromise = loadStripe('pk_test_TA_CLE_PUBLIQUE_STRIPE'); // Remplace par ta clé publique Stripe\r\n+import PiedPage from './commun/PiedPage';\r\n+import Header from './commun/header';\r\n+import PaymentForm from './components/PaymentForm'; // Assure-toi que le chemin est correct\r\n \r\n-// Composant interne Stripe Checkout\r\n-const CheckoutForm = ({ reservationId, onSuccess, onError }) => {\r\n-  const stripe = useStripe();\r\n-  const elements = useElements();\r\n+const DUREE_CONSULTATION_MINUTES = 45;\r\n \r\n-  const [clientSecret, setClientSecret] = useState(null);\r\n-  const [loading, setLoading] = useState(false);\r\n+const ListeProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [selectedPro, setSelectedPro] = useState(null);\r\n+  const [disponibilites, setDisponibilites] = useState([]);\r\n+  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [reservationIdPourPaiement, setReservationIdPourPaiement] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    // Créer le PaymentIntent backend pour cette réservation\r\n-    const createPaymentIntent = async () => {\r\n+    const fetchProfessionnels = async () => {\r\n       try {\r\n-        const res = await axios.post(\r\n-          `/api/payment/stripe/create-payment-intent`,\r\n-          { reservationId },\r\n-          { withCredentials: true }\r\n-        );\r\n-        setClientSecret(res.data.clientSecret);\r\n-      } catch (error) {\r\n-        onError('Erreur lors de la création du paiement Stripe');\r\n+        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n+        setProfessionnels(res.data);\r\n+        setError('');\r\n+      } catch (err) {\r\n+        console.error(err);\r\n+        setError(\"Impossible de charger les professionnels.\");\r\n       }\r\n     };\r\n-    createPaymentIntent();\r\n-  }, [reservationId, onError]);\r\n+    fetchProfessionnels();\r\n+  }, []);\r\n \r\n-  const handleSubmit = async (event) => {\r\n-    event.preventDefault();\r\n-    if (!stripe || !elements) return;\r\n+  const fetchDisponibilites = async (proId) => {\r\n+    try {\r\n+      setSelectedPro(null);\r\n+      setDisponibilites([]);\r\n+      setDisponibilitesVisibles(false);\r\n \r\n-    setLoading(true);\r\n-    const cardElement = elements.getElement(CardElement);\r\n-\r\n-    try {\r\n-      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n-        payment_method: {\r\n-          card: cardElement,\r\n-        },\r\n+      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n+        withCredentials: true,\r\n       });\r\n \r\n-      if (error) {\r\n-        onError(error.message);\r\n-        setLoading(false);\r\n-      } else if (paymentIntent.status === 'succeeded') {\r\n-        onSuccess('Paiement Stripe réussi');\r\n-        setLoading(false);\r\n+      setDisponibilites(res.data);\r\n+      const pro = professionnels.find(p => p.id === proId) || null;\r\n+      setSelectedPro(pro);\r\n+      setDisponibilitesVisibles(true);\r\n+    } catch (err) {\r\n+      console.error(err);\r\n+      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n+    }\r\n+  };\r\n+\r\n+  const genererSousCreneaux = (dispo) => {\r\n+    const sousCreneaux = [];\r\n+\r\n+    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n+    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n+\r\n+    const dateDispo = new Date(dispo.date);\r\n+    const debut = new Date(dateDispo);\r\n+    debut.setHours(hStart, mStart, 0, 0);\r\n+\r\n+    const fin = new Date(dateDispo);\r\n+    fin.setHours(hEnd, mEnd, 0, 0);\r\n+\r\n+    const maintenant = new Date();\r\n+    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n+\r\n+    const heuresReservees = dispo.reservations?.map(r => r.heureConsultation?.substring(0, 5)) || [];\r\n+\r\n+    while (debut.getTime() + duree <= fin.getTime()) {\r\n+      const heureStr = debut.toTimeString().slice(0, 5);\r\n+      const creneauDateTime = new Date(debut);\r\n+\r\n+      if (!heuresReservees.includes(heureStr) && creneauDateTime > maintenant) {\r\n+        sousCreneaux.push(heureStr);\r\n       }\r\n-    } catch (e) {\r\n-      onError('Erreur lors du paiement Stripe');\r\n-      setLoading(false);\r\n+\r\n+      debut.setTime(debut.getTime() + duree);\r\n     }\r\n+\r\n+    return sousCreneaux;\r\n   };\r\n \r\n-  if (!clientSecret) return <p>Chargement du paiement Stripe...</p>;\r\n+  const reserverCreneau = async (dispo, heureConsultation) => {\r\n+    if (!dispo?.id) {\r\n+      toast.error(\"ID de la disponibilité introuvable.\");\r\n+      return;\r\n+    }\r\n \r\n-  return (\r\n-    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n-      <CardElement\r\n-        options={{\r\n-          style: {\r\n-            base: {\r\n-              fontSize: '16px',\r\n-              color: '#32325d',\r\n-              '::placeholder': { color: '#a0aec0' },\r\n-            },\r\n-            invalid: { color: '#fa755a' },\r\n-          },\r\n-        }}\r\n-      />\r\n-      <button\r\n-        type=\"submit\"\r\n-        disabled={!stripe || loading}\r\n-        className=\"px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50\"\r\n-      >\r\n-        {loading ? 'Paiement en cours...' : 'Payer avec Stripe'}\r\n-      </button>\r\n-    </form>\r\n-  );\r\n-};\r\n+    const heureFormatee = `${heureConsultation}:00`;\r\n \r\n-// Composant principal PaymentForm\r\n-const PaymentForm = ({ reservationId, onClose }) => {\r\n-  const [message, setMessage] = useState(null);\r\n-  const [paymentMethod, setPaymentMethod] = useState('stripe'); // 'stripe' ou 'paypal'\r\n+    const reservation = {\r\n+      disponibilite: { id: dispo.id },\r\n+      heureReservation: heureFormatee,\r\n+      heureConsultation: heureFormatee,\r\n+    };\r\n \r\n-  // Gestion des succès et erreurs pour affichage\r\n-  const handleSuccess = (msg) => {\r\n-    setMessage({ type: 'success', text: msg });\r\n+    try {\r\n+      const res = await axios.post('/api/reservations', reservation, { withCredentials: true });\r\n+      toast.success('Réservation enregistrée !');\r\n+\r\n+      // On récupère l'ID de la réservation créée pour lancer le paiement\r\n+      const reservationCreee = res.data;\r\n+      setReservationIdPourPaiement(reservationCreee.id);\r\n+\r\n+      if (selectedPro) {\r\n+        fetchDisponibilites(selectedPro.id);\r\n+      }\r\n+    } catch (error) {\r\n+      if (error.response) {\r\n+        console.error('Erreur serveur:', error.response.data);\r\n+        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n+      } else {\r\n+        console.error('Erreur axios:', error.message);\r\n+        toast.error('Erreur réseau');\r\n+      }\r\n+    }\r\n   };\r\n-  const handleError = (msg) => {\r\n-    setMessage({ type: 'error', text: msg });\r\n-  };\r\n \r\n   return (\r\n-    <div\r\n-      className=\"bg-white rounded p-6 w-full max-w-md shadow-lg relative\"\r\n-      role=\"dialog\"\r\n-      aria-modal=\"true\"\r\n-    >\r\n-      <button\r\n-        onClick={onClose}\r\n-        className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\r\n-        aria-label=\"Fermer le formulaire de paiement\"\r\n-      >\r\n-        ✕\r\n-      </button>\r\n+    <>\r\n+      <Header />\r\n+      <ToastContainer position=\"top-right\" />\r\n+      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n+        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n \r\n-      <h2 className=\"text-xl font-bold mb-4 text-center\">Paiement de la réservation #{reservationId}</h2>\r\n+        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n \r\n-      <div className=\"mb-4 flex justify-center gap-4\">\r\n-        <button\r\n-          onClick={() => {\r\n-            setPaymentMethod('stripe');\r\n-            setMessage(null);\r\n-          }}\r\n-          className={`px-4 py-2 rounded ${\r\n-            paymentMethod === 'stripe' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n-          }`}\r\n-        >\r\n-          Stripe\r\n-        </button>\r\n-        <button\r\n-          onClick={() => {\r\n-            setPaymentMethod('paypal');\r\n-            setMessage(null);\r\n-          }}\r\n-          className={`px-4 py-2 rounded ${\r\n-            paymentMethod === 'paypal' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n-          }`}\r\n-        >\r\n-          PayPal\r\n-        </button>\r\n-      </div>\r\n+        <ul className=\"space-y-4\">\r\n+          {professionnels.map((pro) => (\r\n+            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n+              <div>\r\n+                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n+                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n+              </div>\r\n+              <button\r\n+                onClick={() => fetchDisponibilites(pro.id)}\r\n+                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n+              >\r\n+                Voir Disponibilités\r\n+              </button>\r\n+            </li>\r\n+          ))}\r\n+        </ul>\r\n \r\n-      {message && (\r\n-        <p\r\n-          className={`mb-4 text-center ${\r\n-            message.type === 'success' ? 'text-green-600' : 'text-red-600'\r\n-          }`}\r\n-        >\r\n-          {message.text}\r\n-        </p>\r\n-      )}\r\n+        {disponibilitesVisibles && selectedPro && (\r\n+          <div className=\"mt-10\">\r\n+            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n+              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n+            </h3>\r\n \r\n-      {paymentMethod === 'stripe' && (\r\n-        <Elements stripe={stripePromise}>\r\n-          <CheckoutForm\r\n-            reservationId={reservationId}\r\n-            onSuccess={handleSuccess}\r\n-            onError={handleError}\r\n-          />\r\n-        </Elements>\r\n-      )}\r\n+            {disponibilites.length === 0 ? (\r\n+              <p className=\"text-gray-600 text-center\">\r\n+                Aucune disponibilité trouvée pour ce professionnel.\r\n+              </p>\r\n+            ) : (\r\n+              <ul className=\"space-y-4\">\r\n+                <AnimatePresence>\r\n+                  {disponibilites.map((dispo, idx) => {\r\n+                    const sousCreneaux = genererSousCreneaux(dispo);\r\n+                    if (sousCreneaux.length === 0) return null;\r\n \r\n-      {paymentMethod === 'paypal' && (\r\n-        <PayPalScriptProvider\r\n-          options={{\r\n-            'client-id': 'sb', // 'sb' pour sandbox, remplace par ta clé PayPal en prod\r\n-            currency: 'EUR',\r\n-          }}\r\n-        >\r\n-          <PayPalButtons\r\n-            createOrder={async (_, actions) => {\r\n-              try {\r\n-                const res = await axios.post(\r\n-                  `/api/payment/paypal/create-order`,\r\n-                  { reservationId },\r\n-                  { withCredentials: true }\r\n-                );\r\n-                return res.data.orderID; // backend doit renvoyer orderID PayPal\r\n-              } catch (error) {\r\n-                handleError('Erreur lors de la création de la commande PayPal');\r\n-              }\r\n-            }}\r\n-            onApprove={async (_, actions) => {\r\n-              try {\r\n-                const details = await actions.order.capture();\r\n-                handleSuccess('Paiement PayPal réussi');\r\n-              } catch (error) {\r\n-                handleError('Erreur lors de la capture du paiement PayPal');\r\n-              }\r\n-            }}\r\n-            onError={(err) => handleError(`Erreur PayPal : ${err.toString()}`)}\r\n-            style={{ layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' }}\r\n-          />\r\n-        </PayPalScriptProvider>\r\n-      )}\r\n-    </div>\r\n+                    return (\r\n+                      <motion.li\r\n+                        key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n+                        initial={{ opacity: 0, y: 10 }}\r\n+                        animate={{ opacity: 1, y: 0 }}\r\n+                        exit={{ opacity: 0, y: -10 }}\r\n+                        transition={{ duration: 0.3 }}\r\n+                        className=\"border p-4 rounded-md shadow-md\"\r\n+                      >\r\n+                        <p className=\"font-medium mb-2\">\r\n+                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n+                          {new Date(dispo.date).toLocaleDateString()}\r\n+                        </p>\r\n+                        <p className=\"text-sm text-gray-700 mb-2\">\r\n+                          <Clock size={16} className=\"inline-block mr-1\" />\r\n+                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n+                        </p>\r\n+\r\n+                        <div className=\"flex flex-wrap gap-2\">\r\n+                          {sousCreneaux.map((heure, i) => (\r\n+                            <button\r\n+                              key={i}\r\n+                              onClick={() => reserverCreneau(dispo, heure)}\r\n+                              className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n+                            >\r\n+                              Réserver à {heure}\r\n+                            </button>\r\n+                          ))}\r\n+                        </div>\r\n+                      </motion.li>\r\n+                    );\r\n+                  })}\r\n+                </AnimatePresence>\r\n+              </ul>\r\n+            )}\r\n+          </div>\r\n+        )}\r\n+\r\n+        {/* Modal de paiement */}\r\n+        {reservationIdPourPaiement && (\r\n+          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\r\n+            <PaymentForm\r\n+              reservationId={reservationIdPourPaiement}\r\n+              onClose={() => setReservationIdPourPaiement(null)}\r\n+            />\r\n+          </div>\r\n+        )}\r\n+      </main>\r\n+      <PiedPage />\r\n+    </>\r\n   );\r\n };\r\n \r\n-PaymentForm.propTypes = {\r\n-  reservationId: PropTypes.number.isRequired,\r\n-  onClose: PropTypes.func.isRequired,\r\n-};\r\n-\r\n-export default PaymentForm;\r\n+export default ListeProfessionnels;\r\n"
                },
                {
                    "date": 1750274001647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,220 +1,213 @@\n import React, { useEffect, useState } from 'react';\r\n+import PropTypes from 'prop-types';\r\n+\r\n+import { loadStripe } from '@stripe/stripe-js';\r\n+import {\r\n+  Elements,\r\n+  CardElement,\r\n+  useStripe,\r\n+  useElements,\r\n+} from '@stripe/react-stripe-js';\r\n+\r\n+import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\r\n+\r\n import axios from 'axios';\r\n-import { CalendarCheck, Clock } from 'lucide-react';\r\n-import { toast, ToastContainer } from 'react-toastify';\r\n-import { motion, AnimatePresence } from 'framer-motion';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n \r\n-import PiedPage from './commun/PiedPage';\r\n-import Header from './commun/header';\r\n-import PaymentForm from './components/PaymentForm'; // Assure-toi que le chemin est correct\r\n+const stripePromise = loadStripe('pk_test_TA_CLE_PUBLIQUE_STRIPE'); // Remplace par ta clé publique Stripe\r\n \r\n-const DUREE_CONSULTATION_MINUTES = 45;\r\n+// Composant interne Stripe Checkout\r\n+const CheckoutForm = ({ reservationId, onSuccess, onError }) => {\r\n+  const stripe = useStripe();\r\n+  const elements = useElements();\r\n \r\n-const ListeProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [selectedPro, setSelectedPro] = useState(null);\r\n-  const [disponibilites, setDisponibilites] = useState([]);\r\n-  const [disponibilitesVisibles, setDisponibilitesVisibles] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [reservationIdPourPaiement, setReservationIdPourPaiement] = useState(null);\r\n+  const [clientSecret, setClientSecret] = useState(null);\r\n+  const [loading, setLoading] = useState(false);\r\n \r\n   useEffect(() => {\r\n-    const fetchProfessionnels = async () => {\r\n+    // Créer le PaymentIntent backend pour cette réservation\r\n+    const createPaymentIntent = async () => {\r\n       try {\r\n-        const res = await axios.get('/api/professionnels/tous', { withCredentials: true });\r\n-        setProfessionnels(res.data);\r\n-        setError('');\r\n-      } catch (err) {\r\n-        console.error(err);\r\n-        setError(\"Impossible de charger les professionnels.\");\r\n+        const res = await axios.post(\r\n+          `/api/payment/stripe/create-payment-intent`,\r\n+          { reservationId },\r\n+          { withCredentials: true }\r\n+        );\r\n+        setClientSecret(res.data.clientSecret);\r\n+      } catch (error) {\r\n+        onError('Erreur lors de la création du paiement Stripe');\r\n       }\r\n     };\r\n-    fetchProfessionnels();\r\n-  }, []);\r\n+    createPaymentIntent();\r\n+  }, [reservationId, onError]);\r\n \r\n-  const fetchDisponibilites = async (proId) => {\r\n+  const handleSubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    if (!stripe || !elements) return;\r\n+\r\n+    setLoading(true);\r\n+    const cardElement = elements.getElement(CardElement);\r\n+\r\n     try {\r\n-      setSelectedPro(null);\r\n-      setDisponibilites([]);\r\n-      setDisponibilitesVisibles(false);\r\n-\r\n-      const res = await axios.get(`/api/disponibilites/${proId}`, {\r\n-        withCredentials: true,\r\n+      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n+        payment_method: {\r\n+          card: cardElement,\r\n+        },\r\n       });\r\n \r\n-      setDisponibilites(res.data);\r\n-      const pro = professionnels.find(p => p.id === proId) || null;\r\n-      setSelectedPro(pro);\r\n-      setDisponibilitesVisibles(true);\r\n-    } catch (err) {\r\n-      console.error(err);\r\n-      toast.error(\"Erreur lors du chargement des disponibilités.\");\r\n-    }\r\n-  };\r\n-\r\n-  const genererSousCreneaux = (dispo) => {\r\n-    const sousCreneaux = [];\r\n-\r\n-    const [hStart, mStart] = dispo.heureDebut.split(':').map(Number);\r\n-    const [hEnd, mEnd] = dispo.heureFin.split(':').map(Number);\r\n-\r\n-    const dateDispo = new Date(dispo.date);\r\n-    const debut = new Date(dateDispo);\r\n-    debut.setHours(hStart, mStart, 0, 0);\r\n-\r\n-    const fin = new Date(dateDispo);\r\n-    fin.setHours(hEnd, mEnd, 0, 0);\r\n-\r\n-    const maintenant = new Date();\r\n-    const duree = DUREE_CONSULTATION_MINUTES * 60 * 1000;\r\n-\r\n-    const heuresReservees = dispo.reservations?.map(r => r.heureConsultation?.substring(0, 5)) || [];\r\n-\r\n-    while (debut.getTime() + duree <= fin.getTime()) {\r\n-      const heureStr = debut.toTimeString().slice(0, 5);\r\n-      const creneauDateTime = new Date(debut);\r\n-\r\n-      if (!heuresReservees.includes(heureStr) && creneauDateTime > maintenant) {\r\n-        sousCreneaux.push(heureStr);\r\n+      if (error) {\r\n+        onError(error.message);\r\n+        setLoading(false);\r\n+      } else if (paymentIntent.status === 'succeeded') {\r\n+        onSuccess('Paiement Stripe réussi');\r\n+        setLoading(false);\r\n       }\r\n-\r\n-      debut.setTime(debut.getTime() + duree);\r\n+    } catch (e) {\r\n+      onError('Erreur lors du paiement Stripe');\r\n+      setLoading(false);\r\n     }\r\n-\r\n-    return sousCreneaux;\r\n   };\r\n \r\n-  const reserverCreneau = async (dispo, heureConsultation) => {\r\n-    if (!dispo?.id) {\r\n-      toast.error(\"ID de la disponibilité introuvable.\");\r\n-      return;\r\n-    }\r\n+  if (!clientSecret) return <p>Chargement du paiement Stripe...</p>;\r\n \r\n-    const heureFormatee = `${heureConsultation}:00`;\r\n+  return (\r\n+    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+      <CardElement\r\n+        options={{\r\n+          style: {\r\n+            base: {\r\n+              fontSize: '16px',\r\n+              color: '#32325d',\r\n+              '::placeholder': { color: '#a0aec0' },\r\n+            },\r\n+            invalid: { color: '#fa755a' },\r\n+          },\r\n+        }}\r\n+      />\r\n+      <button\r\n+        type=\"submit\"\r\n+        disabled={!stripe || loading}\r\n+        className=\"px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50\"\r\n+      >\r\n+        {loading ? 'Paiement en cours...' : 'Payer avec Stripe'}\r\n+      </button>\r\n+    </form>\r\n+  );\r\n+};\r\n \r\n-    const reservation = {\r\n-      disponibilite: { id: dispo.id },\r\n-      heureReservation: heureFormatee,\r\n-      heureConsultation: heureFormatee,\r\n-    };\r\n+// Composant principal PaymentForm\r\n+const PaymentForm = ({ reservationId, onClose }) => {\r\n+  const [message, setMessage] = useState(null);\r\n+  const [paymentMethod, setPaymentMethod] = useState('stripe'); // 'stripe' ou 'paypal'\r\n \r\n-    try {\r\n-      const res = await axios.post('/api/reservations', reservation, { withCredentials: true });\r\n-      toast.success('Réservation enregistrée !');\r\n-\r\n-      // On récupère l'ID de la réservation créée pour lancer le paiement\r\n-      const reservationCreee = res.data;\r\n-      setReservationIdPourPaiement(reservationCreee.id);\r\n-\r\n-      if (selectedPro) {\r\n-        fetchDisponibilites(selectedPro.id);\r\n-      }\r\n-    } catch (error) {\r\n-      if (error.response) {\r\n-        console.error('Erreur serveur:', error.response.data);\r\n-        toast.error(`Erreur : ${error.response.data.message || 'Réservation échouée'}`);\r\n-      } else {\r\n-        console.error('Erreur axios:', error.message);\r\n-        toast.error('Erreur réseau');\r\n-      }\r\n-    }\r\n+  // Gestion des succès et erreurs pour affichage\r\n+  const handleSuccess = (msg) => {\r\n+    setMessage({ type: 'success', text: msg });\r\n   };\r\n+  const handleError = (msg) => {\r\n+    setMessage({ type: 'error', text: msg });\r\n+  };\r\n \r\n   return (\r\n-    <>\r\n-      <Header />\r\n-      <ToastContainer position=\"top-right\" />\r\n-      <main className=\"max-w-5xl mx-auto px-4 py-8 min-h-[80vh]\">\r\n-        <h2 className=\"text-3xl font-bold text-center mb-6\">Liste des professionnels</h2>\r\n+    <div\r\n+      className=\"bg-white rounded p-6 w-full max-w-md shadow-lg relative\"\r\n+      role=\"dialog\"\r\n+      aria-modal=\"true\"\r\n+    >\r\n+      <button\r\n+        onClick={onClose}\r\n+        className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\r\n+        aria-label=\"Fermer le formulaire de paiement\"\r\n+      >\r\n+        ✕\r\n+      </button>\r\n \r\n-        {error && <p className=\"text-red-600 text-center mb-4\">{error}</p>}\r\n+      <h2 className=\"text-xl font-bold mb-4 text-center\">Paiement de la réservation #{reservationId}</h2>\r\n \r\n-        <ul className=\"space-y-4\">\r\n-          {professionnels.map((pro) => (\r\n-            <li key={pro.id} className=\"border p-4 rounded-md shadow-sm flex justify-between items-center\">\r\n-              <div>\r\n-                <p className=\"text-xl font-semibold\">{pro.prenom} {pro.nom}</p>\r\n-                <p className=\"text-gray-600\">Spécialité : {pro.specialite}</p>\r\n-              </div>\r\n-              <button\r\n-                onClick={() => fetchDisponibilites(pro.id)}\r\n-                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\r\n-              >\r\n-                Voir Disponibilités\r\n-              </button>\r\n-            </li>\r\n-          ))}\r\n-        </ul>\r\n+      <div className=\"mb-4 flex justify-center gap-4\">\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('stripe');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'stripe' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          Stripe\r\n+        </button>\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('paypal');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'paypal' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          PayPal\r\n+        </button>\r\n+      </div>\r\n \r\n-        {disponibilitesVisibles && selectedPro && (\r\n-          <div className=\"mt-10\">\r\n-            <h3 className=\"text-2xl font-bold mb-4 text-center\">\r\n-              Créneaux disponibles pour {selectedPro.prenom} {selectedPro.nom}\r\n-            </h3>\r\n+      {message && (\r\n+        <p\r\n+          className={`mb-4 text-center ${\r\n+            message.type === 'success' ? 'text-green-600' : 'text-red-600'\r\n+          }`}\r\n+        >\r\n+          {message.text}\r\n+        </p>\r\n+      )}\r\n \r\n-            {disponibilites.length === 0 ? (\r\n-              <p className=\"text-gray-600 text-center\">\r\n-                Aucune disponibilité trouvée pour ce professionnel.\r\n-              </p>\r\n-            ) : (\r\n-              <ul className=\"space-y-4\">\r\n-                <AnimatePresence>\r\n-                  {disponibilites.map((dispo, idx) => {\r\n-                    const sousCreneaux = genererSousCreneaux(dispo);\r\n-                    if (sousCreneaux.length === 0) return null;\r\n+      {paymentMethod === 'stripe' && (\r\n+        <Elements stripe={stripePromise}>\r\n+          <CheckoutForm\r\n+            reservationId={reservationId}\r\n+            onSuccess={handleSuccess}\r\n+            onError={handleError}\r\n+          />\r\n+        </Elements>\r\n+      )}\r\n \r\n-                    return (\r\n-                      <motion.li\r\n-                        key={`${dispo.date}-${dispo.heureDebut}-${idx}`}\r\n-                        initial={{ opacity: 0, y: 10 }}\r\n-                        animate={{ opacity: 1, y: 0 }}\r\n-                        exit={{ opacity: 0, y: -10 }}\r\n-                        transition={{ duration: 0.3 }}\r\n-                        className=\"border p-4 rounded-md shadow-md\"\r\n-                      >\r\n-                        <p className=\"font-medium mb-2\">\r\n-                          <CalendarCheck size={16} className=\"inline-block mr-1\" />\r\n-                          {new Date(dispo.date).toLocaleDateString()}\r\n-                        </p>\r\n-                        <p className=\"text-sm text-gray-700 mb-2\">\r\n-                          <Clock size={16} className=\"inline-block mr-1\" />\r\n-                          {dispo.heureDebut?.substring(0, 5)} - {dispo.heureFin?.substring(0, 5)}\r\n-                        </p>\r\n-\r\n-                        <div className=\"flex flex-wrap gap-2\">\r\n-                          {sousCreneaux.map((heure, i) => (\r\n-                            <button\r\n-                              key={i}\r\n-                              onClick={() => reserverCreneau(dispo, heure)}\r\n-                              className=\"px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-sm\"\r\n-                            >\r\n-                              Réserver à {heure}\r\n-                            </button>\r\n-                          ))}\r\n-                        </div>\r\n-                      </motion.li>\r\n-                    );\r\n-                  })}\r\n-                </AnimatePresence>\r\n-              </ul>\r\n-            )}\r\n-          </div>\r\n-        )}\r\n-\r\n-        {/* Modal de paiement */}\r\n-        {reservationIdPourPaiement && (\r\n-          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\r\n-            <PaymentForm\r\n-              reservationId={reservationIdPourPaiement}\r\n-              onClose={() => setReservationIdPourPaiement(null)}\r\n-            />\r\n-          </div>\r\n-        )}\r\n-      </main>\r\n-      <PiedPage />\r\n-    </>\r\n+      {paymentMethod === 'paypal' && (\r\n+        <PayPalScriptProvider\r\n+          options={{\r\n+            'client-id': 'sb', // 'sb' pour sandbox, remplace par ta clé PayPal en prod\r\n+            currency: 'EUR',\r\n+          }}\r\n+        >\r\n+          <PayPalButtons\r\n+            createOrder={async (_, actions) => {\r\n+              try {\r\n+                const res = await axios.post(\r\n+                  `/api/payment/paypal/create-order`,\r\n+                  { reservationId },\r\n+                  { withCredentials: true }\r\n+                );\r\n+                return res.data.orderID; // backend doit renvoyer orderID PayPal\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la création de la commande PayPal');\r\n+              }\r\n+            }}\r\n+            onApprove={async (_, actions) => {\r\n+              try {\r\n+                const details = await actions.order.capture();\r\n+                handleSuccess('Paiement PayPal réussi');\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la capture du paiement PayPal');\r\n+              }\r\n+            }}\r\n+            onError={(err) => handleError(`Erreur PayPal : ${err.toString()}`)}\r\n+            style={{ layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' }}\r\n+          />\r\n+        </PayPalScriptProvider>\r\n+      )}\r\n+    </div>\r\n   );\r\n };\r\n \r\n-export default ListeProfessionnels;\r\n+PaymentForm.propTypes = {\r\n+  reservationId: PropTypes.number.isRequired,\r\n+  onClose: PropTypes.func.isRequired,\r\n+};\r\n+\r\n+export default PaymentForm;\r\n"
                },
                {
                    "date": 1750274023939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import React, { useEffect, useState } from 'react';\r\n+import PropTypes from 'prop-types';\r\n+\r\n+import { loadStripe } from '@stripe/stripe-js';\r\n+import {\r\n+  Elements,\r\n+  CardElement,\r\n+  useStripe,\r\n+  useElements,\r\n+} from '@stripe/react-stripe-js';\r\n+\r\n+import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\r\n+\r\n+import axios from 'axios';\r\n+\r\n+const stripePromise = loadStripe('pk_test_TA_CLE_PUBLIQUE_STRIPE');  \r\n+\r\n+// Composant interne Stripe Checkout\r\n+const CheckoutForm = ({ reservationId, onSuccess, onError }) => {\r\n+  const stripe = useStripe();\r\n+  const elements = useElements();\r\n+\r\n+  const [clientSecret, setClientSecret] = useState(null);\r\n+  const [loading, setLoading] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    // Créer le PaymentIntent backend pour cette réservation\r\n+    const createPaymentIntent = async () => {\r\n+      try {\r\n+        const res = await axios.post(\r\n+          `/api/payment/stripe/create-payment-intent`,\r\n+          { reservationId },\r\n+          { withCredentials: true }\r\n+        );\r\n+        setClientSecret(res.data.clientSecret);\r\n+      } catch (error) {\r\n+        onError('Erreur lors de la création du paiement Stripe');\r\n+      }\r\n+    };\r\n+    createPaymentIntent();\r\n+  }, [reservationId, onError]);\r\n+\r\n+  const handleSubmit = async (event) => {\r\n+    event.preventDefault();\r\n+    if (!stripe || !elements) return;\r\n+\r\n+    setLoading(true);\r\n+    const cardElement = elements.getElement(CardElement);\r\n+\r\n+    try {\r\n+      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n+        payment_method: {\r\n+          card: cardElement,\r\n+        },\r\n+      });\r\n+\r\n+      if (error) {\r\n+        onError(error.message);\r\n+        setLoading(false);\r\n+      } else if (paymentIntent.status === 'succeeded') {\r\n+        onSuccess('Paiement Stripe réussi');\r\n+        setLoading(false);\r\n+      }\r\n+    } catch (e) {\r\n+      onError('Erreur lors du paiement Stripe');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  if (!clientSecret) return <p>Chargement du paiement Stripe...</p>;\r\n+\r\n+  return (\r\n+    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n+      <CardElement\r\n+        options={{\r\n+          style: {\r\n+            base: {\r\n+              fontSize: '16px',\r\n+              color: '#32325d',\r\n+              '::placeholder': { color: '#a0aec0' },\r\n+            },\r\n+            invalid: { color: '#fa755a' },\r\n+          },\r\n+        }}\r\n+      />\r\n+      <button\r\n+        type=\"submit\"\r\n+        disabled={!stripe || loading}\r\n+        className=\"px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50\"\r\n+      >\r\n+        {loading ? 'Paiement en cours...' : 'Payer avec Stripe'}\r\n+      </button>\r\n+    </form>\r\n+  );\r\n+};\r\n+\r\n+// Composant principal PaymentForm\r\n+const PaymentForm = ({ reservationId, onClose }) => {\r\n+  const [message, setMessage] = useState(null);\r\n+  const [paymentMethod, setPaymentMethod] = useState('stripe'); // 'stripe' ou 'paypal'\r\n+\r\n+  // Gestion des succès et erreurs pour affichage\r\n+  const handleSuccess = (msg) => {\r\n+    setMessage({ type: 'success', text: msg });\r\n+  };\r\n+  const handleError = (msg) => {\r\n+    setMessage({ type: 'error', text: msg });\r\n+  };\r\n+\r\n+  return (\r\n+    <div\r\n+      className=\"bg-white rounded p-6 w-full max-w-md shadow-lg relative\"\r\n+      role=\"dialog\"\r\n+      aria-modal=\"true\"\r\n+    >\r\n+      <button\r\n+        onClick={onClose}\r\n+        className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\r\n+        aria-label=\"Fermer le formulaire de paiement\"\r\n+      >\r\n+        ✕\r\n+      </button>\r\n+\r\n+      <h2 className=\"text-xl font-bold mb-4 text-center\">Paiement de la réservation #{reservationId}</h2>\r\n+\r\n+      <div className=\"mb-4 flex justify-center gap-4\">\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('stripe');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'stripe' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          Stripe\r\n+        </button>\r\n+        <button\r\n+          onClick={() => {\r\n+            setPaymentMethod('paypal');\r\n+            setMessage(null);\r\n+          }}\r\n+          className={`px-4 py-2 rounded ${\r\n+            paymentMethod === 'paypal' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n+          }`}\r\n+        >\r\n+          PayPal\r\n+        </button>\r\n+      </div>\r\n+\r\n+      {message && (\r\n+        <p\r\n+          className={`mb-4 text-center ${\r\n+            message.type === 'success' ? 'text-green-600' : 'text-red-600'\r\n+          }`}\r\n+        >\r\n+          {message.text}\r\n+        </p>\r\n+      )}\r\n+\r\n+      {paymentMethod === 'stripe' && (\r\n+        <Elements stripe={stripePromise}>\r\n+          <CheckoutForm\r\n+            reservationId={reservationId}\r\n+            onSuccess={handleSuccess}\r\n+            onError={handleError}\r\n+          />\r\n+        </Elements>\r\n+      )}\r\n+\r\n+      {paymentMethod === 'paypal' && (\r\n+        <PayPalScriptProvider\r\n+          options={{\r\n+            'client-id': 'sb', // 'sb' pour sandbox, remplace par ta clé PayPal en prod\r\n+            currency: 'EUR',\r\n+          }}\r\n+        >\r\n+          <PayPalButtons\r\n+            createOrder={async (_, actions) => {\r\n+              try {\r\n+                const res = await axios.post(\r\n+                  `/api/payment/paypal/create-order`,\r\n+                  { reservationId },\r\n+                  { withCredentials: true }\r\n+                );\r\n+                return res.data.orderID; // backend doit renvoyer orderID PayPal\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la création de la commande PayPal');\r\n+              }\r\n+            }}\r\n+            onApprove={async (_, actions) => {\r\n+              try {\r\n+                const details = await actions.order.capture();\r\n+                handleSuccess('Paiement PayPal réussi');\r\n+              } catch (error) {\r\n+                handleError('Erreur lors de la capture du paiement PayPal');\r\n+              }\r\n+            }}\r\n+            onError={(err) => handleError(`Erreur PayPal : ${err.toString()}`)}\r\n+            style={{ layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' }}\r\n+          />\r\n+        </PayPalScriptProvider>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+PaymentForm.propTypes = {\r\n+  reservationId: PropTypes.number.isRequired,\r\n+  onClose: PropTypes.func.isRequired,\r\n+};\r\n+\r\n+export default PaymentForm;\r\n"
                },
                {
                    "date": 1750276934340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,5 +205,9 @@\n   );\r\n };\r\n \r\n PaymentForm.propTypes = {\r\n-  reservationId: PropTypes.number.isRequired\n\\ No newline at end of file\n+  reservationId: PropTypes.number.isRequired,\r\n+  onClose: PropTypes.func.isRequired,\r\n+};\r\n+\r\n+export default PaymentForm;\r\n"
                },
                {
                    "date": 1750277315605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,210 +1,6 @@\n-import React, { useEffect, useState } from 'react';\r\n-import PropTypes from 'prop-types';\r\n-\r\n-import { loadStripe } from '@stripe/stripe-js';\r\n-import {\r\n-  Elements,\r\n-  CardElement,\r\n-  useStripe,\r\n-  useElements,\r\n-} from '@stripe/react-stripe-js';\r\n-\r\n-import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';\r\n-\r\n-import axios from 'axios';\r\n-\r\n-const stripePromise = loadStripe('pk_test_51RXnftAc9vHWOsmYRgXSBdNEne7MxfObedkDBDRtA7l5G2zZM0sfMPfhHmCtWqeNIM81YSEyREpIPVDg76hE201t002UNapsv0');  \r\n-\r\n-const CheckoutForm = ({ reservationId, onSuccess, onError }) => {\r\n-  const stripe = useStripe();\r\n-  const elements = useElements();\r\n-\r\n-  const [clientSecret, setClientSecret] = useState(null);\r\n-  const [loading, setLoading] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const createPaymentIntent = async () => {\r\n-      try {\r\n-        const res = await axios.post(\r\n-          `/api/payment/stripe/create-payment-intent`,\r\n-          { reservationId },\r\n-          { withCredentials: true }\r\n-        );\r\n-        setClientSecret(res.data.clientSecret);\r\n-      } catch (error) {\r\n-        onError('Erreur lors de la création du paiement Stripe');\r\n-      }\r\n-    };\r\n-    createPaymentIntent();\r\n-  }, [reservationId, onError]);\r\n-\r\n-  const handleSubmit = async (event) => {\r\n-    event.preventDefault();\r\n-    if (!stripe || !elements) return;\r\n-\r\n-    setLoading(true);\r\n-    const cardElement = elements.getElement(CardElement);\r\n-\r\n-    try {\r\n-      const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\r\n-        payment_method: {\r\n-          card: cardElement,\r\n-        },\r\n-      });\r\n-\r\n-      if (error) {\r\n-        onError(error.message);\r\n-        setLoading(false);\r\n-      } else if (paymentIntent.status === 'succeeded') {\r\n-        onSuccess('Paiement Stripe réussi');\r\n-        setLoading(false);\r\n-      }\r\n-    } catch (e) {\r\n-      onError('Erreur lors du paiement Stripe');\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  // Ici, on n'affiche rien si clientSecret pas prêt (plus d'affichage \"chargement\")\r\n-  if (!clientSecret) return null;\r\n-\r\n-  return (\r\n-    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n-      <CardElement\r\n-        options={{\r\n-          style: {\r\n-            base: {\r\n-              fontSize: '16px',\r\n-              color: '#32325d',\r\n-              '::placeholder': { color: '#a0aec0' },\r\n-            },\r\n-            invalid: { color: '#fa755a' },\r\n-          },\r\n-        }}\r\n-      />\r\n-      <button\r\n-        type=\"submit\"\r\n-        disabled={!stripe || loading}\r\n-        className=\"px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50\"\r\n-      >\r\n-        {loading ? 'Paiement en cours...' : 'Payer avec Stripe'}\r\n-      </button>\r\n-    </form>\r\n-  );\r\n-};\r\n-\r\n-const PaymentForm = ({ reservationId, onClose }) => {\r\n-  const [message, setMessage] = useState(null);\r\n-  const [paymentMethod, setPaymentMethod] = useState('stripe');\r\n-\r\n-  const handleSuccess = (msg) => {\r\n-    setMessage({ type: 'success', text: msg });\r\n-  };\r\n-  const handleError = (msg) => {\r\n-    setMessage({ type: 'error', text: msg });\r\n-  };\r\n-\r\n-  return (\r\n-    <div\r\n-      className=\"bg-white rounded p-6 w-full max-w-md shadow-lg relative\"\r\n-      role=\"dialog\"\r\n-      aria-modal=\"true\"\r\n-    >\r\n-      <button\r\n-        onClick={onClose}\r\n-        className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\r\n-        aria-label=\"Fermer le formulaire de paiement\"\r\n-      >\r\n-        ✕\r\n-      </button>\r\n-\r\n-      <h2 className=\"text-xl font-bold mb-4 text-center\">Paiement de la réservation #{reservationId}</h2>\r\n-\r\n-      <div className=\"mb-4 flex justify-center gap-4\">\r\n-        <button\r\n-          onClick={() => {\r\n-            setPaymentMethod('stripe');\r\n-            setMessage(null);\r\n-          }}\r\n-          className={`px-4 py-2 rounded ${\r\n-            paymentMethod === 'stripe' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n-          }`}\r\n-        >\r\n-          Stripe\r\n-        </button>\r\n-        <button\r\n-          onClick={() => {\r\n-            setPaymentMethod('paypal');\r\n-            setMessage(null);\r\n-          }}\r\n-          className={`px-4 py-2 rounded ${\r\n-            paymentMethod === 'paypal' ? 'bg-blue-600 text-white' : 'bg-gray-200'\r\n-          }`}\r\n-        >\r\n-          PayPal\r\n-        </button>\r\n-      </div>\r\n-\r\n-      {message && (\r\n-        <p\r\n-          className={`mb-4 text-center ${\r\n-            message.type === 'success' ? 'text-green-600' : 'text-red-600'\r\n-          }`}\r\n-        >\r\n-          {message.text}\r\n-        </p>\r\n-      )}\r\n-\r\n-      {paymentMethod === 'stripe' && (\r\n-        <Elements stripe={stripePromise}>\r\n-          <CheckoutForm\r\n-            reservationId={reservationId}\r\n-            onSuccess={handleSuccess}\r\n-            onError={handleError}\r\n-          />\r\n-        </Elements>\r\n-      )}\r\n-\r\n-      {paymentMethod === 'paypal' && (\r\n-        <PayPalScriptProvider\r\n-          options={{\r\n-            'client-id': 'sb',\r\n-            currency: 'EUR',\r\n-          }}\r\n-        >\r\n-          <PayPalButtons\r\n-            createOrder={async (_, actions) => {\r\n-              try {\r\n-                const res = await axios.post(\r\n-                  `/api/payment/paypal/create-order`,\r\n-                  { reservationId },\r\n-                  { withCredentials: true }\r\n-                );\r\n-                return res.data.orderID;\r\n-              } catch (error) {\r\n-                handleError('Erreur lors de la création de la commande PayPal');\r\n-              }\r\n-            }}\r\n-            onApprove={async (_, actions) => {\r\n-              try {\r\n-                await actions.order.capture();\r\n-                handleSuccess('Paiement PayPal réussi');\r\n-              } catch (error) {\r\n-                handleError('Erreur lors de la capture du paiement PayPal');\r\n-              }\r\n-            }}\r\n-            onError={(err) => handleError(`Erreur PayPal : ${err.toString()}`)}\r\n-            style={{ layout: 'vertical', color: 'blue', shape: 'rect', label: 'paypal' }}\r\n-          />\r\n-        </PayPalScriptProvider>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-PaymentForm.propTypes = {\r\n-  reservationId: PropTypes.number.isRequired,\r\n-  onClose: PropTypes.func.isRequired,\r\n-};\r\n-\r\n-export default PaymentForm;\r\n+app.post('/api/payment/paypal/create-order', async (req, res) => {\r\n+  const { reservationId } = req.body;\r\n+  // créer commande via l’API PayPal, récupérer orderID\r\n+  const orderID = await createPaypalOrder(reservationId);\r\n+  res.json({ orderID });\r\n+});\r\n"
                }
            ],
            "date": 1750273328802,
            "name": "Commit-0",
            "content": "// PaymentForm.jsx\r\nimport React, { useState } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { Elements, CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\r\n\r\nconst stripePromise = loadStripe('pk_test_TA_CLÉ_PUBLIQUE');\r\n\r\nfunction CheckoutForm({ reservationId, onClose }) {\r\n  // ... code complet comme avant ...\r\n\r\n  return (\r\n    <div style={{ maxWidth: 400, margin: 'auto', border: '1px solid #ddd', padding: 20, borderRadius: 8 }}>\r\n      <button onClick={onClose} style={{ float: 'right' }}>X</button>\r\n      {/* le reste du formulaire */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function PaymentForm(props) {\r\n  return (\r\n    <Elements stripe={stripePromise}>\r\n      <CheckoutForm {...props} />\r\n    </Elements>\r\n  );\r\n}\r\n"
        }
    ]
}