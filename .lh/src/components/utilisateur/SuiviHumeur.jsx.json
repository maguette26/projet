{
    "sourceFile": "src/components/utilisateur/SuiviHumeur.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1750883292511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750883333597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,7 @@\n import React, { useEffect, useState } from 'react';\r\n-import {\r\n-  Smile, Meh, Frown, Zap, AlertCircle, Activity,\r\n-  Star, Coffee, TrendingUp, Trash2, Edit2\r\n-} from 'lucide-react';\r\n-import {\r\n-  getSuiviHumeur,\r\n-  ajouterHumeur,\r\n-  modifierHumeur,\r\n-  supprimerHumeur\r\n-} from '../../services/serviceUtilisateur';\r\n-import { motion } from 'framer-motion';\r\n+import { Smile, Meh, Frown, Zap, AlertCircle, Activity, Star, Coffee, TrendingUp, Trash2, Edit2 } from 'lucide-react';\r\n+import { getSuiviHumeur, ajouterHumeur, modifierHumeur, supprimerHumeur } from '../../services/serviceUtilisateur';\r\n \r\n const moodsList = [\r\n   { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n   { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n@@ -26,15 +17,16 @@\n const SuiviHumeur = ({ currentUser }) => {\r\n   const [humeurs, setHumeurs] = useState([]);\r\n   const [selectedMood, setSelectedMood] = useState('');\r\n   const [notes, setNotes] = useState('');\r\n-  const [messageFlash, setMessageFlash] = useState(null);\r\n+  const [messageFlash, setMessageFlash] = useState(null); // message succès/erreur qui disparaît\r\n   const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n   const [modeEdition, setModeEdition] = useState(false);\r\n   const [editionNotes, setEditionNotes] = useState('');\r\n \r\n-  const isUserAuthenticated = !!currentUser?.id;\r\n+  const isUserAuthenticated = !!currentUser && !!currentUser.id;\r\n \r\n+  // Effacer message flash après 3 sec\r\n   useEffect(() => {\r\n     if (messageFlash) {\r\n       const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n       return () => clearTimeout(timer);\r\n@@ -42,46 +34,70 @@\n   }, [messageFlash]);\r\n \r\n   useEffect(() => {\r\n     const chargerHumeurs = async () => {\r\n-      if (!isUserAuthenticated) return;\r\n+      if (!isUserAuthenticated) {\r\n+        setHumeurs([]);\r\n+        setHumeurDuJour(null);\r\n+        return;\r\n+      }\r\n       try {\r\n         const data = await getSuiviHumeur();\r\n         const sorted = data.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n         setHumeurs(sorted);\r\n+\r\n         const today = new Date().toISOString().split('T')[0];\r\n         const humeurToday = sorted.find(h => h.date === today);\r\n         if (humeurToday) {\r\n           setHumeurDuJour(humeurToday);\r\n           setEditionNotes(humeurToday.noteJournal || '');\r\n+        } else {\r\n+          setHumeurDuJour(null);\r\n+          setEditionNotes('');\r\n         }\r\n-      } catch {\r\n+      } catch (err) {\r\n         setMessageFlash({ type: 'error', text: \"Impossible de charger l'historique des humeurs.\" });\r\n       }\r\n     };\r\n     chargerHumeurs();\r\n   }, [isUserAuthenticated]);\r\n \r\n   const handleEnregistrer = async (e) => {\r\n     e.preventDefault();\r\n-    if (!selectedMood) return setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n+    setMessageFlash(null);\r\n+\r\n+    if (!selectedMood) {\r\n+      setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n+      return;\r\n+    }\r\n+    if (!isUserAuthenticated) {\r\n+      setMessageFlash({ type: 'error', text: \"Vous devez être connecté pour enregistrer votre humeur.\" });\r\n+      return;\r\n+    }\r\n+\r\n+    const humeurDataToSend = {\r\n+      date: new Date().toISOString().split('T')[0],\r\n+      etat: selectedMood,\r\n+      noteJournal: notes.trim(),\r\n+    };\r\n+\r\n     try {\r\n-      const added = await ajouterHumeur({\r\n-        date: new Date().toISOString().split('T')[0],\r\n-        etat: selectedMood,\r\n-        noteJournal: notes.trim(),\r\n-      });\r\n+      const added = await ajouterHumeur(humeurDataToSend);\r\n       setHumeurs(prev => [added, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date)));\r\n       setHumeurDuJour(added);\r\n       setSelectedMood('');\r\n       setNotes('');\r\n       setMessageFlash({ type: 'success', text: \"Humeur ajoutée avec succès !\" });\r\n-    } catch {\r\n+    } catch (err) {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n     }\r\n   };\r\n \r\n   const handleModifier = async () => {\r\n+    if (!editionNotes.trim()) {\r\n+      setMessageFlash({ type: 'error', text: \"Le journal intime ne peut pas être vide.\" });\r\n+      return;\r\n+    }\r\n     try {\r\n       const updated = await modifierHumeur(humeurDuJour.id, {\r\n         etat: humeurDuJour.etat,\r\n         noteJournal: editionNotes.trim(),\r\n@@ -91,148 +107,202 @@\n         prev.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date))\r\n       );\r\n       setHumeurDuJour(updated);\r\n       setModeEdition(false);\r\n-      setMessageFlash({ type: 'success', text: \"Journal mis à jour.\" });\r\n-    } catch {\r\n+      setMessageFlash({ type: 'success', text: \"Votre journal intime a été mis à jour avec succès !\" });\r\n+    } catch (err) {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de la modification.\" });\r\n     }\r\n   };\r\n \r\n   const handleSupprimer = async () => {\r\n-    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n+    if (!window.confirm(\"Voulez-vous vraiment supprimer l'humeur du jour ?\")) return;\r\n     try {\r\n       await supprimerHumeur(humeurDuJour.id);\r\n       setHumeurs(prev => prev.filter(h => h.id !== humeurDuJour.id));\r\n       setHumeurDuJour(null);\r\n+      setModeEdition(false);\r\n       setEditionNotes('');\r\n-      setMessageFlash({ type: 'success', text: \"Humeur supprimée.\" });\r\n-    } catch {\r\n+      setMessageFlash({ type: 'success', text: \"Humeur du jour supprimée.\" });\r\n+    } catch (err) {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de la suppression.\" });\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n-      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10\">\r\n+      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10 drop-shadow-md\">\r\n         Suivi de votre humeur\r\n       </h2>\r\n \r\n       {messageFlash && (\r\n-        <div className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n-          messageFlash.type === 'success'\r\n-            ? 'bg-green-100 border border-green-400 text-green-700'\r\n-            : 'bg-red-100 border border-red-400 text-red-700'\r\n-        }`}>\r\n-          {messageFlash.text}\r\n+        <div\r\n+          className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n+            messageFlash.type === 'success'\r\n+              ? 'bg-green-100 border border-green-400 text-green-700'\r\n+              : 'bg-red-100 border border-red-400 text-red-700'\r\n+          }`}\r\n+        >\r\n+          {messageFlash.type === 'success' ? '✔️ Succès :' : '❌ Erreur :'} {messageFlash.text}\r\n         </div>\r\n       )}\r\n \r\n       {!humeurDuJour && (\r\n-        <form onSubmit={handleEnregistrer} className=\"bg-white p-6 rounded-xl shadow-md space-y-6\">\r\n-          <h3 className=\"text-xl font-semibold text-indigo-700\">Votre humeur aujourd'hui :</h3>\r\n-          <div className=\"flex flex-wrap justify-center gap-4\">\r\n-            {moodsList.map(({ label, Icon, color }) => {\r\n-              const isSelected = selectedMood === label;\r\n-              return (\r\n-                <motion.button\r\n+        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md\">\r\n+          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n+            Ajouter votre humeur du jour\r\n+          </h3>\r\n+          <form onSubmit={handleEnregistrer} className=\"space-y-6\">\r\n+            <div className=\"flex flex-wrap justify-center gap-4\">\r\n+              {moodsList.map(({ label, Icon, color }) => (\r\n+                <button\r\n                   key={label}\r\n                   type=\"button\"\r\n-                  whileTap={{ scale: 0.95 }}\r\n-                  layout\r\n-                  className={`flex items-center gap-2 px-4 py-2 rounded-full border-2 font-medium transition duration-200\r\n-                    ${isSelected\r\n-                      ? 'bg-indigo-700 text-white border-indigo-700 ring-2 ring-indigo-400'\r\n-                      : 'bg-white text-indigo-700 border-indigo-300 hover:bg-indigo-100'}\r\n-                  `}\r\n+                  className={`flex items-center gap-2 px-5 py-2 rounded-full font-semibold border-2\r\n+                    ${\r\n+                      selectedMood === label\r\n+                        ? `${color} bg-indigo-700 text-white border-indigo-700`\r\n+                        : 'border-indigo-300 text-indigo-700 hover:bg-indigo-100'\r\n+                    }\r\n+                    transition-colors duration-300`}\r\n                   onClick={() => setSelectedMood(label)}\r\n                   disabled={!isUserAuthenticated}\r\n+                  aria-label={`Sélectionner humeur ${label}`}\r\n                 >\r\n-                  <Icon size={20} className={`${isSelected ? 'text-white' : color}`} />\r\n+                  <Icon size={24} className={`${selectedMood === label ? 'text-white' : color}`} />\r\n                   {label}\r\n-                </motion.button>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-          <textarea\r\n-            placeholder=\"Écrivez vos pensées, événements marquants, etc.\"\r\n-            className=\"w-full p-4 border border-indigo-300 rounded-xl focus:ring-indigo-400 resize-y\"\r\n-            rows={4}\r\n-            value={notes}\r\n-            onChange={(e) => setNotes(e.target.value)}\r\n-            required\r\n-          />\r\n-          <div className=\"text-center\">\r\n-            <button\r\n-              type=\"submit\"\r\n-              className=\"px-6 py-3 bg-indigo-700 text-white rounded-full font-bold hover:bg-indigo-800 transition\"\r\n-              disabled={!isUserAuthenticated}\r\n-            >\r\n-              Enregistrer mon humeur\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+\r\n+            <div>\r\n+              <label htmlFor=\"notes\" className=\"block mb-2 font-medium text-indigo-800\">\r\n+                Journal intime (décrivez votre journée) :\r\n+              </label>\r\n+              <textarea\r\n+                id=\"notes\"\r\n+                rows=\"5\"\r\n+                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n+                placeholder=\"Ce que vous avez ressenti aujourd'hui...\"\r\n+                value={notes}\r\n+                onChange={(e) => setNotes(e.target.value)}\r\n+                disabled={!isUserAuthenticated}\r\n+                required\r\n+              />\r\n+            </div>\r\n+\r\n+            <div className=\"text-center\">\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"px-10 py-3 rounded-full bg-indigo-700 text-white font-bold text-lg hover:bg-indigo-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+                disabled={!isUserAuthenticated || !selectedMood}\r\n+              >\r\n+                Enregistrer\r\n+              </button>\r\n+            </div>\r\n+          </form>\r\n+        </section>\r\n       )}\r\n \r\n       {humeurDuJour && (\r\n-        <div className=\"bg-white p-6 rounded-xl shadow-md space-y-6 mt-6\">\r\n-          <h3 className=\"text-xl font-semibold text-indigo-700\">\r\n-            Humeur du {new Date(humeurDuJour.date).toLocaleDateString()}\r\n+        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md relative\">\r\n+          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n+            Votre humeur du {new Date(humeurDuJour.date).toLocaleDateString('fr-FR')}\r\n           </h3>\r\n-          <div className=\"flex items-center gap-4\">\r\n-            {React.createElement(\r\n-              moodsList.find(m => m.label === humeurDuJour.etat)?.Icon || Smile,\r\n-              { size: 28, className: moodsList.find(m => m.label === humeurDuJour.etat)?.color }\r\n-            )}\r\n-            <p className=\"text-2xl font-bold text-indigo-800\">{humeurDuJour.etat}</p>\r\n+\r\n+          <div className=\"flex items-center gap-4 mb-6\">\r\n+            {moodsList.find((m) => m.label === humeurDuJour.etat)?.Icon &&\r\n+              React.createElement(moodsList.find((m) => m.label === humeurDuJour.etat).Icon, {\r\n+                size: 32,\r\n+                className: moodsList.find((m) => m.label === humeurDuJour.etat).color,\r\n+              })}\r\n+            <p className=\"text-3xl font-bold text-indigo-700\">{humeurDuJour.etat}</p>\r\n           </div>\r\n \r\n-          {!modeEdition ? (\r\n+          {!modeEdition && (\r\n             <>\r\n-              <p className=\"text-indigo-700 whitespace-pre-line\">\r\n-                {humeurDuJour.noteJournal || 'Pas de note.'}\r\n+              <p className=\"whitespace-pre-wrap text-indigo-800 font-semibold mb-6\">\r\n+                {humeurDuJour.noteJournal || \"Aucune note pour aujourd'hui.\"}\r\n               </p>\r\n-              <div className=\"flex gap-4 justify-end\">\r\n+\r\n+              {/* Boutons Modifier et Supprimer sous la note, alignés à droite */}\r\n+              <div className=\"flex justify-end gap-4\">\r\n                 <button\r\n-                  onClick={() => setModeEdition(true)}\r\n-                  className=\"bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                  onClick={() => {\r\n+                    setModeEdition(true);\r\n+                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n+                    setMessageFlash(null);\r\n+                  }}\r\n+                  title=\"Modifier journal intime\"\r\n+                  className=\"flex items-center gap-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n                 >\r\n-                  <Edit2 size={18} /> Modifier\r\n+                  <Edit2 size={20} /> Modifier\r\n                 </button>\r\n                 <button\r\n                   onClick={handleSupprimer}\r\n-                  className=\"bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                  title=\"Supprimer humeur du jour\"\r\n+                  className=\"flex items-center gap-2 bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n                 >\r\n-                  <Trash2 size={18} /> Supprimer\r\n+                  <Trash2 size={20} /> Supprimer\r\n                 </button>\r\n               </div>\r\n             </>\r\n-          ) : (\r\n-            <>\r\n+          )}\r\n+\r\n+          {modeEdition && (\r\n+            <div className=\"space-y-4\">\r\n               <textarea\r\n-                rows=\"5\"\r\n-                className=\"w-full p-3 border border-indigo-300 rounded-xl\"\r\n+                rows=\"8\"\r\n+                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n                 value={editionNotes}\r\n                 onChange={(e) => setEditionNotes(e.target.value)}\r\n+                placeholder=\"Modifiez votre journal intime ici...\"\r\n               />\r\n-              <div className=\"flex justify-end gap-4\">\r\n+\r\n+              <div className=\"flex gap-4 justify-center\">\r\n                 <button\r\n                   onClick={handleModifier}\r\n-                  className=\"bg-indigo-700 text-white px-4 py-2 rounded-full font-bold\"\r\n+                  className=\"bg-indigo-700 text-white py-3 px-8 rounded-full font-bold hover:bg-indigo-800 transition-colors\"\r\n                 >\r\n-                  Enregistrer\r\n+                  Enregistrer les modifications\r\n                 </button>\r\n                 <button\r\n-                  onClick={() => setModeEdition(false)}\r\n-                  className=\"bg-gray-300 text-indigo-700 px-4 py-2 rounded-full font-bold\"\r\n+                  onClick={() => {\r\n+                    setModeEdition(false);\r\n+                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n+                    setMessageFlash(null);\r\n+                  }}\r\n+                  className=\"bg-gray-300 text-indigo-700 py-3 px-8 rounded-full font-bold hover:bg-gray-400 transition-colors\"\r\n                 >\r\n                   Annuler\r\n                 </button>\r\n               </div>\r\n-            </>\r\n+            </div>\r\n           )}\r\n-        </div>\r\n+        </section>\r\n       )}\r\n+\r\n+      {humeurs.length > 0 && (\r\n+  <section className=\"mb-12\">\r\n+    <h3 className=\"text-2xl font-semibold mb-4 text-indigo-700 border-b border-indigo-300 pb-2\">\r\n+      Historique des humeurs\r\n+    </h3>\r\n+    <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100\">\r\n+      {humeurs.map((humeur) => {\r\n+        const MoodIcon = moodsList.find(m => m.label === humeur.etat)?.Icon;\r\n+        const moodColor = moodsList.find(m => m.label === humeur.etat)?.color || 'text-gray-600';\r\n+        return (\r\n+          <li key={humeur.id} className=\"flex items-center gap-4 text-indigo-800\">\r\n+            {MoodIcon && <MoodIcon size={24} className={moodColor} />}\r\n+            <span className=\"font-semibold w-24\">{new Date(humeur.date).toLocaleDateString('fr-FR')}</span>\r\n+            <span className=\"w-28\">{humeur.etat}</span>\r\n+            <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{humeur.noteJournal || '—'}</span>\r\n+          </li>\r\n+        );\r\n+      })}\r\n+    </ul>\r\n+  </section>\r\n+)} \r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750883419728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,16 @@\n import React, { useEffect, useState } from 'react';\r\n-import { Smile, Meh, Frown, Zap, AlertCircle, Activity, Star, Coffee, TrendingUp, Trash2, Edit2 } from 'lucide-react';\r\n-import { getSuiviHumeur, ajouterHumeur, modifierHumeur, supprimerHumeur } from '../../services/serviceUtilisateur';\r\n+import {\r\n+  Smile, Meh, Frown, Zap, AlertCircle, Activity,\r\n+  Star, Coffee, TrendingUp, Trash2, Edit2\r\n+} from 'lucide-react';\r\n+import {\r\n+  getSuiviHumeur,\r\n+  ajouterHumeur,\r\n+  modifierHumeur,\r\n+  supprimerHumeur\r\n+} from '../../services/serviceUtilisateur';\r\n+import { motion } from 'framer-motion';\r\n \r\n const moodsList = [\r\n   { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n   { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n@@ -17,16 +26,15 @@\n const SuiviHumeur = ({ currentUser }) => {\r\n   const [humeurs, setHumeurs] = useState([]);\r\n   const [selectedMood, setSelectedMood] = useState('');\r\n   const [notes, setNotes] = useState('');\r\n-  const [messageFlash, setMessageFlash] = useState(null); // message succès/erreur qui disparaît\r\n+  const [messageFlash, setMessageFlash] = useState(null);\r\n   const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n   const [modeEdition, setModeEdition] = useState(false);\r\n   const [editionNotes, setEditionNotes] = useState('');\r\n \r\n-  const isUserAuthenticated = !!currentUser && !!currentUser.id;\r\n+  const isUserAuthenticated = !!currentUser?.id;\r\n \r\n-  // Effacer message flash après 3 sec\r\n   useEffect(() => {\r\n     if (messageFlash) {\r\n       const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n       return () => clearTimeout(timer);\r\n@@ -34,275 +42,217 @@\n   }, [messageFlash]);\r\n \r\n   useEffect(() => {\r\n     const chargerHumeurs = async () => {\r\n-      if (!isUserAuthenticated) {\r\n-        setHumeurs([]);\r\n-        setHumeurDuJour(null);\r\n-        return;\r\n-      }\r\n+      if (!isUserAuthenticated) return;\r\n       try {\r\n         const data = await getSuiviHumeur();\r\n         const sorted = data.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n         setHumeurs(sorted);\r\n-\r\n         const today = new Date().toISOString().split('T')[0];\r\n         const humeurToday = sorted.find(h => h.date === today);\r\n         if (humeurToday) {\r\n           setHumeurDuJour(humeurToday);\r\n           setEditionNotes(humeurToday.noteJournal || '');\r\n-        } else {\r\n-          setHumeurDuJour(null);\r\n-          setEditionNotes('');\r\n         }\r\n-      } catch (err) {\r\n+      } catch {\r\n         setMessageFlash({ type: 'error', text: \"Impossible de charger l'historique des humeurs.\" });\r\n       }\r\n     };\r\n     chargerHumeurs();\r\n   }, [isUserAuthenticated]);\r\n \r\n   const handleEnregistrer = async (e) => {\r\n     e.preventDefault();\r\n-    setMessageFlash(null);\r\n-\r\n-    if (!selectedMood) {\r\n-      setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n-      return;\r\n-    }\r\n-    if (!isUserAuthenticated) {\r\n-      setMessageFlash({ type: 'error', text: \"Vous devez être connecté pour enregistrer votre humeur.\" });\r\n-      return;\r\n-    }\r\n-\r\n-    const humeurDataToSend = {\r\n-      date: new Date().toISOString().split('T')[0],\r\n-      etat: selectedMood,\r\n-      noteJournal: notes.trim(),\r\n-    };\r\n-\r\n+    if (!selectedMood) return setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n     try {\r\n-      const added = await ajouterHumeur(humeurDataToSend);\r\n-      setHumeurs(prev => [added, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date)));\r\n+      const added = await ajouterHumeur({\r\n+        date: new Date().toISOString().split('T')[0],\r\n+        etat: selectedMood,\r\n+        noteJournal: notes.trim(),\r\n+      });\r\n+      const newHumeurs = [added, ...humeurs].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+      setHumeurs(newHumeurs);\r\n       setHumeurDuJour(added);\r\n       setSelectedMood('');\r\n       setNotes('');\r\n       setMessageFlash({ type: 'success', text: \"Humeur ajoutée avec succès !\" });\r\n-    } catch (err) {\r\n+    } catch {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n     }\r\n   };\r\n \r\n   const handleModifier = async () => {\r\n-    if (!editionNotes.trim()) {\r\n-      setMessageFlash({ type: 'error', text: \"Le journal intime ne peut pas être vide.\" });\r\n-      return;\r\n-    }\r\n     try {\r\n       const updated = await modifierHumeur(humeurDuJour.id, {\r\n         etat: humeurDuJour.etat,\r\n         noteJournal: editionNotes.trim(),\r\n         date: humeurDuJour.date,\r\n       });\r\n-      setHumeurs(prev =>\r\n-        prev.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date))\r\n-      );\r\n+      const newHumeurs = humeurs.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+      setHumeurs(newHumeurs);\r\n       setHumeurDuJour(updated);\r\n       setModeEdition(false);\r\n-      setMessageFlash({ type: 'success', text: \"Votre journal intime a été mis à jour avec succès !\" });\r\n-    } catch (err) {\r\n+      setMessageFlash({ type: 'success', text: \"Journal mis à jour.\" });\r\n+    } catch {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de la modification.\" });\r\n     }\r\n   };\r\n \r\n   const handleSupprimer = async () => {\r\n-    if (!window.confirm(\"Voulez-vous vraiment supprimer l'humeur du jour ?\")) return;\r\n+    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n     try {\r\n       await supprimerHumeur(humeurDuJour.id);\r\n       setHumeurs(prev => prev.filter(h => h.id !== humeurDuJour.id));\r\n       setHumeurDuJour(null);\r\n-      setModeEdition(false);\r\n       setEditionNotes('');\r\n-      setMessageFlash({ type: 'success', text: \"Humeur du jour supprimée.\" });\r\n-    } catch (err) {\r\n+      setMessageFlash({ type: 'success', text: \"Humeur supprimée.\" });\r\n+    } catch {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de la suppression.\" });\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n-      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10 drop-shadow-md\">\r\n+      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10\">\r\n         Suivi de votre humeur\r\n       </h2>\r\n \r\n       {messageFlash && (\r\n-        <div\r\n-          className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n-            messageFlash.type === 'success'\r\n-              ? 'bg-green-100 border border-green-400 text-green-700'\r\n-              : 'bg-red-100 border border-red-400 text-red-700'\r\n-          }`}\r\n-        >\r\n-          {messageFlash.type === 'success' ? '✔️ Succès :' : '❌ Erreur :'} {messageFlash.text}\r\n+        <div className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n+          messageFlash.type === 'success'\r\n+            ? 'bg-green-100 border border-green-400 text-green-700'\r\n+            : 'bg-red-100 border border-red-400 text-red-700'\r\n+        }`}>\r\n+          {messageFlash.text}\r\n         </div>\r\n       )}\r\n \r\n       {!humeurDuJour && (\r\n-        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md\">\r\n-          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n-            Ajouter votre humeur du jour\r\n-          </h3>\r\n-          <form onSubmit={handleEnregistrer} className=\"space-y-6\">\r\n-            <div className=\"flex flex-wrap justify-center gap-4\">\r\n-              {moodsList.map(({ label, Icon, color }) => (\r\n-                <button\r\n+        <form onSubmit={handleEnregistrer} className=\"bg-white p-6 rounded-xl shadow-md space-y-6\">\r\n+          <h3 className=\"text-xl font-semibold text-indigo-700\">Votre humeur aujourd'hui :</h3>\r\n+          <div className=\"flex flex-wrap justify-center gap-4\">\r\n+            {moodsList.map(({ label, Icon, color }) => {\r\n+              const isSelected = selectedMood === label;\r\n+              return (\r\n+                <motion.button\r\n                   key={label}\r\n                   type=\"button\"\r\n-                  className={`flex items-center gap-2 px-5 py-2 rounded-full font-semibold border-2\r\n-                    ${\r\n-                      selectedMood === label\r\n-                        ? `${color} bg-indigo-700 text-white border-indigo-700`\r\n-                        : 'border-indigo-300 text-indigo-700 hover:bg-indigo-100'\r\n-                    }\r\n-                    transition-colors duration-300`}\r\n+                  whileTap={{ scale: 0.95 }}\r\n+                  layout\r\n+                  className={`flex items-center gap-2 px-4 py-2 rounded-full border-2 font-medium transition duration-200\r\n+                    ${isSelected\r\n+                      ? 'bg-indigo-700 text-white border-indigo-700 ring-2 ring-indigo-400'\r\n+                      : 'bg-white text-indigo-700 border-indigo-300 hover:bg-indigo-100'}\r\n+                  `}\r\n                   onClick={() => setSelectedMood(label)}\r\n                   disabled={!isUserAuthenticated}\r\n-                  aria-label={`Sélectionner humeur ${label}`}\r\n                 >\r\n-                  <Icon size={24} className={`${selectedMood === label ? 'text-white' : color}`} />\r\n+                  <Icon size={20} className={`${isSelected ? 'text-white' : color}`} />\r\n                   {label}\r\n-                </button>\r\n-              ))}\r\n-            </div>\r\n-\r\n-            <div>\r\n-              <label htmlFor=\"notes\" className=\"block mb-2 font-medium text-indigo-800\">\r\n-                Journal intime (décrivez votre journée) :\r\n-              </label>\r\n-              <textarea\r\n-                id=\"notes\"\r\n-                rows=\"5\"\r\n-                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n-                placeholder=\"Ce que vous avez ressenti aujourd'hui...\"\r\n-                value={notes}\r\n-                onChange={(e) => setNotes(e.target.value)}\r\n-                disabled={!isUserAuthenticated}\r\n-                required\r\n-              />\r\n-            </div>\r\n-\r\n-            <div className=\"text-center\">\r\n-              <button\r\n-                type=\"submit\"\r\n-                className=\"px-10 py-3 rounded-full bg-indigo-700 text-white font-bold text-lg hover:bg-indigo-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n-                disabled={!isUserAuthenticated || !selectedMood}\r\n-              >\r\n-                Enregistrer\r\n-              </button>\r\n-            </div>\r\n-          </form>\r\n-        </section>\r\n+                </motion.button>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+          <textarea\r\n+            placeholder=\"Écrivez vos pensées, événements marquants, etc.\"\r\n+            className=\"w-full p-4 border border-indigo-300 rounded-xl focus:ring-indigo-400 resize-y\"\r\n+            rows={4}\r\n+            value={notes}\r\n+            onChange={(e) => setNotes(e.target.value)}\r\n+            required\r\n+          />\r\n+          <div className=\"text-center\">\r\n+            <button\r\n+              type=\"submit\"\r\n+              className=\"px-6 py-3 bg-indigo-700 text-white rounded-full font-bold hover:bg-indigo-800 transition\"\r\n+              disabled={!isUserAuthenticated}\r\n+            >\r\n+              Enregistrer mon humeur\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n       )}\r\n \r\n       {humeurDuJour && (\r\n-        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md relative\">\r\n-          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n-            Votre humeur du {new Date(humeurDuJour.date).toLocaleDateString('fr-FR')}\r\n+        <div className=\"bg-white p-6 rounded-xl shadow-md space-y-6 mt-6\">\r\n+          <h3 className=\"text-xl font-semibold text-indigo-700\">\r\n+            Humeur du {new Date(humeurDuJour.date).toLocaleDateString()}\r\n           </h3>\r\n-\r\n-          <div className=\"flex items-center gap-4 mb-6\">\r\n-            {moodsList.find((m) => m.label === humeurDuJour.etat)?.Icon &&\r\n-              React.createElement(moodsList.find((m) => m.label === humeurDuJour.etat).Icon, {\r\n-                size: 32,\r\n-                className: moodsList.find((m) => m.label === humeurDuJour.etat).color,\r\n-              })}\r\n-            <p className=\"text-3xl font-bold text-indigo-700\">{humeurDuJour.etat}</p>\r\n+          <div className=\"flex items-center gap-4\">\r\n+            {React.createElement(\r\n+              moodsList.find(m => m.label === humeurDuJour.etat)?.Icon || Smile,\r\n+              { size: 28, className: moodsList.find(m => m.label === humeurDuJour.etat)?.color }\r\n+            )}\r\n+            <p className=\"text-2xl font-bold text-indigo-800\">{humeurDuJour.etat}</p>\r\n           </div>\r\n \r\n-          {!modeEdition && (\r\n+          {!modeEdition ? (\r\n             <>\r\n-              <p className=\"whitespace-pre-wrap text-indigo-800 font-semibold mb-6\">\r\n-                {humeurDuJour.noteJournal || \"Aucune note pour aujourd'hui.\"}\r\n+              <p className=\"text-indigo-700 whitespace-pre-line\">\r\n+                {humeurDuJour.noteJournal || 'Pas de note.'}\r\n               </p>\r\n-\r\n-              {/* Boutons Modifier et Supprimer sous la note, alignés à droite */}\r\n-              <div className=\"flex justify-end gap-4\">\r\n+              <div className=\"flex gap-4 justify-end\">\r\n                 <button\r\n-                  onClick={() => {\r\n-                    setModeEdition(true);\r\n-                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n-                    setMessageFlash(null);\r\n-                  }}\r\n-                  title=\"Modifier journal intime\"\r\n-                  className=\"flex items-center gap-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n+                  onClick={() => setModeEdition(true)}\r\n+                  className=\"bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n                 >\r\n-                  <Edit2 size={20} /> Modifier\r\n+                  <Edit2 size={18} /> Modifier\r\n                 </button>\r\n                 <button\r\n                   onClick={handleSupprimer}\r\n-                  title=\"Supprimer humeur du jour\"\r\n-                  className=\"flex items-center gap-2 bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n+                  className=\"bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n                 >\r\n-                  <Trash2 size={20} /> Supprimer\r\n+                  <Trash2 size={18} /> Supprimer\r\n                 </button>\r\n               </div>\r\n             </>\r\n-          )}\r\n-\r\n-          {modeEdition && (\r\n-            <div className=\"space-y-4\">\r\n+          ) : (\r\n+            <>\r\n               <textarea\r\n-                rows=\"8\"\r\n-                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n+                rows=\"5\"\r\n+                className=\"w-full p-3 border border-indigo-300 rounded-xl\"\r\n                 value={editionNotes}\r\n                 onChange={(e) => setEditionNotes(e.target.value)}\r\n-                placeholder=\"Modifiez votre journal intime ici...\"\r\n               />\r\n-\r\n-              <div className=\"flex gap-4 justify-center\">\r\n+              <div className=\"flex justify-end gap-4\">\r\n                 <button\r\n                   onClick={handleModifier}\r\n-                  className=\"bg-indigo-700 text-white py-3 px-8 rounded-full font-bold hover:bg-indigo-800 transition-colors\"\r\n+                  className=\"bg-indigo-700 text-white px-4 py-2 rounded-full font-bold\"\r\n                 >\r\n-                  Enregistrer les modifications\r\n+                  Enregistrer\r\n                 </button>\r\n                 <button\r\n-                  onClick={() => {\r\n-                    setModeEdition(false);\r\n-                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n-                    setMessageFlash(null);\r\n-                  }}\r\n-                  className=\"bg-gray-300 text-indigo-700 py-3 px-8 rounded-full font-bold hover:bg-gray-400 transition-colors\"\r\n+                  onClick={() => setModeEdition(false)}\r\n+                  className=\"bg-gray-300 text-indigo-700 px-4 py-2 rounded-full font-bold\"\r\n                 >\r\n                   Annuler\r\n                 </button>\r\n               </div>\r\n-            </div>\r\n+            </>\r\n           )}\r\n-        </section>\r\n+        </div>\r\n       )}\r\n \r\n       {humeurs.length > 0 && (\r\n-  <section className=\"mb-12\">\r\n-    <h3 className=\"text-2xl font-semibold mb-4 text-indigo-700 border-b border-indigo-300 pb-2\">\r\n-      Historique des humeurs\r\n-    </h3>\r\n-    <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100\">\r\n-      {humeurs.map((humeur) => {\r\n-        const MoodIcon = moodsList.find(m => m.label === humeur.etat)?.Icon;\r\n-        const moodColor = moodsList.find(m => m.label === humeur.etat)?.color || 'text-gray-600';\r\n-        return (\r\n-          <li key={humeur.id} className=\"flex items-center gap-4 text-indigo-800\">\r\n-            {MoodIcon && <MoodIcon size={24} className={moodColor} />}\r\n-            <span className=\"font-semibold w-24\">{new Date(humeur.date).toLocaleDateString('fr-FR')}</span>\r\n-            <span className=\"w-28\">{humeur.etat}</span>\r\n-            <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{humeur.noteJournal || '—'}</span>\r\n-          </li>\r\n-        );\r\n-      })}\r\n-    </ul>\r\n-  </section>\r\n-)} \r\n+        <section className=\"mt-10\">\r\n+          <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n+          <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n+            {humeurs.map((h) => {\r\n+              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n+              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n+              return (\r\n+                <li key={h.id} className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n+                  {MoodIcon && <MoodIcon size={20} className={color} />}\r\n+                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n+                  <span className=\"w-28\">{h.etat}</span>\r\n+                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n+                </li>\r\n+              );\r\n+            })}\r\n+          </ul>\r\n+        </section>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1750883694431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,24 @@\n import React, { useEffect, useState } from 'react';\r\n import {\r\n-  Smile, Meh, Frown, Zap, AlertCircle, Activity,\r\n-  Star, Coffee, TrendingUp, Trash2, Edit2\r\n+  Smile,\r\n+  Meh,\r\n+  Frown,\r\n+  Zap,\r\n+  AlertCircle,\r\n+  Activity,\r\n+  Star,\r\n+  Coffee,\r\n+  TrendingUp,\r\n+  Trash2,\r\n+  Edit2,\r\n } from 'lucide-react';\r\n import {\r\n   getSuiviHumeur,\r\n   ajouterHumeur,\r\n   modifierHumeur,\r\n-  supprimerHumeur\r\n+  supprimerHumeur,\r\n } from '../../services/serviceUtilisateur';\r\n-import { motion } from 'framer-motion';\r\n \r\n const moodsList = [\r\n   { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n   { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n@@ -26,15 +34,17 @@\n const SuiviHumeur = ({ currentUser }) => {\r\n   const [humeurs, setHumeurs] = useState([]);\r\n   const [selectedMood, setSelectedMood] = useState('');\r\n   const [notes, setNotes] = useState('');\r\n-  const [messageFlash, setMessageFlash] = useState(null);\r\n+  const [messageFlash, setMessageFlash] = useState(null); // message succès/erreur qui disparaît\r\n   const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n   const [modeEdition, setModeEdition] = useState(false);\r\n   const [editionNotes, setEditionNotes] = useState('');\r\n+  const [afficherHistorique, setAfficherHistorique] = useState(false);\r\n \r\n-  const isUserAuthenticated = !!currentUser?.id;\r\n+  const isUserAuthenticated = !!currentUser && !!currentUser.id;\r\n \r\n+  // Effacer message flash après 3 sec\r\n   useEffect(() => {\r\n     if (messageFlash) {\r\n       const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n       return () => clearTimeout(timer);\r\n@@ -42,211 +52,313 @@\n   }, [messageFlash]);\r\n \r\n   useEffect(() => {\r\n     const chargerHumeurs = async () => {\r\n-      if (!isUserAuthenticated) return;\r\n+      if (!isUserAuthenticated) {\r\n+        setHumeurs([]);\r\n+        setHumeurDuJour(null);\r\n+        return;\r\n+      }\r\n       try {\r\n         const data = await getSuiviHumeur();\r\n-        const sorted = data.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+        const sorted = data.sort(\r\n+          (a, b) => new Date(b.date) - new Date(a.date)\r\n+        );\r\n         setHumeurs(sorted);\r\n+\r\n         const today = new Date().toISOString().split('T')[0];\r\n-        const humeurToday = sorted.find(h => h.date === today);\r\n+        const humeurToday = sorted.find((h) => h.date === today);\r\n         if (humeurToday) {\r\n           setHumeurDuJour(humeurToday);\r\n           setEditionNotes(humeurToday.noteJournal || '');\r\n+        } else {\r\n+          setHumeurDuJour(null);\r\n+          setEditionNotes('');\r\n         }\r\n-      } catch {\r\n-        setMessageFlash({ type: 'error', text: \"Impossible de charger l'historique des humeurs.\" });\r\n+      } catch (err) {\r\n+        setMessageFlash({\r\n+          type: 'error',\r\n+          text: \"Impossible de charger l'historique des humeurs.\",\r\n+        });\r\n       }\r\n     };\r\n     chargerHumeurs();\r\n   }, [isUserAuthenticated]);\r\n \r\n   const handleEnregistrer = async (e) => {\r\n     e.preventDefault();\r\n-    if (!selectedMood) return setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n+    setMessageFlash(null);\r\n+\r\n+    if (!selectedMood) {\r\n+      setMessageFlash({ type: 'error', text: 'Veuillez sélectionner une humeur.' });\r\n+      return;\r\n+    }\r\n+    if (!isUserAuthenticated) {\r\n+      setMessageFlash({\r\n+        type: 'error',\r\n+        text: 'Vous devez être connecté pour enregistrer votre humeur.',\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n+    const humeurDataToSend = {\r\n+      date: new Date().toISOString().split('T')[0],\r\n+      etat: selectedMood,\r\n+      noteJournal: notes.trim(),\r\n+    };\r\n+\r\n     try {\r\n-      const added = await ajouterHumeur({\r\n-        date: new Date().toISOString().split('T')[0],\r\n-        etat: selectedMood,\r\n-        noteJournal: notes.trim(),\r\n-      });\r\n-      const newHumeurs = [added, ...humeurs].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n-      setHumeurs(newHumeurs);\r\n+      const added = await ajouterHumeur(humeurDataToSend);\r\n+      setHumeurs((prev) =>\r\n+        [added, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date))\r\n+      );\r\n       setHumeurDuJour(added);\r\n       setSelectedMood('');\r\n       setNotes('');\r\n-      setMessageFlash({ type: 'success', text: \"Humeur ajoutée avec succès !\" });\r\n-    } catch {\r\n+      setMessageFlash({ type: 'success', text: 'Humeur ajoutée avec succès !' });\r\n+    } catch (err) {\r\n       setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n     }\r\n   };\r\n \r\n   const handleModifier = async () => {\r\n+    if (!editionNotes.trim()) {\r\n+      setMessageFlash({\r\n+        type: 'error',\r\n+        text: 'Le journal intime ne peut pas être vide.',\r\n+      });\r\n+      return;\r\n+    }\r\n     try {\r\n       const updated = await modifierHumeur(humeurDuJour.id, {\r\n         etat: humeurDuJour.etat,\r\n         noteJournal: editionNotes.trim(),\r\n         date: humeurDuJour.date,\r\n       });\r\n-      const newHumeurs = humeurs.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n-      setHumeurs(newHumeurs);\r\n+      setHumeurs((prev) =>\r\n+        prev\r\n+          .map((h) => (h.id === humeurDuJour.id ? updated : h))\r\n+          .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n+      );\r\n       setHumeurDuJour(updated);\r\n       setModeEdition(false);\r\n-      setMessageFlash({ type: 'success', text: \"Journal mis à jour.\" });\r\n-    } catch {\r\n-      setMessageFlash({ type: 'error', text: \"Erreur lors de la modification.\" });\r\n+      setMessageFlash({\r\n+        type: 'success',\r\n+        text: 'Votre journal intime a été mis à jour avec succès !',\r\n+      });\r\n+    } catch (err) {\r\n+      setMessageFlash({ type: 'error', text: 'Erreur lors de la modification.' });\r\n     }\r\n   };\r\n \r\n   const handleSupprimer = async () => {\r\n-    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n+    if (!window.confirm('Voulez-vous vraiment supprimer l\\'humeur du jour ?')) return;\r\n     try {\r\n       await supprimerHumeur(humeurDuJour.id);\r\n-      setHumeurs(prev => prev.filter(h => h.id !== humeurDuJour.id));\r\n+      setHumeurs((prev) => prev.filter((h) => h.id !== humeurDuJour.id));\r\n       setHumeurDuJour(null);\r\n+      setModeEdition(false);\r\n       setEditionNotes('');\r\n-      setMessageFlash({ type: 'success', text: \"Humeur supprimée.\" });\r\n-    } catch {\r\n-      setMessageFlash({ type: 'error', text: \"Erreur lors de la suppression.\" });\r\n+      setMessageFlash({ type: 'success', text: \"Humeur du jour supprimée.\" });\r\n+    } catch (err) {\r\n+      setMessageFlash({ type: 'error', text: 'Erreur lors de la suppression.' });\r\n     }\r\n   };\r\n \r\n   return (\r\n     <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n-      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10\">\r\n+      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10 drop-shadow-md\">\r\n         Suivi de votre humeur\r\n       </h2>\r\n \r\n       {messageFlash && (\r\n-        <div className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n-          messageFlash.type === 'success'\r\n-            ? 'bg-green-100 border border-green-400 text-green-700'\r\n-            : 'bg-red-100 border border-red-400 text-red-700'\r\n-        }`}>\r\n+        <div\r\n+          className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n+            messageFlash.type === 'success'\r\n+              ? 'bg-green-100 border border-green-400 text-green-700'\r\n+              : 'bg-red-100 border border-red-400 text-red-700'\r\n+          }`}\r\n+        >\r\n+          {messageFlash.type === 'success' ? '✔️ Succès :' : '❌ Erreur :'}{' '}\r\n           {messageFlash.text}\r\n         </div>\r\n       )}\r\n \r\n       {!humeurDuJour && (\r\n-        <form onSubmit={handleEnregistrer} className=\"bg-white p-6 rounded-xl shadow-md space-y-6\">\r\n-          <h3 className=\"text-xl font-semibold text-indigo-700\">Votre humeur aujourd'hui :</h3>\r\n-          <div className=\"flex flex-wrap justify-center gap-4\">\r\n-            {moodsList.map(({ label, Icon, color }) => {\r\n-              const isSelected = selectedMood === label;\r\n-              return (\r\n-                <motion.button\r\n+        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md\">\r\n+          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n+            Ajouter votre humeur du jour\r\n+          </h3>\r\n+          <form onSubmit={handleEnregistrer} className=\"space-y-6\">\r\n+            <div className=\"flex flex-wrap justify-center gap-4\">\r\n+              {moodsList.map(({ label, Icon, color }) => (\r\n+                <button\r\n                   key={label}\r\n                   type=\"button\"\r\n-                  whileTap={{ scale: 0.95 }}\r\n-                  layout\r\n-                  className={`flex items-center gap-2 px-4 py-2 rounded-full border-2 font-medium transition duration-200\r\n-                    ${isSelected\r\n-                      ? 'bg-indigo-700 text-white border-indigo-700 ring-2 ring-indigo-400'\r\n-                      : 'bg-white text-indigo-700 border-indigo-300 hover:bg-indigo-100'}\r\n-                  `}\r\n+                  className={`flex items-center gap-2 px-5 py-2 rounded-full font-semibold border-2\r\n+                    ${\r\n+                      selectedMood === label\r\n+                        ? `${color} bg-indigo-700 text-white border-indigo-700`\r\n+                        : 'border-indigo-300 text-indigo-700 hover:bg-indigo-100'\r\n+                    }\r\n+                    transition-colors duration-300`}\r\n                   onClick={() => setSelectedMood(label)}\r\n                   disabled={!isUserAuthenticated}\r\n+                  aria-label={`Sélectionner humeur ${label}`}\r\n                 >\r\n-                  <Icon size={20} className={`${isSelected ? 'text-white' : color}`} />\r\n+                  <Icon\r\n+                    size={24}\r\n+                    className={`${selectedMood === label ? 'text-white' : color}`}\r\n+                  />\r\n                   {label}\r\n-                </motion.button>\r\n-              );\r\n-            })}\r\n-          </div>\r\n-          <textarea\r\n-            placeholder=\"Écrivez vos pensées, événements marquants, etc.\"\r\n-            className=\"w-full p-4 border border-indigo-300 rounded-xl focus:ring-indigo-400 resize-y\"\r\n-            rows={4}\r\n-            value={notes}\r\n-            onChange={(e) => setNotes(e.target.value)}\r\n-            required\r\n-          />\r\n-          <div className=\"text-center\">\r\n-            <button\r\n-              type=\"submit\"\r\n-              className=\"px-6 py-3 bg-indigo-700 text-white rounded-full font-bold hover:bg-indigo-800 transition\"\r\n-              disabled={!isUserAuthenticated}\r\n-            >\r\n-              Enregistrer mon humeur\r\n-            </button>\r\n-          </div>\r\n-        </form>\r\n+                </button>\r\n+              ))}\r\n+            </div>\r\n+\r\n+            <div>\r\n+              <label\r\n+                htmlFor=\"notes\"\r\n+                className=\"block mb-2 font-medium text-indigo-800\"\r\n+              >\r\n+                Journal intime (décrivez votre journée) :\r\n+              </label>\r\n+              <textarea\r\n+                id=\"notes\"\r\n+                rows=\"5\"\r\n+                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n+                placeholder=\"Ce que vous avez ressenti aujourd'hui...\"\r\n+                value={notes}\r\n+                onChange={(e) => setNotes(e.target.value)}\r\n+                disabled={!isUserAuthenticated}\r\n+                required\r\n+              />\r\n+            </div>\r\n+\r\n+            <div className=\"text-center\">\r\n+              <button\r\n+                type=\"submit\"\r\n+                className=\"px-10 py-3 rounded-full bg-indigo-700 text-white font-bold text-lg hover:bg-indigo-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n+                disabled={!isUserAuthenticated || !selectedMood}\r\n+              >\r\n+                Enregistrer\r\n+              </button>\r\n+            </div>\r\n+          </form>\r\n+        </section>\r\n       )}\r\n \r\n       {humeurDuJour && (\r\n-        <div className=\"bg-white p-6 rounded-xl shadow-md space-y-6 mt-6\">\r\n-          <h3 className=\"text-xl font-semibold text-indigo-700\">\r\n-            Humeur du {new Date(humeurDuJour.date).toLocaleDateString()}\r\n+        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md relative\">\r\n+          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n+            Votre humeur du {new Date(humeurDuJour.date).toLocaleDateString('fr-FR')}\r\n           </h3>\r\n-          <div className=\"flex items-center gap-4\">\r\n-            {React.createElement(\r\n-              moodsList.find(m => m.label === humeurDuJour.etat)?.Icon || Smile,\r\n-              { size: 28, className: moodsList.find(m => m.label === humeurDuJour.etat)?.color }\r\n-            )}\r\n-            <p className=\"text-2xl font-bold text-indigo-800\">{humeurDuJour.etat}</p>\r\n+\r\n+          <div className=\"flex items-center gap-4 mb-6\">\r\n+            {moodsList.find((m) => m.label === humeurDuJour.etat)?.Icon &&\r\n+              React.createElement(\r\n+                moodsList.find((m) => m.label === humeurDuJour.etat).Icon,\r\n+                {\r\n+                  size: 32,\r\n+                  className: moodsList.find((m) => m.label === humeurDuJour.etat).color,\r\n+                }\r\n+              )}\r\n+            <p className=\"text-3xl font-bold text-indigo-700\">{humeurDuJour.etat}</p>\r\n           </div>\r\n \r\n-          {!modeEdition ? (\r\n+          {!modeEdition && (\r\n             <>\r\n-              <p className=\"text-indigo-700 whitespace-pre-line\">\r\n-                {humeurDuJour.noteJournal || 'Pas de note.'}\r\n+              <p className=\"whitespace-pre-wrap text-indigo-800 font-semibold mb-6\">\r\n+                {humeurDuJour.noteJournal || \"Aucune note pour aujourd'hui.\"}\r\n               </p>\r\n-              <div className=\"flex gap-4 justify-end\">\r\n+\r\n+              {/* Boutons Modifier et Supprimer sous la note, alignés à droite */}\r\n+              <div className=\"flex justify-end gap-4\">\r\n                 <button\r\n-                  onClick={() => setModeEdition(true)}\r\n-                  className=\"bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                  onClick={() => {\r\n+                    setModeEdition(true);\r\n+                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n+                    setMessageFlash(null);\r\n+                  }}\r\n+                  title=\"Modifier journal intime\"\r\n+                  className=\"flex items-center gap-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n                 >\r\n-                  <Edit2 size={18} /> Modifier\r\n+                  <Edit2 size={20} /> Modifier\r\n                 </button>\r\n                 <button\r\n                   onClick={handleSupprimer}\r\n-                  className=\"bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                  title=\"Supprimer humeur du jour\"\r\n+                  className=\"flex items-center gap-2 bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n                 >\r\n-                  <Trash2 size={18} /> Supprimer\r\n+                  <Trash2 size={20} /> Supprimer\r\n                 </button>\r\n               </div>\r\n             </>\r\n-          ) : (\r\n-            <>\r\n+          )}\r\n+\r\n+          {modeEdition && (\r\n+            <div className=\"space-y-4\">\r\n               <textarea\r\n-                rows=\"5\"\r\n-                className=\"w-full p-3 border border-indigo-300 rounded-xl\"\r\n+                rows=\"8\"\r\n+                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n                 value={editionNotes}\r\n                 onChange={(e) => setEditionNotes(e.target.value)}\r\n+                placeholder=\"Modifiez votre journal intime ici...\"\r\n               />\r\n-              <div className=\"flex justify-end gap-4\">\r\n+\r\n+              <div className=\"flex gap-4 justify-center\">\r\n                 <button\r\n                   onClick={handleModifier}\r\n-                  className=\"bg-indigo-700 text-white px-4 py-2 rounded-full font-bold\"\r\n+                  className=\"bg-indigo-700 text-white py-3 px-8 rounded-full font-bold hover:bg-indigo-800 transition-colors\"\r\n                 >\r\n-                  Enregistrer\r\n+                  Enregistrer les modifications\r\n                 </button>\r\n                 <button\r\n-                  onClick={() => setModeEdition(false)}\r\n-                  className=\"bg-gray-300 text-indigo-700 px-4 py-2 rounded-full font-bold\"\r\n+                  onClick={() => {\r\n+                    setModeEdition(false);\r\n+                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n+                    setMessageFlash(null);\r\n+                  }}\r\n+                  className=\"bg-gray-300 text-indigo-700 py-3 px-8 rounded-full font-bold hover:bg-gray-400 transition-colors\"\r\n                 >\r\n                   Annuler\r\n                 </button>\r\n               </div>\r\n-            </>\r\n+            </div>\r\n           )}\r\n-        </div>\r\n+        </section>\r\n       )}\r\n \r\n-      {humeurs.length > 0 && (\r\n-        <section className=\"mt-10\">\r\n+      {/* BOUTON POUR AFFICHER / MASQUER L'HISTORIQUE */}\r\n+      <div className=\"text-center mt-10\">\r\n+        <button\r\n+          onClick={() => setAfficherHistorique(!afficherHistorique)}\r\n+          className=\"px-6 py-3 bg-indigo-100 text-indigo-800 font-semibold rounded-full hover:bg-indigo-200 transition\"\r\n+        >\r\n+          {afficherHistorique ? 'Masquer mon historique' : 'Voir mon historique'}\r\n+        </button>\r\n+      </div>\r\n+\r\n+      {/* AFFICHAGE DE L'HISTORIQUE CONDITIONNEL */}\r\n+      {afficherHistorique && humeurs.length > 0 && (\r\n+        <section className=\"mt-6\">\r\n           <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n           <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n             {humeurs.map((h) => {\r\n-              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n-              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n+              const MoodIcon = moodsList.find((m) => m.label === h.etat)?.Icon;\r\n+              const color = moodsList.find((m) => m.label === h.etat)?.color || 'text-gray-600';\r\n               return (\r\n-                <li key={h.id} className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n+                <li\r\n+                  key={h.id}\r\n+                  className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\"\r\n+                >\r\n                   {MoodIcon && <MoodIcon size={20} className={color} />}\r\n-                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n+                  <span className=\"font-semibold w-24\">\r\n+                    {new Date(h.date).toLocaleDateString('fr-FR')}\r\n+                  </span>\r\n                   <span className=\"w-28\">{h.etat}</span>\r\n-                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n+                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">\r\n+                    {h.noteJournal || '—'}\r\n+                  </span>\r\n                 </li>\r\n               );\r\n             })}\r\n           </ul>\r\n"
                },
                {
                    "date": 1750883799318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,259 @@\n+import React, { useEffect, useState } from 'react';\r\n+import {\r\n+  Smile, Meh, Frown, Zap, AlertCircle, Activity,\r\n+  Star, Coffee, TrendingUp, Trash2, Edit2\r\n+} from 'lucide-react';\r\n+import {\r\n+  getSuiviHumeur,\r\n+  ajouterHumeur,\r\n+  modifierHumeur,\r\n+  supprimerHumeur\r\n+} from '../../services/serviceUtilisateur';\r\n+import { motion } from 'framer-motion';\r\n+\r\n+const moodsList = [\r\n+  { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n+  { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n+  { label: 'Triste', Icon: Frown, color: 'text-blue-500' },\r\n+  { label: 'En colère', Icon: Zap, color: 'text-red-500' },\r\n+  { label: 'Anxieux', Icon: AlertCircle, color: 'text-purple-500' },\r\n+  { label: 'Stressé', Icon: Activity, color: 'text-pink-500' },\r\n+  { label: 'Enthousiaste', Icon: Star, color: 'text-yellow-600' },\r\n+  { label: 'Fatigué', Icon: Coffee, color: 'text-indigo-600' },\r\n+  { label: 'Motivé', Icon: TrendingUp, color: 'text-green-500' },\r\n+];\r\n+\r\n+const SuiviHumeur = ({ currentUser }) => {\r\n+  const [humeurs, setHumeurs] = useState([]);\r\n+  const [selectedMood, setSelectedMood] = useState('');\r\n+  const [notes, setNotes] = useState('');\r\n+  const [messageFlash, setMessageFlash] = useState(null);\r\n+  const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n+  const [modeEdition, setModeEdition] = useState(false);\r\n+  const [editionNotes, setEditionNotes] = useState('');\r\n+\r\n+  const isUserAuthenticated = !!currentUser?.id;\r\n+\r\n+  useEffect(() => {\r\n+    if (messageFlash) {\r\n+      const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n+      return () => clearTimeout(timer);\r\n+    }\r\n+  }, [messageFlash]);\r\n+\r\n+  useEffect(() => {\r\n+    const chargerHumeurs = async () => {\r\n+      if (!isUserAuthenticated) return;\r\n+      try {\r\n+        const data = await getSuiviHumeur();\r\n+        const sorted = data.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+        setHumeurs(sorted);\r\n+        const today = new Date().toISOString().split('T')[0];\r\n+        const humeurToday = sorted.find(h => h.date === today);\r\n+        if (humeurToday) {\r\n+          setHumeurDuJour(humeurToday);\r\n+          setEditionNotes(humeurToday.noteJournal || '');\r\n+        }\r\n+      } catch {\r\n+        setMessageFlash({ type: 'error', text: \"Impossible de charger l'historique des humeurs.\" });\r\n+      }\r\n+    };\r\n+    chargerHumeurs();\r\n+  }, [isUserAuthenticated]);\r\n+\r\n+  const handleEnregistrer = async (e) => {\r\n+    e.preventDefault();\r\n+    if (!selectedMood) return setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n+    try {\r\n+      const added = await ajouterHumeur({\r\n+        date: new Date().toISOString().split('T')[0],\r\n+        etat: selectedMood,\r\n+        noteJournal: notes.trim(),\r\n+      });\r\n+      const newHumeurs = [added, ...humeurs].sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+      setHumeurs(newHumeurs);\r\n+      setHumeurDuJour(added);\r\n+      setSelectedMood('');\r\n+      setNotes('');\r\n+      setMessageFlash({ type: 'success', text: \"Humeur ajoutée avec succès !\" });\r\n+    } catch {\r\n+      setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n+    }\r\n+  };\r\n+\r\n+  const handleModifier = async () => {\r\n+    try {\r\n+      const updated = await modifierHumeur(humeurDuJour.id, {\r\n+        etat: humeurDuJour.etat,\r\n+        noteJournal: editionNotes.trim(),\r\n+        date: humeurDuJour.date,\r\n+      });\r\n+      const newHumeurs = humeurs.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date));\r\n+      setHumeurs(newHumeurs);\r\n+      setHumeurDuJour(updated);\r\n+      setModeEdition(false);\r\n+      setMessageFlash({ type: 'success', text: \"Journal mis à jour.\" });\r\n+    } catch {\r\n+      setMessageFlash({ type: 'error', text: \"Erreur lors de la modification.\" });\r\n+    }\r\n+  };\r\n+\r\n+  const handleSupprimer = async () => {\r\n+    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n+    try {\r\n+      await supprimerHumeur(humeurDuJour.id);\r\n+      setHumeurs(prev => prev.filter(h => h.id !== humeurDuJour.id));\r\n+      setHumeurDuJour(null);\r\n+      setEditionNotes('');\r\n+      setMessageFlash({ type: 'success', text: \"Humeur supprimée.\" });\r\n+    } catch {\r\n+      setMessageFlash({ type: 'error', text: \"Erreur lors de la suppression.\" });\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n+      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10\">\r\n+        Suivi de votre humeur\r\n+      </h2>\r\n+\r\n+      {messageFlash && (\r\n+        <div className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n+          messageFlash.type === 'success'\r\n+            ? 'bg-green-100 border border-green-400 text-green-700'\r\n+            : 'bg-red-100 border border-red-400 text-red-700'\r\n+        }`}>\r\n+          {messageFlash.text}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {!humeurDuJour && (\r\n+        <form onSubmit={handleEnregistrer} className=\"bg-white p-6 rounded-xl shadow-md space-y-6\">\r\n+          <h3 className=\"text-xl font-semibold text-indigo-700\">Votre humeur aujourd'hui :</h3>\r\n+          <div className=\"flex flex-wrap justify-center gap-4\">\r\n+            {moodsList.map(({ label, Icon, color }) => {\r\n+              const isSelected = selectedMood === label;\r\n+              return (\r\n+                <motion.button\r\n+                  key={label}\r\n+                  type=\"button\"\r\n+                  whileTap={{ scale: 0.95 }}\r\n+                  layout\r\n+                  className={`flex items-center gap-2 px-4 py-2 rounded-full border-2 font-medium transition duration-200\r\n+                    ${isSelected\r\n+                      ? 'bg-indigo-700 text-white border-indigo-700 ring-2 ring-indigo-400'\r\n+                      : 'bg-white text-indigo-700 border-indigo-300 hover:bg-indigo-100'}\r\n+                  `}\r\n+                  onClick={() => setSelectedMood(label)}\r\n+                  disabled={!isUserAuthenticated}\r\n+                >\r\n+                  <Icon size={20} className={`${isSelected ? 'text-white' : color}`} />\r\n+                  {label}\r\n+                </motion.button>\r\n+              );\r\n+            })}\r\n+          </div>\r\n+          <textarea\r\n+            placeholder=\"Écrivez vos pensées, événements marquants, etc.\"\r\n+            className=\"w-full p-4 border border-indigo-300 rounded-xl focus:ring-indigo-400 resize-y\"\r\n+            rows={4}\r\n+            value={notes}\r\n+            onChange={(e) => setNotes(e.target.value)}\r\n+            required\r\n+          />\r\n+          <div className=\"text-center\">\r\n+            <button\r\n+              type=\"submit\"\r\n+              className=\"px-6 py-3 bg-indigo-700 text-white rounded-full font-bold hover:bg-indigo-800 transition\"\r\n+              disabled={!isUserAuthenticated}\r\n+            >\r\n+              Enregistrer mon humeur\r\n+            </button>\r\n+          </div>\r\n+        </form>\r\n+      )}\r\n+\r\n+      {humeurDuJour && (\r\n+        <div className=\"bg-white p-6 rounded-xl shadow-md space-y-6 mt-6\">\r\n+          <h3 className=\"text-xl font-semibold text-indigo-700\">\r\n+            Humeur du {new Date(humeurDuJour.date).toLocaleDateString()}\r\n+          </h3>\r\n+          <div className=\"flex items-center gap-4\">\r\n+            {React.createElement(\r\n+              moodsList.find(m => m.label === humeurDuJour.etat)?.Icon || Smile,\r\n+              { size: 28, className: moodsList.find(m => m.label === humeurDuJour.etat)?.color }\r\n+            )}\r\n+            <p className=\"text-2xl font-bold text-indigo-800\">{humeurDuJour.etat}</p>\r\n+          </div>\r\n+\r\n+          {!modeEdition ? (\r\n+            <>\r\n+              <p className=\"text-indigo-700 whitespace-pre-line\">\r\n+                {humeurDuJour.noteJournal || 'Pas de note.'}\r\n+              </p>\r\n+              <div className=\"flex gap-4 justify-end\">\r\n+                <button\r\n+                  onClick={() => setModeEdition(true)}\r\n+                  className=\"bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                >\r\n+                  <Edit2 size={18} /> Modifier\r\n+                </button>\r\n+                <button\r\n+                  onClick={handleSupprimer}\r\n+                  className=\"bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n+                >\r\n+                  <Trash2 size={18} /> Supprimer\r\n+                </button>\r\n+              </div>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <textarea\r\n+                rows=\"5\"\r\n+                className=\"w-full p-3 border border-indigo-300 rounded-xl\"\r\n+                value={editionNotes}\r\n+                onChange={(e) => setEditionNotes(e.target.value)}\r\n+              />\r\n+              <div className=\"flex justify-end gap-4\">\r\n+                <button\r\n+                  onClick={handleModifier}\r\n+                  className=\"bg-indigo-700 text-white px-4 py-2 rounded-full font-bold\"\r\n+                >\r\n+                  Enregistrer\r\n+                </button>\r\n+                <button\r\n+                  onClick={() => setModeEdition(false)}\r\n+                  className=\"bg-gray-300 text-indigo-700 px-4 py-2 rounded-full font-bold\"\r\n+                >\r\n+                  Annuler\r\n+                </button>\r\n+              </div>\r\n+            </>\r\n+          )}\r\n+        </div>\r\n+      )}\r\n+\r\n+      {humeurs.length > 0 && (\r\n+        <section className=\"mt-10\">\r\n+          <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n+          <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n+            {humeurs.map((h) => {\r\n+              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n+              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n+              return (\r\n+                <li key={h.id} className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n+                  {MoodIcon && <MoodIcon size={20} className={color} />}\r\n+                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n+                  <span className=\"w-28\">{h.etat}</span>\r\n+                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n+                </li>\r\n+              );\r\n+            })}\r\n+          </ul>\r\n+        </section>\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default SuiviHumeur;\r\n"
                },
                {
                    "date": 1750883885313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n   const [messageFlash, setMessageFlash] = useState(null);\r\n   const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n   const [modeEdition, setModeEdition] = useState(false);\r\n   const [editionNotes, setEditionNotes] = useState('');\r\n+  const [afficherHistorique, setAfficherHistorique] = useState(false);\r\n \r\n   const isUserAuthenticated = !!currentUser?.id;\r\n \r\n   useEffect(() => {\r\n@@ -232,392 +233,31 @@\n           )}\r\n         </div>\r\n       )}\r\n \r\n-      {humeurs.length > 0 && (\r\n-        <section className=\"mt-10\">\r\n-          <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n-          <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n-            {humeurs.map((h) => {\r\n-              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n-              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n-              return (\r\n-                <li key={h.id} className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n-                  {MoodIcon && <MoodIcon size={20} className={color} />}\r\n-                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n-                  <span className=\"w-28\">{h.etat}</span>\r\n-                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n-                </li>\r\n-              );\r\n-            })}\r\n-          </ul>\r\n-        </section>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default SuiviHumeur;\r\n-import React, { useEffect, useState } from 'react';\r\n-import {\r\n-  Smile,\r\n-  Meh,\r\n-  Frown,\r\n-  Zap,\r\n-  AlertCircle,\r\n-  Activity,\r\n-  Star,\r\n-  Coffee,\r\n-  TrendingUp,\r\n-  Trash2,\r\n-  Edit2,\r\n-} from 'lucide-react';\r\n-import {\r\n-  getSuiviHumeur,\r\n-  ajouterHumeur,\r\n-  modifierHumeur,\r\n-  supprimerHumeur,\r\n-} from '../../services/serviceUtilisateur';\r\n-\r\n-const moodsList = [\r\n-  { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n-  { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n-  { label: 'Triste', Icon: Frown, color: 'text-blue-500' },\r\n-  { label: 'En colère', Icon: Zap, color: 'text-red-500' },\r\n-  { label: 'Anxieux', Icon: AlertCircle, color: 'text-purple-500' },\r\n-  { label: 'Stressé', Icon: Activity, color: 'text-pink-500' },\r\n-  { label: 'Enthousiaste', Icon: Star, color: 'text-yellow-600' },\r\n-  { label: 'Fatigué', Icon: Coffee, color: 'text-indigo-600' },\r\n-  { label: 'Motivé', Icon: TrendingUp, color: 'text-green-500' },\r\n-];\r\n-\r\n-const SuiviHumeur = ({ currentUser }) => {\r\n-  const [humeurs, setHumeurs] = useState([]);\r\n-  const [selectedMood, setSelectedMood] = useState('');\r\n-  const [notes, setNotes] = useState('');\r\n-  const [messageFlash, setMessageFlash] = useState(null); // message succès/erreur qui disparaît\r\n-  const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n-  const [modeEdition, setModeEdition] = useState(false);\r\n-  const [editionNotes, setEditionNotes] = useState('');\r\n-  const [afficherHistorique, setAfficherHistorique] = useState(false);\r\n-\r\n-  const isUserAuthenticated = !!currentUser && !!currentUser.id;\r\n-\r\n-  // Effacer message flash après 3 sec\r\n-  useEffect(() => {\r\n-    if (messageFlash) {\r\n-      const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n-      return () => clearTimeout(timer);\r\n-    }\r\n-  }, [messageFlash]);\r\n-\r\n-  useEffect(() => {\r\n-    const chargerHumeurs = async () => {\r\n-      if (!isUserAuthenticated) {\r\n-        setHumeurs([]);\r\n-        setHumeurDuJour(null);\r\n-        return;\r\n-      }\r\n-      try {\r\n-        const data = await getSuiviHumeur();\r\n-        const sorted = data.sort(\r\n-          (a, b) => new Date(b.date) - new Date(a.date)\r\n-        );\r\n-        setHumeurs(sorted);\r\n-\r\n-        const today = new Date().toISOString().split('T')[0];\r\n-        const humeurToday = sorted.find((h) => h.date === today);\r\n-        if (humeurToday) {\r\n-          setHumeurDuJour(humeurToday);\r\n-          setEditionNotes(humeurToday.noteJournal || '');\r\n-        } else {\r\n-          setHumeurDuJour(null);\r\n-          setEditionNotes('');\r\n-        }\r\n-      } catch (err) {\r\n-        setMessageFlash({\r\n-          type: 'error',\r\n-          text: \"Impossible de charger l'historique des humeurs.\",\r\n-        });\r\n-      }\r\n-    };\r\n-    chargerHumeurs();\r\n-  }, [isUserAuthenticated]);\r\n-\r\n-  const handleEnregistrer = async (e) => {\r\n-    e.preventDefault();\r\n-    setMessageFlash(null);\r\n-\r\n-    if (!selectedMood) {\r\n-      setMessageFlash({ type: 'error', text: 'Veuillez sélectionner une humeur.' });\r\n-      return;\r\n-    }\r\n-    if (!isUserAuthenticated) {\r\n-      setMessageFlash({\r\n-        type: 'error',\r\n-        text: 'Vous devez être connecté pour enregistrer votre humeur.',\r\n-      });\r\n-      return;\r\n-    }\r\n-\r\n-    const humeurDataToSend = {\r\n-      date: new Date().toISOString().split('T')[0],\r\n-      etat: selectedMood,\r\n-      noteJournal: notes.trim(),\r\n-    };\r\n-\r\n-    try {\r\n-      const added = await ajouterHumeur(humeurDataToSend);\r\n-      setHumeurs((prev) =>\r\n-        [added, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date))\r\n-      );\r\n-      setHumeurDuJour(added);\r\n-      setSelectedMood('');\r\n-      setNotes('');\r\n-      setMessageFlash({ type: 'success', text: 'Humeur ajoutée avec succès !' });\r\n-    } catch (err) {\r\n-      setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n-    }\r\n-  };\r\n-\r\n-  const handleModifier = async () => {\r\n-    if (!editionNotes.trim()) {\r\n-      setMessageFlash({\r\n-        type: 'error',\r\n-        text: 'Le journal intime ne peut pas être vide.',\r\n-      });\r\n-      return;\r\n-    }\r\n-    try {\r\n-      const updated = await modifierHumeur(humeurDuJour.id, {\r\n-        etat: humeurDuJour.etat,\r\n-        noteJournal: editionNotes.trim(),\r\n-        date: humeurDuJour.date,\r\n-      });\r\n-      setHumeurs((prev) =>\r\n-        prev\r\n-          .map((h) => (h.id === humeurDuJour.id ? updated : h))\r\n-          .sort((a, b) => new Date(b.date) - new Date(a.date))\r\n-      );\r\n-      setHumeurDuJour(updated);\r\n-      setModeEdition(false);\r\n-      setMessageFlash({\r\n-        type: 'success',\r\n-        text: 'Votre journal intime a été mis à jour avec succès !',\r\n-      });\r\n-    } catch (err) {\r\n-      setMessageFlash({ type: 'error', text: 'Erreur lors de la modification.' });\r\n-    }\r\n-  };\r\n-\r\n-  const handleSupprimer = async () => {\r\n-    if (!window.confirm('Voulez-vous vraiment supprimer l\\'humeur du jour ?')) return;\r\n-    try {\r\n-      await supprimerHumeur(humeurDuJour.id);\r\n-      setHumeurs((prev) => prev.filter((h) => h.id !== humeurDuJour.id));\r\n-      setHumeurDuJour(null);\r\n-      setModeEdition(false);\r\n-      setEditionNotes('');\r\n-      setMessageFlash({ type: 'success', text: \"Humeur du jour supprimée.\" });\r\n-    } catch (err) {\r\n-      setMessageFlash({ type: 'error', text: 'Erreur lors de la suppression.' });\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n-      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10 drop-shadow-md\">\r\n-        Suivi de votre humeur\r\n-      </h2>\r\n-\r\n-      {messageFlash && (\r\n-        <div\r\n-          className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n-            messageFlash.type === 'success'\r\n-              ? 'bg-green-100 border border-green-400 text-green-700'\r\n-              : 'bg-red-100 border border-red-400 text-red-700'\r\n-          }`}\r\n-        >\r\n-          {messageFlash.type === 'success' ? '✔️ Succès :' : '❌ Erreur :'}{' '}\r\n-          {messageFlash.text}\r\n-        </div>\r\n-      )}\r\n-\r\n-      {!humeurDuJour && (\r\n-        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md\">\r\n-          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n-            Ajouter votre humeur du jour\r\n-          </h3>\r\n-          <form onSubmit={handleEnregistrer} className=\"space-y-6\">\r\n-            <div className=\"flex flex-wrap justify-center gap-4\">\r\n-              {moodsList.map(({ label, Icon, color }) => (\r\n-                <button\r\n-                  key={label}\r\n-                  type=\"button\"\r\n-                  className={`flex items-center gap-2 px-5 py-2 rounded-full font-semibold border-2\r\n-                    ${\r\n-                      selectedMood === label\r\n-                        ? `${color} bg-indigo-700 text-white border-indigo-700`\r\n-                        : 'border-indigo-300 text-indigo-700 hover:bg-indigo-100'\r\n-                    }\r\n-                    transition-colors duration-300`}\r\n-                  onClick={() => setSelectedMood(label)}\r\n-                  disabled={!isUserAuthenticated}\r\n-                  aria-label={`Sélectionner humeur ${label}`}\r\n-                >\r\n-                  <Icon\r\n-                    size={24}\r\n-                    className={`${selectedMood === label ? 'text-white' : color}`}\r\n-                  />\r\n-                  {label}\r\n-                </button>\r\n-              ))}\r\n-            </div>\r\n-\r\n-            <div>\r\n-              <label\r\n-                htmlFor=\"notes\"\r\n-                className=\"block mb-2 font-medium text-indigo-800\"\r\n-              >\r\n-                Journal intime (décrivez votre journée) :\r\n-              </label>\r\n-              <textarea\r\n-                id=\"notes\"\r\n-                rows=\"5\"\r\n-                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n-                placeholder=\"Ce que vous avez ressenti aujourd'hui...\"\r\n-                value={notes}\r\n-                onChange={(e) => setNotes(e.target.value)}\r\n-                disabled={!isUserAuthenticated}\r\n-                required\r\n-              />\r\n-            </div>\r\n-\r\n-            <div className=\"text-center\">\r\n-              <button\r\n-                type=\"submit\"\r\n-                className=\"px-10 py-3 rounded-full bg-indigo-700 text-white font-bold text-lg hover:bg-indigo-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\r\n-                disabled={!isUserAuthenticated || !selectedMood}\r\n-              >\r\n-                Enregistrer\r\n-              </button>\r\n-            </div>\r\n-          </form>\r\n-        </section>\r\n-      )}\r\n-\r\n-      {humeurDuJour && (\r\n-        <section className=\"mb-12 bg-white p-8 rounded-2xl shadow-md relative\">\r\n-          <h3 className=\"text-2xl font-semibold mb-6 text-indigo-700 border-b border-indigo-300 pb-3\">\r\n-            Votre humeur du {new Date(humeurDuJour.date).toLocaleDateString('fr-FR')}\r\n-          </h3>\r\n-\r\n-          <div className=\"flex items-center gap-4 mb-6\">\r\n-            {moodsList.find((m) => m.label === humeurDuJour.etat)?.Icon &&\r\n-              React.createElement(\r\n-                moodsList.find((m) => m.label === humeurDuJour.etat).Icon,\r\n-                {\r\n-                  size: 32,\r\n-                  className: moodsList.find((m) => m.label === humeurDuJour.etat).color,\r\n-                }\r\n-              )}\r\n-            <p className=\"text-3xl font-bold text-indigo-700\">{humeurDuJour.etat}</p>\r\n-          </div>\r\n-\r\n-          {!modeEdition && (\r\n-            <>\r\n-              <p className=\"whitespace-pre-wrap text-indigo-800 font-semibold mb-6\">\r\n-                {humeurDuJour.noteJournal || \"Aucune note pour aujourd'hui.\"}\r\n-              </p>\r\n-\r\n-              {/* Boutons Modifier et Supprimer sous la note, alignés à droite */}\r\n-              <div className=\"flex justify-end gap-4\">\r\n-                <button\r\n-                  onClick={() => {\r\n-                    setModeEdition(true);\r\n-                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n-                    setMessageFlash(null);\r\n-                  }}\r\n-                  title=\"Modifier journal intime\"\r\n-                  className=\"flex items-center gap-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n-                >\r\n-                  <Edit2 size={20} /> Modifier\r\n-                </button>\r\n-                <button\r\n-                  onClick={handleSupprimer}\r\n-                  title=\"Supprimer humeur du jour\"\r\n-                  className=\"flex items-center gap-2 bg-red-100 hover:bg-red-200 text-red-700 font-semibold py-2 px-5 rounded-full shadow-md transition-transform hover:scale-105 active:scale-95 select-none\"\r\n-                >\r\n-                  <Trash2 size={20} /> Supprimer\r\n-                </button>\r\n-              </div>\r\n-            </>\r\n-          )}\r\n-\r\n-          {modeEdition && (\r\n-            <div className=\"space-y-4\">\r\n-              <textarea\r\n-                rows=\"8\"\r\n-                className=\"w-full p-4 border border-indigo-300 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-400 resize-y placeholder-indigo-400\"\r\n-                value={editionNotes}\r\n-                onChange={(e) => setEditionNotes(e.target.value)}\r\n-                placeholder=\"Modifiez votre journal intime ici...\"\r\n-              />\r\n-\r\n-              <div className=\"flex gap-4 justify-center\">\r\n-                <button\r\n-                  onClick={handleModifier}\r\n-                  className=\"bg-indigo-700 text-white py-3 px-8 rounded-full font-bold hover:bg-indigo-800 transition-colors\"\r\n-                >\r\n-                  Enregistrer les modifications\r\n-                </button>\r\n-                <button\r\n-                  onClick={() => {\r\n-                    setModeEdition(false);\r\n-                    setEditionNotes(humeurDuJour.noteJournal || '');\r\n-                    setMessageFlash(null);\r\n-                  }}\r\n-                  className=\"bg-gray-300 text-indigo-700 py-3 px-8 rounded-full font-bold hover:bg-gray-400 transition-colors\"\r\n-                >\r\n-                  Annuler\r\n-                </button>\r\n-              </div>\r\n-            </div>\r\n-          )}\r\n-        </section>\r\n-      )}\r\n-\r\n-      {/* BOUTON POUR AFFICHER / MASQUER L'HISTORIQUE */}\r\n-      <div className=\"text-center mt-10\">\r\n+      {/* Bouton pour afficher / masquer l'historique */}\r\n+      <div className=\"mt-10 text-center\">\r\n         <button\r\n           onClick={() => setAfficherHistorique(!afficherHistorique)}\r\n-          className=\"px-6 py-3 bg-indigo-100 text-indigo-800 font-semibold rounded-full hover:bg-indigo-200 transition\"\r\n+          className=\"px-6 py-3 bg-indigo-600 text-white rounded-full font-semibold hover:bg-indigo-700 transition\"\r\n         >\r\n           {afficherHistorique ? 'Masquer mon historique' : 'Voir mon historique'}\r\n         </button>\r\n       </div>\r\n \r\n-      {/* AFFICHAGE DE L'HISTORIQUE CONDITIONNEL */}\r\n-      {afficherHistorique && humeurs.length > 0 && (\r\n-        <section className=\"mt-6\">\r\n+      {afficherHistorique && (\r\n+        <section className=\"mt-6 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2 bg-white p-4 rounded-xl shadow-md\">\r\n           <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n-          <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n+          <ul className=\"space-y-3\">\r\n             {humeurs.map((h) => {\r\n-              const MoodIcon = moodsList.find((m) => m.label === h.etat)?.Icon;\r\n-              const color = moodsList.find((m) => m.label === h.etat)?.color || 'text-gray-600';\r\n+              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n+              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n               return (\r\n-                <li\r\n-                  key={h.id}\r\n-                  className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\"\r\n-                >\r\n+                <li key={h.id} className=\"flex items-center gap-4 bg-indigo-50 px-4 py-2 rounded-lg shadow-sm\">\r\n                   {MoodIcon && <MoodIcon size={20} className={color} />}\r\n-                  <span className=\"font-semibold w-24\">\r\n-                    {new Date(h.date).toLocaleDateString('fr-FR')}\r\n-                  </span>\r\n+                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n                   <span className=\"w-28\">{h.etat}</span>\r\n-                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">\r\n-                    {h.noteJournal || '—'}\r\n-                  </span>\r\n+                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n                 </li>\r\n               );\r\n             })}\r\n           </ul>\r\n"
                },
                {
                    "date": 1750884020239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   const [messageFlash, setMessageFlash] = useState(null);\r\n   const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n   const [modeEdition, setModeEdition] = useState(false);\r\n   const [editionNotes, setEditionNotes] = useState('');\r\n-  const [afficherHistorique, setAfficherHistorique] = useState(false);\r\n \r\n   const isUserAuthenticated = !!currentUser?.id;\r\n \r\n   useEffect(() => {\r\n@@ -233,27 +232,17 @@\n           )}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Bouton pour afficher / masquer l'historique */}\r\n-      <div className=\"mt-10 text-center\">\r\n-        <button\r\n-          onClick={() => setAfficherHistorique(!afficherHistorique)}\r\n-          className=\"px-6 py-3 bg-indigo-600 text-white rounded-full font-semibold hover:bg-indigo-700 transition\"\r\n-        >\r\n-          {afficherHistorique ? 'Masquer mon historique' : 'Voir mon historique'}\r\n-        </button>\r\n-      </div>\r\n-\r\n-      {afficherHistorique && (\r\n-        <section className=\"mt-6 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2 bg-white p-4 rounded-xl shadow-md\">\r\n+      {humeurs.length > 0 && (\r\n+        <section className=\"mt-10\">\r\n           <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n-          <ul className=\"space-y-3\">\r\n+          <ul className=\"space-y-3 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n             {humeurs.map((h) => {\r\n               const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n               const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n               return (\r\n-                <li key={h.id} className=\"flex items-center gap-4 bg-indigo-50 px-4 py-2 rounded-lg shadow-sm\">\r\n+                <li key={h.id} className=\"flex items-center gap-4 bg-white px-4 py-2 rounded-lg shadow-sm\">\r\n                   {MoodIcon && <MoodIcon size={20} className={color} />}\r\n                   <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n                   <span className=\"w-28\">{h.etat}</span>\r\n                   <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n"
                },
                {
                    "date": 1750884053321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,17 +11,17 @@\n } from '../../services/serviceUtilisateur';\r\n import { motion } from 'framer-motion';\r\n \r\n const moodsList = [\r\n-  { label: 'Heureux', Icon: Smile, color: 'text-yellow-500', bgColor: 'bg-yellow-100' },\r\n-  { label: 'Neutre', Icon: Meh, color: 'text-gray-400', bgColor: 'bg-gray-100' },\r\n-  { label: 'Triste', Icon: Frown, color: 'text-blue-500', bgColor: 'bg-blue-100' },\r\n-  { label: 'En colère', Icon: Zap, color: 'text-red-500', bgColor: 'bg-red-100' },\r\n-  { label: 'Anxieux', Icon: AlertCircle, color: 'text-purple-500', bgColor: 'bg-purple-100' },\r\n-  { label: 'Stressé', Icon: Activity, color: 'text-pink-500', bgColor: 'bg-pink-100' },\r\n-  { label: 'Enthousiaste', Icon: Star, color: 'text-yellow-600', bgColor: 'bg-yellow-200' },\r\n-  { label: 'Fatigué', Icon: Coffee, color: 'text-indigo-600', bgColor: 'bg-indigo-100' },\r\n-  { label: 'Motivé', Icon: TrendingUp, color: 'text-green-500', bgColor: 'bg-green-100' },\r\n+  { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n+  { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n+  { label: 'Triste', Icon: Frown, color: 'text-blue-500' },\r\n+  { label: 'En colère', Icon: Zap, color: 'text-red-500' },\r\n+  { label: 'Anxieux', Icon: AlertCircle, color: 'text-purple-500' },\r\n+  { label: 'Stressé', Icon: Activity, color: 'text-pink-500' },\r\n+  { label: 'Enthousiaste', Icon: Star, color: 'text-yellow-600' },\r\n+  { label: 'Fatigué', Icon: Coffee, color: 'text-indigo-600' },\r\n+  { label: 'Motivé', Icon: TrendingUp, color: 'text-green-500' },\r\n ];\r\n \r\n const SuiviHumeur = ({ currentUser }) => {\r\n   const [humeurs, setHumeurs] = useState([]);\r\n@@ -233,8 +233,9 @@\n           )}\r\n         </div>\r\n       )}\r\n \r\n+      {/* Bouton pour afficher / masquer l'historique */}\r\n       <div className=\"mt-10 text-center\">\r\n         <button\r\n           onClick={() => setAfficherHistorique(!afficherHistorique)}\r\n           className=\"px-6 py-3 bg-indigo-600 text-white rounded-full font-semibold hover:bg-indigo-700 transition\"\r\n@@ -243,32 +244,20 @@\n         </button>\r\n       </div>\r\n \r\n       {afficherHistorique && (\r\n-        <section className=\"mt-6 max-h-[400px] overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n+        <section className=\"mt-6 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2 bg-white p-4 rounded-xl shadow-md\">\r\n           <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n-          <ul className=\"space-y-4\">\r\n+          <ul className=\"space-y-3\">\r\n             {humeurs.map((h) => {\r\n-              const moodData = moodsList.find(m => m.label === h.etat) || {};\r\n-              const MoodIcon = moodData.Icon || Smile;\r\n-              const color = moodData.color || 'text-gray-600';\r\n-              const bgColor = moodData.bgColor || 'bg-gray-100';\r\n-\r\n+              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n+              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n               return (\r\n-                <li\r\n-                  key={h.id}\r\n-                  className={`flex items-start gap-4 p-4 rounded-xl shadow-sm transition hover:shadow-md hover:-translate-y-1 transform ${bgColor}`}\r\n-                >\r\n-                  <div className={`flex items-center justify-center rounded-full w-12 h-12 ${color} bg-opacity-20`}>\r\n-                    <MoodIcon size={28} />\r\n-                  </div>\r\n-                  <div className=\"flex flex-col flex-1\">\r\n-                    <span className=\"inline-block bg-indigo-200 text-indigo-800 rounded-full px-3 py-1 text-sm font-semibold mb-1 w-max\">\r\n-                      {new Date(h.date).toLocaleDateString('fr-FR')}\r\n-                    </span>\r\n-                    <p className=\"text-indigo-900 font-bold text-lg\">{h.etat}</p>\r\n-                    <p className=\"text-indigo-700 italic whitespace-pre-wrap mt-1\">{h.noteJournal || 'Aucune note.'}</p>\r\n-                  </div>\r\n+                <li key={h.id} className=\"flex items-center gap-4 bg-indigo-50 px-4 py-2 rounded-lg shadow-sm\">\r\n+                  {MoodIcon && <MoodIcon size={20} className={color} />}\r\n+                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n+                  <span className=\"w-28\">{h.etat}</span>\r\n+                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n                 </li>\r\n               );\r\n             })}\r\n           </ul>\r\n"
                },
                {
                    "date": 1750884109586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,8 @@\n           )}\r\n         </div>\r\n       )}\r\n \r\n-      {/* Bouton pour afficher / masquer l'historique */}\r\n       <div className=\"mt-10 text-center\">\r\n         <button\r\n           onClick={() => setAfficherHistorique(!afficherHistorique)}\r\n           className=\"px-6 py-3 bg-indigo-600 text-white rounded-full font-semibold hover:bg-indigo-700 transition\"\r\n@@ -244,20 +243,35 @@\n         </button>\r\n       </div>\r\n \r\n       {afficherHistorique && (\r\n-        <section className=\"mt-6 max-h-96 overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2 bg-white p-4 rounded-xl shadow-md\">\r\n+        <section className=\"mt-6 max-h-[400px] overflow-y-auto scrollbar-thin scrollbar-thumb-indigo-400 scrollbar-track-indigo-100 pr-2\">\r\n           <h3 className=\"text-2xl font-semibold text-indigo-800 mb-4\">Historique des humeurs</h3>\r\n-          <ul className=\"space-y-3\">\r\n+          <ul className=\"divide-y divide-indigo-200\">\r\n             {humeurs.map((h) => {\r\n-              const MoodIcon = moodsList.find(m => m.label === h.etat)?.Icon;\r\n-              const color = moodsList.find(m => m.label === h.etat)?.color || 'text-gray-600';\r\n+              const moodData = moodsList.find(m => m.label === h.etat) || {};\r\n+              const MoodIcon = moodData.Icon || Smile;\r\n+              const color = moodData.color || 'text-gray-600';\r\n+\r\n               return (\r\n-                <li key={h.id} className=\"flex items-center gap-4 bg-indigo-50 px-4 py-2 rounded-lg shadow-sm\">\r\n-                  {MoodIcon && <MoodIcon size={20} className={color} />}\r\n-                  <span className=\"font-semibold w-24\">{new Date(h.date).toLocaleDateString('fr-FR')}</span>\r\n-                  <span className=\"w-28\">{h.etat}</span>\r\n-                  <span className=\"flex-1 text-sm text-indigo-600 italic truncate\">{h.noteJournal || '—'}</span>\r\n+                <li\r\n+                  key={h.id}\r\n+                  className=\"flex items-start gap-4 py-4 hover:bg-indigo-50 transition-colors rounded-md cursor-default\"\r\n+                >\r\n+                  <div className={`flex-shrink-0 rounded-full p-2 bg-indigo-100 ${color}`}>\r\n+                    <MoodIcon size={24} />\r\n+                  </div>\r\n+                  <div className=\"flex flex-col flex-grow\">\r\n+                    <div className=\"flex justify-between items-center mb-1\">\r\n+                      <span className=\"font-semibold text-indigo-700 text-lg\">{h.etat}</span>\r\n+                      <span className=\"text-sm text-indigo-500 font-mono bg-indigo-200 rounded px-2 py-0.5\">\r\n+                        {new Date(h.date).toLocaleDateString('fr-FR')}\r\n+                      </span>\r\n+                    </div>\r\n+                    <p className=\"text-indigo-600 italic text-sm whitespace-pre-line\">\r\n+                      {h.noteJournal || 'Aucune note.'}\r\n+                    </p>\r\n+                  </div>\r\n                 </li>\r\n               );\r\n             })}\r\n           </ul>\r\n"
                }
            ],
            "date": 1750883292511,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Smile, Meh, Frown, Zap, AlertCircle, Activity,\r\n  Star, Coffee, TrendingUp, Trash2, Edit2\r\n} from 'lucide-react';\r\nimport {\r\n  getSuiviHumeur,\r\n  ajouterHumeur,\r\n  modifierHumeur,\r\n  supprimerHumeur\r\n} from '../../services/serviceUtilisateur';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst moodsList = [\r\n  { label: 'Heureux', Icon: Smile, color: 'text-yellow-500' },\r\n  { label: 'Neutre', Icon: Meh, color: 'text-gray-400' },\r\n  { label: 'Triste', Icon: Frown, color: 'text-blue-500' },\r\n  { label: 'En colère', Icon: Zap, color: 'text-red-500' },\r\n  { label: 'Anxieux', Icon: AlertCircle, color: 'text-purple-500' },\r\n  { label: 'Stressé', Icon: Activity, color: 'text-pink-500' },\r\n  { label: 'Enthousiaste', Icon: Star, color: 'text-yellow-600' },\r\n  { label: 'Fatigué', Icon: Coffee, color: 'text-indigo-600' },\r\n  { label: 'Motivé', Icon: TrendingUp, color: 'text-green-500' },\r\n];\r\n\r\nconst SuiviHumeur = ({ currentUser }) => {\r\n  const [humeurs, setHumeurs] = useState([]);\r\n  const [selectedMood, setSelectedMood] = useState('');\r\n  const [notes, setNotes] = useState('');\r\n  const [messageFlash, setMessageFlash] = useState(null);\r\n  const [humeurDuJour, setHumeurDuJour] = useState(null);\r\n  const [modeEdition, setModeEdition] = useState(false);\r\n  const [editionNotes, setEditionNotes] = useState('');\r\n\r\n  const isUserAuthenticated = !!currentUser?.id;\r\n\r\n  useEffect(() => {\r\n    if (messageFlash) {\r\n      const timer = setTimeout(() => setMessageFlash(null), 3000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [messageFlash]);\r\n\r\n  useEffect(() => {\r\n    const chargerHumeurs = async () => {\r\n      if (!isUserAuthenticated) return;\r\n      try {\r\n        const data = await getSuiviHumeur();\r\n        const sorted = data.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n        setHumeurs(sorted);\r\n        const today = new Date().toISOString().split('T')[0];\r\n        const humeurToday = sorted.find(h => h.date === today);\r\n        if (humeurToday) {\r\n          setHumeurDuJour(humeurToday);\r\n          setEditionNotes(humeurToday.noteJournal || '');\r\n        }\r\n      } catch {\r\n        setMessageFlash({ type: 'error', text: \"Impossible de charger l'historique des humeurs.\" });\r\n      }\r\n    };\r\n    chargerHumeurs();\r\n  }, [isUserAuthenticated]);\r\n\r\n  const handleEnregistrer = async (e) => {\r\n    e.preventDefault();\r\n    if (!selectedMood) return setMessageFlash({ type: 'error', text: \"Veuillez sélectionner une humeur.\" });\r\n    try {\r\n      const added = await ajouterHumeur({\r\n        date: new Date().toISOString().split('T')[0],\r\n        etat: selectedMood,\r\n        noteJournal: notes.trim(),\r\n      });\r\n      setHumeurs(prev => [added, ...prev].sort((a, b) => new Date(b.date) - new Date(a.date)));\r\n      setHumeurDuJour(added);\r\n      setSelectedMood('');\r\n      setNotes('');\r\n      setMessageFlash({ type: 'success', text: \"Humeur ajoutée avec succès !\" });\r\n    } catch {\r\n      setMessageFlash({ type: 'error', text: \"Erreur lors de l'enregistrement.\" });\r\n    }\r\n  };\r\n\r\n  const handleModifier = async () => {\r\n    try {\r\n      const updated = await modifierHumeur(humeurDuJour.id, {\r\n        etat: humeurDuJour.etat,\r\n        noteJournal: editionNotes.trim(),\r\n        date: humeurDuJour.date,\r\n      });\r\n      setHumeurs(prev =>\r\n        prev.map(h => (h.id === humeurDuJour.id ? updated : h)).sort((a, b) => new Date(b.date) - new Date(a.date))\r\n      );\r\n      setHumeurDuJour(updated);\r\n      setModeEdition(false);\r\n      setMessageFlash({ type: 'success', text: \"Journal mis à jour.\" });\r\n    } catch {\r\n      setMessageFlash({ type: 'error', text: \"Erreur lors de la modification.\" });\r\n    }\r\n  };\r\n\r\n  const handleSupprimer = async () => {\r\n    if (!window.confirm(\"Confirmer la suppression ?\")) return;\r\n    try {\r\n      await supprimerHumeur(humeurDuJour.id);\r\n      setHumeurs(prev => prev.filter(h => h.id !== humeurDuJour.id));\r\n      setHumeurDuJour(null);\r\n      setEditionNotes('');\r\n      setMessageFlash({ type: 'success', text: \"Humeur supprimée.\" });\r\n    } catch {\r\n      setMessageFlash({ type: 'error', text: \"Erreur lors de la suppression.\" });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto p-8 bg-gradient-to-tr from-indigo-100 via-indigo-50 to-white rounded-3xl shadow-lg\">\r\n      <h2 className=\"text-4xl font-extrabold text-center text-indigo-800 mb-10\">\r\n        Suivi de votre humeur\r\n      </h2>\r\n\r\n      {messageFlash && (\r\n        <div className={`px-6 py-3 rounded-lg mb-6 shadow-md transition-all ${\r\n          messageFlash.type === 'success'\r\n            ? 'bg-green-100 border border-green-400 text-green-700'\r\n            : 'bg-red-100 border border-red-400 text-red-700'\r\n        }`}>\r\n          {messageFlash.text}\r\n        </div>\r\n      )}\r\n\r\n      {!humeurDuJour && (\r\n        <form onSubmit={handleEnregistrer} className=\"bg-white p-6 rounded-xl shadow-md space-y-6\">\r\n          <h3 className=\"text-xl font-semibold text-indigo-700\">Votre humeur aujourd'hui :</h3>\r\n          <div className=\"flex flex-wrap justify-center gap-4\">\r\n            {moodsList.map(({ label, Icon, color }) => {\r\n              const isSelected = selectedMood === label;\r\n              return (\r\n                <motion.button\r\n                  key={label}\r\n                  type=\"button\"\r\n                  whileTap={{ scale: 0.95 }}\r\n                  layout\r\n                  className={`flex items-center gap-2 px-4 py-2 rounded-full border-2 font-medium transition duration-200\r\n                    ${isSelected\r\n                      ? 'bg-indigo-700 text-white border-indigo-700 ring-2 ring-indigo-400'\r\n                      : 'bg-white text-indigo-700 border-indigo-300 hover:bg-indigo-100'}\r\n                  `}\r\n                  onClick={() => setSelectedMood(label)}\r\n                  disabled={!isUserAuthenticated}\r\n                >\r\n                  <Icon size={20} className={`${isSelected ? 'text-white' : color}`} />\r\n                  {label}\r\n                </motion.button>\r\n              );\r\n            })}\r\n          </div>\r\n          <textarea\r\n            placeholder=\"Écrivez vos pensées, événements marquants, etc.\"\r\n            className=\"w-full p-4 border border-indigo-300 rounded-xl focus:ring-indigo-400 resize-y\"\r\n            rows={4}\r\n            value={notes}\r\n            onChange={(e) => setNotes(e.target.value)}\r\n            required\r\n          />\r\n          <div className=\"text-center\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"px-6 py-3 bg-indigo-700 text-white rounded-full font-bold hover:bg-indigo-800 transition\"\r\n              disabled={!isUserAuthenticated}\r\n            >\r\n              Enregistrer mon humeur\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n\r\n      {humeurDuJour && (\r\n        <div className=\"bg-white p-6 rounded-xl shadow-md space-y-6 mt-6\">\r\n          <h3 className=\"text-xl font-semibold text-indigo-700\">\r\n            Humeur du {new Date(humeurDuJour.date).toLocaleDateString()}\r\n          </h3>\r\n          <div className=\"flex items-center gap-4\">\r\n            {React.createElement(\r\n              moodsList.find(m => m.label === humeurDuJour.etat)?.Icon || Smile,\r\n              { size: 28, className: moodsList.find(m => m.label === humeurDuJour.etat)?.color }\r\n            )}\r\n            <p className=\"text-2xl font-bold text-indigo-800\">{humeurDuJour.etat}</p>\r\n          </div>\r\n\r\n          {!modeEdition ? (\r\n            <>\r\n              <p className=\"text-indigo-700 whitespace-pre-line\">\r\n                {humeurDuJour.noteJournal || 'Pas de note.'}\r\n              </p>\r\n              <div className=\"flex gap-4 justify-end\">\r\n                <button\r\n                  onClick={() => setModeEdition(true)}\r\n                  className=\"bg-indigo-100 text-indigo-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n                >\r\n                  <Edit2 size={18} /> Modifier\r\n                </button>\r\n                <button\r\n                  onClick={handleSupprimer}\r\n                  className=\"bg-red-100 text-red-700 px-4 py-2 rounded-full flex items-center gap-2\"\r\n                >\r\n                  <Trash2 size={18} /> Supprimer\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <textarea\r\n                rows=\"5\"\r\n                className=\"w-full p-3 border border-indigo-300 rounded-xl\"\r\n                value={editionNotes}\r\n                onChange={(e) => setEditionNotes(e.target.value)}\r\n              />\r\n              <div className=\"flex justify-end gap-4\">\r\n                <button\r\n                  onClick={handleModifier}\r\n                  className=\"bg-indigo-700 text-white px-4 py-2 rounded-full font-bold\"\r\n                >\r\n                  Enregistrer\r\n                </button>\r\n                <button\r\n                  onClick={() => setModeEdition(false)}\r\n                  className=\"bg-gray-300 text-indigo-700 px-4 py-2 rounded-full font-bold\"\r\n                >\r\n                  Annuler\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuiviHumeur;\r\n"
        }
    ]
}