{
    "sourceFile": "src/components/admin/GestionProfessionnels.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1750885048769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750885079742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,364 +1,251 @@\n-// src/pages/AdminFonctionnalites.jsx\r\n import React, { useEffect, useState } from 'react';\r\n-import api from '../../services/api'; \r\n-import { logout } from '../../services/serviceAuth'; \r\n+import {\r\n+  getProfessionnels,\r\n+  downloadDocumentJustificatif,\r\n+  validateProfessionnel,\r\n+} from '../../services/serviceAdmin';\r\n+import api from '../../services/api';\r\n+import { logout } from '../../services/serviceAuth';\r\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import { faPencilAlt, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n+import {\r\n+  faCheckCircle,\r\n+  faTimesCircle,\r\n+  faDownload,\r\n+  faMagnifyingGlass,\r\n+} from '@fortawesome/free-solid-svg-icons';\r\n+import { useNavigate } from 'react-router-dom';\r\n \r\n-function AdminFonctionnalites() {\r\n-    const [fonctionnalites, setFonctionnalites] = useState([]);\r\n-    const [loading, setLoading] = useState(true);\r\n-    const [error, setError] = useState(null);\r\n-    const [successMessage, setSuccessMessage] = useState(null);\r\n+const GestionProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n+  const [error, setError] = useState(null);\r\n+  const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n-    const [nom, setNom] = useState('');\r\n-    const [description, setDescription] = useState('');\r\n-    const [type, setType] = useState('');\r\n-    const [statut, setStatut] = useState(true);\r\n-    const [premium, setPremium] = useState(false);\r\n-    const [lienFichier, setLienFichier] = useState('');\r\n-    const [categorie, setCategorie] = useState('');\r\n-    const [editId, setEditId] = useState(null);\r\n+  const navigate = useNavigate();\r\n \r\n-    const [role, setRole] = useState(null);\r\n-    const [email, setEmail] = useState(null);\r\n+  useEffect(() => {\r\n+    fetchUserInfoAndProfessionnels();\r\n+  }, []);\r\n \r\n-    useEffect(() => {\r\n-        fetchUserInfo();\r\n-    }, []);\r\n+  const fetchUserInfoAndProfessionnels = async () => {\r\n+    try {\r\n+      const res = await api.get('/auth/me');\r\n+      const fetchedRole = res.data.role;\r\n+      setCurrentAdminRole(fetchedRole);\r\n \r\n-    const fetchUserInfo = async () => {\r\n-        try {\r\n-            const res = await api.get('/auth/me'); \r\n-            setRole(res.data.role);\r\n-            setEmail(res.data.email);\r\n-            fetchFonctionnalites();\r\n-        } catch (err) {\r\n-            console.error(err);\r\n-            setError(\"Erreur lors de la récupération des informations utilisateur.\");\r\n-            setLoading(false); \r\n-        }\r\n-    };\r\n+      if (fetchedRole === 'ADMIN') {\r\n+        await fetchProfessionnels();\r\n+      } else {\r\n+        setError(\"Accès refusé.\");\r\n+        handleLogoutAndRedirect();\r\n+      }\r\n+    } catch (err) {\r\n+      handleLogoutAndRedirect();\r\n+    }\r\n+  };\r\n \r\n-    const handleLogout = async () => {\r\n-        try {\r\n-            await logout(); \r\n-        } catch (err) {\r\n-            console.error(err);\r\n-            setError(\"Erreur lors de la déconnexion.\");\r\n-        }\r\n-    };\r\n+  const handleLogoutAndRedirect = async () => {\r\n+    try {\r\n+      await logout();\r\n+    } finally {\r\n+      navigate('/connexion');\r\n+    }\r\n+  };\r\n \r\n-    const fetchFonctionnalites = async () => {\r\n-        setError(null);\r\n-        try {\r\n-            const res = await api.get('/fonctionnalites'); \r\n-            if (Array.isArray(res.data)) {\r\n-                setFonctionnalites(res.data);\r\n-            } else {\r\n-                throw new Error(\"Format de données inattendu de l'API.\");\r\n-            }\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors du chargement des fonctionnalités.\");\r\n-        } finally {\r\n-            setLoading(false);\r\n-        }\r\n-    };\r\n+  const fetchProfessionnels = async () => {\r\n+    try {\r\n+      const data = await getProfessionnels();\r\n+      const filtered = data.filter(p =>\r\n+        ['PSYCHOLOGUE', 'PSYCHIATRE'].includes(p.role)\r\n+      );\r\n+      setProfessionnels(filtered);\r\n+    } catch (err) {\r\n+      setError(\"Erreur lors du chargement des professionnels.\");\r\n+    }\r\n+  };\r\n \r\n-    const handleApiError = (err, defaultMessage) => {\r\n-        console.error(\"Erreur API:\", err);\r\n-        if (err.response) {\r\n-            switch (err.response.status) {\r\n-                case 403:\r\n-                    setError(\"Accès refusé : Vous n'avez pas les permissions nécessaires.\");\r\n-                    break;\r\n-                case 401:\r\n-                    setError(\"Session expirée ou non autorisée. Veuillez vous reconnecter.\");\r\n-                    break;\r\n-                case 404: \r\n-                    setError(\"La ressource demandée n'a pas été trouvée. Vérifiez l'URL ou si le backend est démarré.\");\r\n-                    break;\r\n-                default:\r\n-                    setError(err.response.data?.message || defaultMessage);\r\n-            }\r\n-        } else if (err.request) {\r\n-            setError(\"Aucune réponse du serveur. Vérifiez votre connexion internet ou si le backend est démarré et accessible.\");\r\n-        } else {\r\n-            setError(err.message || defaultMessage);\r\n-        }\r\n-    };\r\n-\r\n-    const resetForm = () => {\r\n-        setNom('');\r\n-        setDescription('');\r\n-        setType('');\r\n-        setStatut(true);\r\n-        setPremium(false);\r\n-        setLienFichier('');\r\n-        setCategorie('');\r\n-        setEditId(null);\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        if (!nom.trim()) {\r\n-            setError(\"Le nom de la fonctionnalité est obligatoire.\");\r\n-            return;\r\n-        }\r\n-\r\n-        const payload = { \r\n-            nom, \r\n-            description, \r\n-            type, \r\n-            statut, \r\n-            premium,\r\n-            lienFichier: lienFichier.trim() !== '' ? lienFichier.trim() : null,\r\n-            categorie: categorie.trim() !== '' ? categorie.trim() : null\r\n-        };\r\n-\r\n-        try {\r\n-            if (editId) {\r\n-                await api.put(`/fonctionnalites/${editId}`, payload);\r\n-                setSuccessMessage(\"Fonctionnalité modifiée avec succès !\");\r\n-            } else {\r\n-                await api.post('/fonctionnalites', payload);\r\n-                setSuccessMessage(\"Fonctionnalité ajoutée avec succès !\");\r\n-            }\r\n-            resetForm();\r\n-            fetchFonctionnalites();\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors de l'enregistrement de la fonctionnalité.\");\r\n-        }\r\n-    };\r\n-\r\n-    const handleEdit = (f) => {\r\n-        setNom(f.nom || '');\r\n-        setDescription(f.description || '');\r\n-        setType(f.type || '');\r\n-        setStatut(!!f.statut);\r\n-        setPremium(!!f.premium);\r\n-        setLienFichier(f.lienFichier || '');\r\n-        setCategorie(f.categorie || '');\r\n-        setEditId(f.id);\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-    };\r\n-\r\n-    const handleDelete = async (id) => {\r\n-        if (!window.confirm(\"Êtes-vous sûr de vouloir supprimer cette fonctionnalité ?\")) return;\r\n-        try {\r\n-            await api.delete(`/fonctionnalites/${id}`);\r\n-            setSuccessMessage(\"Fonctionnalité supprimée avec succès !\");\r\n-            fetchFonctionnalites();\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors de la suppression de la fonctionnalité.\");\r\n-        }\r\n-    };\r\n-\r\n-    if (role && role !== \"ADMIN\") {\r\n-        return (\r\n-            <div className=\"alert alert-danger mt-5 text-center\">\r\n-                Vous n'avez pas la permission d'accéder à cette page.\r\n-            </div>\r\n-        );\r\n+  const handleValidation = async (id, valide) => {\r\n+    try {\r\n+      await validateProfessionnel(id, valide);\r\n+      setProfessionnels(prev =>\r\n+        prev.map(p =>\r\n+          p.id === id ? { ...p, statutValidation: valide ? 'VALIDE' : 'REFUSE' } : p\r\n+        )\r\n+      );\r\n+    } catch {\r\n+      setError(\"Erreur de validation.\");\r\n     }\r\n+  };\r\n \r\n-    if (loading) {\r\n-        return <div className=\"text-center my-5\">Chargement des fonctionnalités...</div>;\r\n+  const handleDownloadDocument = async (filename) => {\r\n+    if (!filename) return;\r\n+    try {\r\n+      const blob = await downloadDocumentJustificatif(filename);\r\n+      const url = window.URL.createObjectURL(new Blob([blob]));\r\n+      const link = document.createElement('a');\r\n+      link.href = url;\r\n+      link.setAttribute('download', filename);\r\n+      document.body.appendChild(link);\r\n+      link.click();\r\n+      link.remove();\r\n+      window.URL.revokeObjectURL(url);\r\n+    } catch {\r\n+      setError(\"Erreur de téléchargement.\");\r\n     }\r\n+  };\r\n \r\n+  // Recherche par nom, prenom, email, specialite\r\n+  const filteredProfessionnels = professionnels.filter(pro => {\r\n+    const term = searchTerm.toLowerCase();\r\n     return (\r\n-        <div className=\"container mt-8 max-w-7xl px-4\">\r\n-            <h1 className=\"text-4xl font-extrabold text-gray-800 mb-8 text-center\">Gestion des Fonctionnalités</h1>\r\n+      (pro.nom?.toLowerCase().includes(term)) ||\r\n+      (pro.prenom?.toLowerCase().includes(term)) ||\r\n+      (pro.email?.toLowerCase().includes(term)) ||\r\n+      (pro.specialite?.toLowerCase().includes(term))\r\n+    );\r\n+  }).filter(pro => {\r\n+    if (filterStatut === 'TOUS') return true;\r\n+    return pro.statutValidation === filterStatut;\r\n+  });\r\n \r\n-            {error && (\r\n-                <div className=\"alert alert-danger alert-dismissible fade show mb-4\">\r\n-                    {error}\r\n-                    <button type=\"button\" className=\"btn-close\" onClick={() => setError(null)}></button>\r\n-                </div>\r\n-            )}\r\n+  return (\r\n+    <div className=\"p-4\">\r\n+      {/* Barre de recherche */}\r\n+      <div className=\"mb-6 max-w-md mx-auto\">\r\n+        <div className=\"relative\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n+            value={searchTerm}\r\n+            onChange={e => setSearchTerm(e.target.value)}\r\n+            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+          />\r\n+          <FontAwesomeIcon\r\n+            icon={faMagnifyingGlass}\r\n+            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n \r\n-            {successMessage && (\r\n-                <div className=\"alert alert-success alert-dismissible fade show mb-4\">\r\n-                    {successMessage}\r\n-                    <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage(null)}></button>\r\n-                </div>\r\n-            )}\r\n+      {/* Filtre par statut */}\r\n+      <div className=\"flex justify-center space-x-4 mb-6\">\r\n+        {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n+          <button\r\n+            key={status}\r\n+            onClick={() => setFilterStatut(status)}\r\n+            className={`px-4 py-2 rounded-md font-semibold border\r\n+              ${filterStatut === status\r\n+                ? 'bg-indigo-600 text-white border-indigo-600'\r\n+                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n+            `}\r\n+          >\r\n+            {status === 'TOUS' ? 'Tous' :\r\n+             status === 'EN_ATTENTE' ? 'En attente' :\r\n+             status === 'VALIDE' ? 'Validés' :\r\n+             'Refusés'}\r\n+          </button>\r\n+        ))}\r\n+      </div>\r\n \r\n-            <form onSubmit={handleSubmit} className=\"mb-8 bg-white p-6 rounded-lg shadow-lg border border-gray-200\">\r\n-                <h3 className=\"mb-6 text-2xl font-semibold text-gray-700\">{editId ? 'Modifier une fonctionnalité' : 'Ajouter une fonctionnalité'}</h3>\r\n-                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n-                    <div>\r\n-                        <label htmlFor=\"nom\" className=\"block text-sm font-medium text-gray-700\">Nom <span className=\"text-red-500\">*</span></label>\r\n-                        <input\r\n-                            type=\"text\"\r\n-                            id=\"nom\"\r\n-                            value={nom}\r\n-                            onChange={(e) => setNom(e.target.value)}\r\n-                            required\r\n-                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                        />\r\n-                    </div>\r\n-                    <div>\r\n-                        <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type <span className=\"text-red-500\">*</span></label>\r\n-                        <select\r\n-                            id=\"type\"\r\n-                            value={type}\r\n-                            onChange={(e) => setType(e.target.value)}\r\n-                            required\r\n-                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                        >\r\n-                            <option value=\"\">Sélectionnez un type...</option>\r\n-                            <option value=\"citation\">Citation</option>\r\n-                            <option value=\"podcast\">Podcast</option>\r\n-                            <option value=\"article\">Article</option>\r\n-                            <option value=\"video\">Vidéo</option>\r\n-                            <option value=\"outil\">Outil interactif</option>\r\n-                            <option value=\"guide_pratique\">Guide Pratique</option>\r\n-                            <option value=\"journaling_prompt\">Prompt Journaling</option>\r\n-                            <option value=\"exercice_texte\">Exercice de Relaxation (texte)</option>\r\n-                            <option value=\"challenge\">Défi Bien-être</option>\r\n-                        </select>\r\n-                    </div>\r\n-                    <div>\r\n-                        <label htmlFor=\"categorie\" className=\"block text-sm font-medium text-gray-700\">Catégorie (Optionnel)</label>\r\n-                        <input\r\n-                            type=\"text\"\r\n-                            id=\"categorie\"\r\n-                            value={categorie}\r\n-                            onChange={(e) => setCategorie(e.target.value)}\r\n-                            placeholder=\"Ex: Méditation, Sommeil\"\r\n-                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                        />\r\n-                    </div>\r\n-                </div>\r\n-                <div className=\"mt-6\">\r\n-                    <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">Description / Contenu</label>\r\n-                    <textarea\r\n-                        id=\"description\"\r\n-                        rows=\"4\"\r\n-                        value={description}\r\n-                        onChange={(e) => setDescription(e.target.value)}\r\n-                        placeholder=\"Description détaillée ou contenu de la ressource\"\r\n-                        className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                    />\r\n-                </div>\r\n-                <div className=\"mt-6\">\r\n-                    <label htmlFor=\"lienFichier\" className=\"block text-sm font-medium text-gray-700 mb-1\">Lien du Fichier (URL pour Vidéo/Podcast/Outil, optionnel)</label>\r\n-                    <input\r\n-                        type=\"url\"\r\n-                        id=\"lienFichier\"\r\n-                        value={lienFichier}\r\n-                        onChange={(e) => setLienFichier(e.target.value)}\r\n-                        placeholder=\"Ex: https://youtube.com/ma-video\"\r\n-                        className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                    />\r\n-                </div>\r\n-                <div className=\"flex items-center space-x-8 mt-6\">\r\n-                    <label className=\"inline-flex items-center\">\r\n-                        <input\r\n-                            type=\"checkbox\"\r\n-                            checked={statut}\r\n-                            onChange={() => setStatut(!statut)}\r\n-                            className=\"form-checkbox h-5 w-5 text-indigo-600\"\r\n-                        />\r\n-                        <span className=\"ml-2 text-gray-700\">Actif</span>\r\n-                    </label>\r\n-                    <label className=\"inline-flex items-center\">\r\n-                        <input\r\n-                            type=\"checkbox\"\r\n-                            checked={premium}\r\n-                            onChange={() => setPremium(!premium)}\r\n-                            className=\"form-checkbox h-5 w-5 text-yellow-500\"\r\n-                        />\r\n-                        <span className=\"ml-2 text-gray-700\">Premium</span>\r\n-                    </label>\r\n-                </div>\r\n-                <div className=\"mt-8 flex justify-end space-x-4\">\r\n-                    <button\r\n-                        type=\"submit\"\r\n-                        className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+      {/* Tableau */}\r\n+      {filteredProfessionnels.length === 0 ? (\r\n+        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n+      ) : (\r\n+        <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n+          <table className=\"min-w-full divide-y divide-gray-200\">\r\n+            <thead className=\"bg-gray-50\">\r\n+              <tr>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Nom Prénom\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Email\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Téléphone\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Spécialité\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Statut\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Document\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Actions\r\n+                </th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n+              {filteredProfessionnels.map(pro => (\r\n+                <tr key={pro.id}>\r\n+                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n+                    {pro.nom} {pro.prenom}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm\">\r\n+                    <span\r\n+                      className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n+                        pro.statutValidation === 'EN_ATTENTE'\r\n+                          ? 'bg-yellow-100 text-yellow-800'\r\n+                          : pro.statutValidation === 'VALIDE'\r\n+                          ? 'bg-green-100 text-green-800'\r\n+                          : 'bg-red-100 text-red-800'\r\n+                      }`}\r\n                     >\r\n-                        <FontAwesomeIcon icon={editId ? faPencilAlt : faPlus} className=\"mr-2\" />\r\n-                        {editId ? 'Modifier' : 'Ajouter'}\r\n-                    </button>\r\n-                    {editId && (\r\n+                      {pro.statutValidation.replace('_', ' ')}\r\n+                    </span>\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {pro.documentJustificatif ? (\r\n+                      <button\r\n+                        onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n+                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n+                        title=\"Télécharger\"\r\n+                      >\r\n+                        <FontAwesomeIcon icon={faDownload} />\r\n+                      </button>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-400\">N/A</span>\r\n+                    )}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n+                      <>\r\n                         <button\r\n-                            type=\"button\"\r\n-                            onClick={resetForm}\r\n-                            className=\"rounded-md bg-gray-200 px-6 py-2 text-gray-700 shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n+                          onClick={() => handleValidation(pro.id, true)}\r\n+                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n+                          title=\"Valider\"\r\n                         >\r\n-                            Annuler\r\n+                          <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n                         </button>\r\n+                        {pro.statutValidation === 'EN_ATTENTE' && (\r\n+                          <button\r\n+                            onClick={() => handleValidation(pro.id, false)}\r\n+                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n+                            title=\"Refuser\"\r\n+                          >\r\n+                            <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n+                          </button>\r\n+                        )}\r\n+                      </>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n                     )}\r\n-                </div>\r\n-            </form>\r\n-\r\n-            {fonctionnalites.length === 0 ? (\r\n-                <div className=\"text-center p-6 bg-blue-50 rounded-md shadow-sm text-blue-700\">Aucune fonctionnalité trouvée.</div>\r\n-            ) : (\r\n-                <div className=\"overflow-x-auto rounded-lg shadow-lg border border-gray-200\">\r\n-                    <table className=\"min-w-full bg-white\">\r\n-                        <thead className=\"bg-indigo-600 text-white\">\r\n-                            <tr>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">ID</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Nom</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Type</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Description</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Lien Fichier</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Catégorie</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Statut</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Premium</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Actions</th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {fonctionnalites.map((f) => (\r\n-                                <tr key={f.id} className=\"hover:bg-gray-50 border-b border-gray-100\">\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.id}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.nom}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.type}</td>\r\n-                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-gray-600\">{f.description}</td>\r\n-                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-blue-600\">{f.lienFichier}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.categorie || '-'}</td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n-                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.statut ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\r\n-                                            {f.statut ? 'Actif' : 'Inactif'}\r\n-                                        </span>\r\n-                                    </td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n-                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.premium ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>\r\n-                                            {f.premium ? 'Oui' : 'Non'}\r\n-                                        </span>\r\n-                                    </td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm space-x-3\">\r\n-                                        <button\r\n-                                            onClick={() => handleEdit(f)}\r\n-                                            aria-label={`Modifier ${f.nom}`}\r\n-                                            className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\r\n-                                            style={{ outline: 'none' }}\r\n-                                        >\r\n-                                            <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" />\r\n-                                        </button>\r\n-                                        <button\r\n-                                            onClick={() => handleDelete(f.id)}\r\n-                                            aria-label={`Supprimer ${f.nom}`}\r\n-                                            className=\"text-red-600 hover:text-red-900 focus:outline-none\"\r\n-                                            style={{ outline: 'none' }}\r\n-                                        >\r\n-                                            <FontAwesomeIcon icon={faTrash} size=\"lg\" />\r\n-                                        </button>\r\n-                                    </td>\r\n-                                </tr>\r\n-                            ))}\r\n-                        </tbody>\r\n-                    </table>\r\n-                </div>\r\n-            )}\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+            </tbody>\r\n+          </table>\r\n         </div>\r\n-    );\r\n-}\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-export default AdminFonctionnalites;\r\n+export default GestionProfessionnels;\r\n"
                },
                {
                    "date": 1750885486710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,251 +1,387 @@\n import React, { useEffect, useState } from 'react';\r\n-import {\r\n-  getProfessionnels,\r\n-  downloadDocumentJustificatif,\r\n-  validateProfessionnel,\r\n-} from '../../services/serviceAdmin';\r\n-import api from '../../services/api';\r\n-import { logout } from '../../services/serviceAuth';\r\n+import api from '../../services/api'; \r\n+import { logout } from '../../services/serviceAuth'; \r\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import {\r\n-  faCheckCircle,\r\n-  faTimesCircle,\r\n-  faDownload,\r\n-  faMagnifyingGlass,\r\n-} from '@fortawesome/free-solid-svg-icons';\r\n-import { useNavigate } from 'react-router-dom';\r\n+import { faPencilAlt, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n \r\n-const GestionProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [searchTerm, setSearchTerm] = useState('');\r\n-  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n-  const [error, setError] = useState(null);\r\n-  const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n+function AdminFonctionnalites() {\r\n+    const [fonctionnalites, setFonctionnalites] = useState([]);\r\n+    const [loading, setLoading] = useState(true);\r\n+    const [error, setError] = useState(null);\r\n+    const [successMessage, setSuccessMessage] = useState(null);\r\n \r\n-  const navigate = useNavigate();\r\n+    const [nom, setNom] = useState('');\r\n+    const [description, setDescription] = useState('');\r\n+    const [type, setType] = useState('');\r\n+    const [statut, setStatut] = useState(true);\r\n+    const [premium, setPremium] = useState(false);\r\n+    const [lienFichier, setLienFichier] = useState('');\r\n+    const [categorie, setCategorie] = useState('');\r\n+    const [editId, setEditId] = useState(null);\r\n \r\n-  useEffect(() => {\r\n-    fetchUserInfoAndProfessionnels();\r\n-  }, []);\r\n+    const [role, setRole] = useState(null);\r\n+    const [email, setEmail] = useState(null);\r\n \r\n-  const fetchUserInfoAndProfessionnels = async () => {\r\n-    try {\r\n-      const res = await api.get('/auth/me');\r\n-      const fetchedRole = res.data.role;\r\n-      setCurrentAdminRole(fetchedRole);\r\n+    // Etat pour afficher/masquer le formulaire\r\n+    const [showForm, setShowForm] = useState(false);\r\n \r\n-      if (fetchedRole === 'ADMIN') {\r\n-        await fetchProfessionnels();\r\n-      } else {\r\n-        setError(\"Accès refusé.\");\r\n-        handleLogoutAndRedirect();\r\n-      }\r\n-    } catch (err) {\r\n-      handleLogoutAndRedirect();\r\n-    }\r\n-  };\r\n+    useEffect(() => {\r\n+        fetchUserInfo();\r\n+    }, []);\r\n \r\n-  const handleLogoutAndRedirect = async () => {\r\n-    try {\r\n-      await logout();\r\n-    } finally {\r\n-      navigate('/connexion');\r\n-    }\r\n-  };\r\n+    // Gestion disparition automatique des messages succès après 3s\r\n+    useEffect(() => {\r\n+        if (successMessage) {\r\n+            const timer = setTimeout(() => setSuccessMessage(null), 3000);\r\n+            return () => clearTimeout(timer);\r\n+        }\r\n+    }, [successMessage]);\r\n \r\n-  const fetchProfessionnels = async () => {\r\n-    try {\r\n-      const data = await getProfessionnels();\r\n-      const filtered = data.filter(p =>\r\n-        ['PSYCHOLOGUE', 'PSYCHIATRE'].includes(p.role)\r\n-      );\r\n-      setProfessionnels(filtered);\r\n-    } catch (err) {\r\n-      setError(\"Erreur lors du chargement des professionnels.\");\r\n-    }\r\n-  };\r\n+    const fetchUserInfo = async () => {\r\n+        try {\r\n+            const res = await api.get('/auth/me'); \r\n+            setRole(res.data.role);\r\n+            setEmail(res.data.email);\r\n+            fetchFonctionnalites();\r\n+        } catch (err) {\r\n+            console.error(err);\r\n+            setError(\"Erreur lors de la récupération des informations utilisateur.\");\r\n+            setLoading(false); \r\n+        }\r\n+    };\r\n \r\n-  const handleValidation = async (id, valide) => {\r\n-    try {\r\n-      await validateProfessionnel(id, valide);\r\n-      setProfessionnels(prev =>\r\n-        prev.map(p =>\r\n-          p.id === id ? { ...p, statutValidation: valide ? 'VALIDE' : 'REFUSE' } : p\r\n-        )\r\n-      );\r\n-    } catch {\r\n-      setError(\"Erreur de validation.\");\r\n+    const fetchFonctionnalites = async () => {\r\n+        setError(null);\r\n+        try {\r\n+            const res = await api.get('/fonctionnalites'); \r\n+            if (Array.isArray(res.data)) {\r\n+                setFonctionnalites(res.data);\r\n+            } else {\r\n+                throw new Error(\"Format de données inattendu de l'API.\");\r\n+            }\r\n+        } catch (err) {\r\n+            handleApiError(err, \"Erreur lors du chargement des fonctionnalités.\");\r\n+        } finally {\r\n+            setLoading(false);\r\n+        }\r\n+    };\r\n+\r\n+    const handleApiError = (err, defaultMessage) => {\r\n+        console.error(\"Erreur API:\", err);\r\n+        if (err.response) {\r\n+            switch (err.response.status) {\r\n+                case 403:\r\n+                    setError(\"Accès refusé : Vous n'avez pas les permissions nécessaires.\");\r\n+                    break;\r\n+                case 401:\r\n+                    setError(\"Session expirée ou non autorisée. Veuillez vous reconnecter.\");\r\n+                    break;\r\n+                case 404: \r\n+                    setError(\"La ressource demandée n'a pas été trouvée. Vérifiez l'URL ou si le backend est démarré.\");\r\n+                    break;\r\n+                default:\r\n+                    setError(err.response.data?.message || defaultMessage);\r\n+            }\r\n+        } else if (err.request) {\r\n+            setError(\"Aucune réponse du serveur. Vérifiez votre connexion internet ou si le backend est démarré et accessible.\");\r\n+        } else {\r\n+            setError(err.message || defaultMessage);\r\n+        }\r\n+    };\r\n+\r\n+    const resetForm = () => {\r\n+        setNom('');\r\n+        setDescription('');\r\n+        setType('');\r\n+        setStatut(true);\r\n+        setPremium(false);\r\n+        setLienFichier('');\r\n+        setCategorie('');\r\n+        setEditId(null);\r\n+        setError(null);\r\n+        // On ne reset pas successMessage ici pour éviter de le masquer immédiatement\r\n+    };\r\n+\r\n+    const handleSubmit = async (e) => {\r\n+        e.preventDefault();\r\n+        if (!nom.trim()) {\r\n+            setError(\"Le nom de la fonctionnalité est obligatoire.\");\r\n+            return;\r\n+        }\r\n+\r\n+        const payload = { \r\n+            nom, \r\n+            description, \r\n+            type, \r\n+            statut, \r\n+            premium,\r\n+            lienFichier: lienFichier.trim() !== '' ? lienFichier.trim() : null,\r\n+            categorie: categorie.trim() !== '' ? categorie.trim() : null\r\n+        };\r\n+\r\n+        try {\r\n+            if (editId) {\r\n+                await api.put(`/fonctionnalites/${editId}`, payload);\r\n+                setSuccessMessage(\"Fonctionnalité modifiée avec succès !\");\r\n+            } else {\r\n+                await api.post('/fonctionnalites', payload);\r\n+                setSuccessMessage(\"Fonctionnalité ajoutée avec succès !\");\r\n+            }\r\n+            resetForm();\r\n+            setShowForm(false); // Cache le formulaire après soumission réussie\r\n+            fetchFonctionnalites();\r\n+        } catch (err) {\r\n+            handleApiError(err, \"Erreur lors de l'enregistrement de la fonctionnalité.\");\r\n+        }\r\n+    };\r\n+\r\n+    const handleEdit = (f) => {\r\n+        setNom(f.nom || '');\r\n+        setDescription(f.description || '');\r\n+        setType(f.type || '');\r\n+        setStatut(!!f.statut);\r\n+        setPremium(!!f.premium);\r\n+        setLienFichier(f.lienFichier || '');\r\n+        setCategorie(f.categorie || '');\r\n+        setEditId(f.id);\r\n+        setError(null);\r\n+        setSuccessMessage(null);\r\n+        setShowForm(true); // Affiche le formulaire en mode édition\r\n+    };\r\n+\r\n+    const handleDelete = async (id) => {\r\n+        if (!window.confirm(\"Êtes-vous sûr de vouloir supprimer cette fonctionnalité ?\")) return;\r\n+        try {\r\n+            await api.delete(`/fonctionnalites/${id}`);\r\n+            setSuccessMessage(\"Fonctionnalité supprimée avec succès !\");\r\n+            fetchFonctionnalites();\r\n+        } catch (err) {\r\n+            handleApiError(err, \"Erreur lors de la suppression de la fonctionnalité.\");\r\n+        }\r\n+    };\r\n+\r\n+    if (role && role !== \"ADMIN\") {\r\n+        return (\r\n+            <div className=\"alert alert-danger mt-5 text-center\">\r\n+                Vous n'avez pas la permission d'accéder à cette page.\r\n+            </div>\r\n+        );\r\n     }\r\n-  };\r\n \r\n-  const handleDownloadDocument = async (filename) => {\r\n-    if (!filename) return;\r\n-    try {\r\n-      const blob = await downloadDocumentJustificatif(filename);\r\n-      const url = window.URL.createObjectURL(new Blob([blob]));\r\n-      const link = document.createElement('a');\r\n-      link.href = url;\r\n-      link.setAttribute('download', filename);\r\n-      document.body.appendChild(link);\r\n-      link.click();\r\n-      link.remove();\r\n-      window.URL.revokeObjectURL(url);\r\n-    } catch {\r\n-      setError(\"Erreur de téléchargement.\");\r\n+    if (loading) {\r\n+        return <div className=\"text-center my-5\">Chargement des fonctionnalités...</div>;\r\n     }\r\n-  };\r\n \r\n-  // Recherche par nom, prenom, email, specialite\r\n-  const filteredProfessionnels = professionnels.filter(pro => {\r\n-    const term = searchTerm.toLowerCase();\r\n     return (\r\n-      (pro.nom?.toLowerCase().includes(term)) ||\r\n-      (pro.prenom?.toLowerCase().includes(term)) ||\r\n-      (pro.email?.toLowerCase().includes(term)) ||\r\n-      (pro.specialite?.toLowerCase().includes(term))\r\n-    );\r\n-  }).filter(pro => {\r\n-    if (filterStatut === 'TOUS') return true;\r\n-    return pro.statutValidation === filterStatut;\r\n-  });\r\n+        <div className=\"container mt-8 max-w-7xl px-4\">\r\n+            <h1 className=\"text-4xl font-extrabold text-gray-800 mb-8 text-center\">Gestion des Fonctionnalités</h1>\r\n \r\n-  return (\r\n-    <div className=\"p-4\">\r\n-      {/* Barre de recherche */}\r\n-      <div className=\"mb-6 max-w-md mx-auto\">\r\n-        <div className=\"relative\">\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n-            value={searchTerm}\r\n-            onChange={e => setSearchTerm(e.target.value)}\r\n-            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n-          />\r\n-          <FontAwesomeIcon\r\n-            icon={faMagnifyingGlass}\r\n-            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n-          />\r\n-        </div>\r\n-      </div>\r\n+            {error && (\r\n+                <div className=\"alert alert-danger alert-dismissible fade show mb-4\">\r\n+                    {error}\r\n+                    <button type=\"button\" className=\"btn-close\" onClick={() => setError(null)}></button>\r\n+                </div>\r\n+            )}\r\n \r\n-      {/* Filtre par statut */}\r\n-      <div className=\"flex justify-center space-x-4 mb-6\">\r\n-        {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n-          <button\r\n-            key={status}\r\n-            onClick={() => setFilterStatut(status)}\r\n-            className={`px-4 py-2 rounded-md font-semibold border\r\n-              ${filterStatut === status\r\n-                ? 'bg-indigo-600 text-white border-indigo-600'\r\n-                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n-            `}\r\n-          >\r\n-            {status === 'TOUS' ? 'Tous' :\r\n-             status === 'EN_ATTENTE' ? 'En attente' :\r\n-             status === 'VALIDE' ? 'Validés' :\r\n-             'Refusés'}\r\n-          </button>\r\n-        ))}\r\n-      </div>\r\n+            {successMessage && (\r\n+                <div className=\"alert alert-success alert-dismissible fade show mb-4\">\r\n+                    {successMessage}\r\n+                    <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage(null)}></button>\r\n+                </div>\r\n+            )}\r\n \r\n-      {/* Tableau */}\r\n-      {filteredProfessionnels.length === 0 ? (\r\n-        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n-      ) : (\r\n-        <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n-          <table className=\"min-w-full divide-y divide-gray-200\">\r\n-            <thead className=\"bg-gray-50\">\r\n-              <tr>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Nom Prénom\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Email\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Téléphone\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Spécialité\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Statut\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Document\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Actions\r\n-                </th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n-              {filteredProfessionnels.map(pro => (\r\n-                <tr key={pro.id}>\r\n-                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n-                    {pro.nom} {pro.prenom}\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm\">\r\n-                    <span\r\n-                      className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n-                        pro.statutValidation === 'EN_ATTENTE'\r\n-                          ? 'bg-yellow-100 text-yellow-800'\r\n-                          : pro.statutValidation === 'VALIDE'\r\n-                          ? 'bg-green-100 text-green-800'\r\n-                          : 'bg-red-100 text-red-800'\r\n-                      }`}\r\n+            {/* Bouton pour afficher le formulaire d'ajout */}\r\n+            {!showForm && (\r\n+                <div className=\"mb-6 flex justify-end\">\r\n+                    <button\r\n+                        onClick={() => {\r\n+                            resetForm();\r\n+                            setShowForm(true);\r\n+                        }}\r\n+                        className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n                     >\r\n-                      {pro.statutValidation.replace('_', ' ')}\r\n-                    </span>\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n-                    {pro.documentJustificatif ? (\r\n-                      <button\r\n-                        onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n-                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n-                        title=\"Télécharger\"\r\n-                      >\r\n-                        <FontAwesomeIcon icon={faDownload} />\r\n-                      </button>\r\n-                    ) : (\r\n-                      <span className=\"text-gray-400\">N/A</span>\r\n-                    )}\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n-                    {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n-                      <>\r\n+                        <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\r\n+                        Ajouter une fonctionnalité\r\n+                    </button>\r\n+                </div>\r\n+            )}\r\n+\r\n+            {/* Formulaire d'ajout/modification de fonctionnalité */}\r\n+            {showForm && (\r\n+                <form onSubmit={handleSubmit} className=\"mb-8 bg-white p-6 rounded-lg shadow-lg border border-gray-200\">\r\n+                    <h3 className=\"mb-6 text-2xl font-semibold text-gray-700\">{editId ? 'Modifier une fonctionnalité' : 'Ajouter une fonctionnalité'}</h3>\r\n+                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n+                        <div>\r\n+                            <label htmlFor=\"nom\" className=\"block text-sm font-medium text-gray-700\">Nom <span className=\"text-red-500\">*</span></label>\r\n+                            <input\r\n+                                type=\"text\"\r\n+                                id=\"nom\"\r\n+                                value={nom}\r\n+                                onChange={(e) => setNom(e.target.value)}\r\n+                                required\r\n+                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n+                            />\r\n+                        </div>\r\n+                        <div>\r\n+                            <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type <span className=\"text-red-500\">*</span></label>\r\n+                            <select\r\n+                                id=\"type\"\r\n+                                value={type}\r\n+                                onChange={(e) => setType(e.target.value)}\r\n+                                required\r\n+                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n+                            >\r\n+                                <option value=\"\">Sélectionnez un type...</option>\r\n+                                <option value=\"citation\">Citation</option>\r\n+                                <option value=\"podcast\">Podcast</option>\r\n+                                <option value=\"article\">Article</option>\r\n+                                <option value=\"video\">Vidéo</option>\r\n+                                <option value=\"outil\">Outil interactif</option>\r\n+                                <option value=\"guide_pratique\">Guide Pratique</option>\r\n+                                <option value=\"journaling_prompt\">Prompt Journaling</option>\r\n+                                <option value=\"exercice_texte\">Exercice de Relaxation (texte)</option>\r\n+                                <option value=\"challenge\">Défi Bien-être</option>\r\n+                            </select>\r\n+                        </div>\r\n+                        <div>\r\n+                            <label htmlFor=\"categorie\" className=\"block text-sm font-medium text-gray-700\">Catégorie (Optionnel)</label>\r\n+                            <input\r\n+                                type=\"text\"\r\n+                                id=\"categorie\"\r\n+                                value={categorie}\r\n+                                onChange={(e) => setCategorie(e.target.value)}\r\n+                                placeholder=\"Ex: Méditation, Sommeil\"\r\n+                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n+                            />\r\n+                        </div>\r\n+                    </div>\r\n+                    <div className=\"mt-6\">\r\n+                        <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">Description / Contenu</label>\r\n+                        <textarea\r\n+                            id=\"description\"\r\n+                            rows=\"4\"\r\n+                            value={description}\r\n+                            onChange={(e) => setDescription(e.target.value)}\r\n+                            placeholder=\"Description détaillée ou contenu de la ressource\"\r\n+                            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n+                        />\r\n+                    </div>\r\n+                    <div className=\"mt-6\">\r\n+                        <label htmlFor=\"lienFichier\" className=\"block text-sm font-medium text-gray-700 mb-1\">Lien du Fichier (URL pour Vidéo/Podcast/Outil, optionnel)</label>\r\n+                        <input\r\n+                            type=\"url\"\r\n+                            id=\"lienFichier\"\r\n+                            value={lienFichier}\r\n+                            onChange={(e) => setLienFichier(e.target.value)}\r\n+                            placeholder=\"Ex: https://youtube.com/ma-video\"\r\n+                            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n+                        />\r\n+                    </div>\r\n+                    <div className=\"flex items-center space-x-8 mt-6\">\r\n+                        <label className=\"inline-flex items-center\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={statut}\r\n+                                onChange={() => setStatut(!statut)}\r\n+                                className=\"form-checkbox h-5 w-5 text-indigo-600\"\r\n+                            />\r\n+                            <span className=\"ml-2 text-gray-700\">Actif</span>\r\n+                        </label>\r\n+                        <label className=\"inline-flex items-center\">\r\n+                            <input\r\n+                                type=\"checkbox\"\r\n+                                checked={premium}\r\n+                                onChange={() => setPremium(!premium)}\r\n+                                className=\"form-checkbox h-5 w-5 text-yellow-500\"\r\n+                            />\r\n+                            <span className=\"ml-2 text-gray-700\">Premium</span>\r\n+                        </label>\r\n+                    </div>\r\n+                    <div className=\"mt-8 flex justify-end space-x-4\">\r\n                         <button\r\n-                          onClick={() => handleValidation(pro.id, true)}\r\n-                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n-                          title=\"Valider\"\r\n+                            type=\"submit\"\r\n+                            className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n                         >\r\n-                          <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n+                            <FontAwesomeIcon icon={editId ? faPencilAlt : faPlus} className=\"mr-2\" />\r\n+                            {editId ? 'Modifier' : 'Ajouter'}\r\n                         </button>\r\n-                        {pro.statutValidation === 'EN_ATTENTE' && (\r\n-                          <button\r\n-                            onClick={() => handleValidation(pro.id, false)}\r\n-                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n-                            title=\"Refuser\"\r\n-                          >\r\n-                            <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n-                          </button>\r\n-                        )}\r\n-                      </>\r\n-                    ) : (\r\n-                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n-                    )}\r\n-                  </td>\r\n-                </tr>\r\n-              ))}\r\n-            </tbody>\r\n-          </table>\r\n+                        <button\r\n+                            type=\"button\"\r\n+                            onClick={() => {\r\n+                                resetForm();\r\n+                                setShowForm(false);\r\n+                            }}\r\n+                            className=\"rounded-md bg-gray-200 px-6 py-2 text-gray-700 shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n+                        >\r\n+                            Annuler\r\n+                        </button>\r\n+                    </div>\r\n+                </form>\r\n+            )}\r\n+\r\n+            {fonctionnalites.length === 0 ? (\r\n+                <div className=\"text-center p-6 bg-blue-50 rounded-md shadow-sm text-blue-700\">Aucune fonctionnalité trouvée.</div>\r\n+            ) : (\r\n+                <div className=\"overflow-x-auto rounded-lg shadow-lg border border-gray-200\">\r\n+                    <table className=\"min-w-full bg-white\">\r\n+                        <thead className=\"bg-indigo-600 text-white\">\r\n+                            <tr>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">ID</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Nom</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Type</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Description</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Lien Fichier</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Catégorie</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Statut</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Premium</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Actions</th>\r\n+                            </tr>\r\n+                        </thead>\r\n+                        <tbody>\r\n+                            {fonctionnalites.map((f) => (\r\n+                                <tr key={f.id} className=\"hover:bg-gray-50\">\r\n+                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.id}</td>\r\n+                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.nom}</td>\r\n+                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.type}</td>\r\n+                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-gray-600\">{f.description}</td>\r\n+                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-blue-600\">{f.lienFichier}</td>\r\n+                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.categorie || '-'}</td>\r\n+                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n+                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.statut ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\r\n+                                            {f.statut ? 'Actif' : 'Inactif'}\r\n+                                        </span>\r\n+                                    </td>\r\n+                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n+                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.premium ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>\r\n+                                            {f.premium ? 'Oui' : 'Non'}\r\n+                                        </span>\r\n+                                    </td>\r\n+                                    <td className=\"px-5 py-4 text-center text-sm space-x-3\">\r\n+                                        <button\r\n+                                            onClick={() => handleEdit(f)}\r\n+                                            aria-label={`Modifier ${f.nom}`}\r\n+                                            className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\r\n+                                            style={{ outline: 'none' }}\r\n+                                        >\r\n+                                            <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" />\r\n+                                        </button>\r\n+                                        <button\r\n+                                            onClick={() => handleDelete(f.id)}\r\n+                                            aria-label={`Supprimer ${f.nom}`}\r\n+                                            className=\"text-red-600 hover:text-red-900 focus:outline-none\"\r\n+                                            style={{ outline: 'none' }}\r\n+                                        >\r\n+                                            <FontAwesomeIcon icon={faTrash} size=\"lg\" />\r\n+                                        </button>\r\n+                                    </td>\r\n+                                </tr>\r\n+                            ))}\r\n+                        </tbody>\r\n+                    </table>\r\n+                </div>\r\n+            )}\r\n         </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n+    );\r\n+}\r\n \r\n-export default GestionProfessionnels;\r\n+export default AdminFonctionnalites;\r\n"
                },
                {
                    "date": 1750885661525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import React, { useEffect, useState } from 'react';\r\n import api from '../../services/api'; \r\n-import { logout } from '../../services/serviceAuth'; \r\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n import { faPencilAlt, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n \r\n function AdminFonctionnalites() {\r\n@@ -19,18 +18,18 @@\n     const [categorie, setCategorie] = useState('');\r\n     const [editId, setEditId] = useState(null);\r\n \r\n     const [role, setRole] = useState(null);\r\n-    const [email, setEmail] = useState(null);\r\n \r\n-    // Etat pour afficher/masquer le formulaire\r\n     const [showForm, setShowForm] = useState(false);\r\n \r\n+    // État pour gérer la modal de confirmation de suppression\r\n+    const [modalDeleteId, setModalDeleteId] = useState(null);\r\n+\r\n     useEffect(() => {\r\n         fetchUserInfo();\r\n     }, []);\r\n \r\n-    // Gestion disparition automatique des messages succès après 3s\r\n     useEffect(() => {\r\n         if (successMessage) {\r\n             const timer = setTimeout(() => setSuccessMessage(null), 3000);\r\n             return () => clearTimeout(timer);\r\n@@ -40,9 +39,8 @@\n     const fetchUserInfo = async () => {\r\n         try {\r\n             const res = await api.get('/auth/me'); \r\n             setRole(res.data.role);\r\n-            setEmail(res.data.email);\r\n             fetchFonctionnalites();\r\n         } catch (err) {\r\n             console.error(err);\r\n             setError(\"Erreur lors de la récupération des informations utilisateur.\");\r\n@@ -98,9 +96,8 @@\n         setLienFichier('');\r\n         setCategorie('');\r\n         setEditId(null);\r\n         setError(null);\r\n-        // On ne reset pas successMessage ici pour éviter de le masquer immédiatement\r\n     };\r\n \r\n     const handleSubmit = async (e) => {\r\n         e.preventDefault();\r\n@@ -127,9 +124,9 @@\n                 await api.post('/fonctionnalites', payload);\r\n                 setSuccessMessage(\"Fonctionnalité ajoutée avec succès !\");\r\n             }\r\n             resetForm();\r\n-            setShowForm(false); // Cache le formulaire après soumission réussie\r\n+            setShowForm(false);\r\n             fetchFonctionnalites();\r\n         } catch (err) {\r\n             handleApiError(err, \"Erreur lors de l'enregistrement de la fonctionnalité.\");\r\n         }\r\n@@ -145,19 +142,32 @@\n         setCategorie(f.categorie || '');\r\n         setEditId(f.id);\r\n         setError(null);\r\n         setSuccessMessage(null);\r\n-        setShowForm(true); // Affiche le formulaire en mode édition\r\n+        setShowForm(true);\r\n     };\r\n \r\n-    const handleDelete = async (id) => {\r\n-        if (!window.confirm(\"Êtes-vous sûr de vouloir supprimer cette fonctionnalité ?\")) return;\r\n+    // Ouvre la modal en mettant l'id à supprimer\r\n+    const openDeleteModal = (id) => {\r\n+        setModalDeleteId(id);\r\n+    };\r\n+\r\n+    // Ferme la modal\r\n+    const closeDeleteModal = () => {\r\n+        setModalDeleteId(null);\r\n+    };\r\n+\r\n+    // Confirme suppression\r\n+    const confirmDelete = async () => {\r\n+        if (!modalDeleteId) return;\r\n         try {\r\n-            await api.delete(`/fonctionnalites/${id}`);\r\n+            await api.delete(`/fonctionnalites/${modalDeleteId}`);\r\n             setSuccessMessage(\"Fonctionnalité supprimée avec succès !\");\r\n             fetchFonctionnalites();\r\n+            closeDeleteModal();\r\n         } catch (err) {\r\n             handleApiError(err, \"Erreur lors de la suppression de la fonctionnalité.\");\r\n+            closeDeleteModal();\r\n         }\r\n     };\r\n \r\n     if (role && role !== \"ADMIN\") {\r\n@@ -189,9 +199,8 @@\n                     <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage(null)}></button>\r\n                 </div>\r\n             )}\r\n \r\n-            {/* Bouton pour afficher le formulaire d'ajout */}\r\n             {!showForm && (\r\n                 <div className=\"mb-6 flex justify-end\">\r\n                     <button\r\n                         onClick={() => {\r\n@@ -205,9 +214,8 @@\n                     </button>\r\n                 </div>\r\n             )}\r\n \r\n-            {/* Formulaire d'ajout/modification de fonctionnalité */}\r\n             {showForm && (\r\n                 <form onSubmit={handleSubmit} className=\"mb-8 bg-white p-6 rounded-lg shadow-lg border border-gray-200\">\r\n                     <h3 className=\"mb-6 text-2xl font-semibold text-gray-700\">{editId ? 'Modifier une fonctionnalité' : 'Ajouter une fonctionnalité'}</h3>\r\n                     <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n@@ -323,19 +331,19 @@\n                 <div className=\"text-center p-6 bg-blue-50 rounded-md shadow-sm text-blue-700\">Aucune fonctionnalité trouvée.</div>\r\n             ) : (\r\n                 <div className=\"overflow-x-auto rounded-lg shadow-lg border border-gray-200\">\r\n                     <table className=\"min-w-full bg-white\">\r\n-                        <thead className=\"bg-indigo-600 text-white\">\r\n+                        <thead className=\"bg-gray-100\">\r\n                             <tr>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">ID</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Nom</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Type</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Description</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Lien Fichier</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Catégorie</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Statut</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Premium</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Actions</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">ID</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Nom</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Type</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Description</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Lien Fichier</th>\r\n+                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Catégorie</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Statut</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Premium</th>\r\n+                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Actions</th>\r\n                             </tr>\r\n                         </thead>\r\n                         <tbody>\r\n                             {fonctionnalites.map((f) => (\r\n@@ -355,9 +363,9 @@\n                                         <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.premium ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>\r\n                                             {f.premium ? 'Oui' : 'Non'}\r\n                                         </span>\r\n                                     </td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm space-x-3\">\r\n+                                    <td className=\"px-5 py-4 text-center text-sm space-x-4\">\r\n                                         <button\r\n                                             onClick={() => handleEdit(f)}\r\n                                             aria-label={`Modifier ${f.nom}`}\r\n                                             className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\r\n@@ -365,9 +373,9 @@\n                                         >\r\n                                             <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" />\r\n                                         </button>\r\n                                         <button\r\n-                                            onClick={() => handleDelete(f.id)}\r\n+                                            onClick={() => openDeleteModal(f.id)}\r\n                                             aria-label={`Supprimer ${f.nom}`}\r\n                                             className=\"text-red-600 hover:text-red-900 focus:outline-none\"\r\n                                             style={{ outline: 'none' }}\r\n                                         >\r\n@@ -379,8 +387,38 @@\n                         </tbody>\r\n                     </table>\r\n                 </div>\r\n             )}\r\n+\r\n+            {/* Modal de confirmation suppression */}\r\n+            {modalDeleteId && (\r\n+                <div\r\n+                    className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\r\n+                    aria-modal=\"true\"\r\n+                    role=\"dialog\"\r\n+                    aria-labelledby=\"modal-title\"\r\n+                    aria-describedby=\"modal-description\"\r\n+                >\r\n+                    <div className=\"bg-white rounded-lg shadow-xl max-w-sm w-full p-6\">\r\n+                        <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-800 mb-4\">Confirmation de suppression</h2>\r\n+                        <p id=\"modal-description\" className=\"mb-6 text-gray-600\">Êtes-vous sûr de vouloir supprimer cette fonctionnalité ? Cette action est irréversible.</p>\r\n+                        <div className=\"flex justify-end space-x-4\">\r\n+                            <button\r\n+                                onClick={closeDeleteModal}\r\n+                                className=\"px-4 py-2 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n+                            >\r\n+                                Annuler\r\n+                            </button>\r\n+                            <button\r\n+                                onClick={confirmDelete}\r\n+                                className=\"px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n+                            >\r\n+                                Supprimer\r\n+                            </button>\r\n+                        </div>\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n         </div>\r\n     );\r\n }\r\n \r\n"
                },
                {
                    "date": 1750885750829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,425 +1,251 @@\n import React, { useEffect, useState } from 'react';\r\n-import api from '../../services/api'; \r\n+import {\r\n+  getProfessionnels,\r\n+  downloadDocumentJustificatif,\r\n+  validateProfessionnel,\r\n+} from '../../services/serviceAdmin';\r\n+import api from '../../services/api';\r\n+import { logout } from '../../services/serviceAuth';\r\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import { faPencilAlt, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n+import {\r\n+  faCheckCircle,\r\n+  faTimesCircle,\r\n+  faDownload,\r\n+  faMagnifyingGlass,\r\n+} from '@fortawesome/free-solid-svg-icons';\r\n+import { useNavigate } from 'react-router-dom';\r\n \r\n-function AdminFonctionnalites() {\r\n-    const [fonctionnalites, setFonctionnalites] = useState([]);\r\n-    const [loading, setLoading] = useState(true);\r\n-    const [error, setError] = useState(null);\r\n-    const [successMessage, setSuccessMessage] = useState(null);\r\n+const GestionProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n+  const [error, setError] = useState(null);\r\n+  const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n-    const [nom, setNom] = useState('');\r\n-    const [description, setDescription] = useState('');\r\n-    const [type, setType] = useState('');\r\n-    const [statut, setStatut] = useState(true);\r\n-    const [premium, setPremium] = useState(false);\r\n-    const [lienFichier, setLienFichier] = useState('');\r\n-    const [categorie, setCategorie] = useState('');\r\n-    const [editId, setEditId] = useState(null);\r\n+  const navigate = useNavigate();\r\n \r\n-    const [role, setRole] = useState(null);\r\n+  useEffect(() => {\r\n+    fetchUserInfoAndProfessionnels();\r\n+  }, []);\r\n \r\n-    const [showForm, setShowForm] = useState(false);\r\n+  const fetchUserInfoAndProfessionnels = async () => {\r\n+    try {\r\n+      const res = await api.get('/auth/me');\r\n+      const fetchedRole = res.data.role;\r\n+      setCurrentAdminRole(fetchedRole);\r\n \r\n-    // État pour gérer la modal de confirmation de suppression\r\n-    const [modalDeleteId, setModalDeleteId] = useState(null);\r\n+      if (fetchedRole === 'ADMIN') {\r\n+        await fetchProfessionnels();\r\n+      } else {\r\n+        setError(\"Accès refusé.\");\r\n+        handleLogoutAndRedirect();\r\n+      }\r\n+    } catch (err) {\r\n+      handleLogoutAndRedirect();\r\n+    }\r\n+  };\r\n \r\n-    useEffect(() => {\r\n-        fetchUserInfo();\r\n-    }, []);\r\n+  const handleLogoutAndRedirect = async () => {\r\n+    try {\r\n+      await logout();\r\n+    } finally {\r\n+      navigate('/connexion');\r\n+    }\r\n+  };\r\n \r\n-    useEffect(() => {\r\n-        if (successMessage) {\r\n-            const timer = setTimeout(() => setSuccessMessage(null), 3000);\r\n-            return () => clearTimeout(timer);\r\n-        }\r\n-    }, [successMessage]);\r\n+  const fetchProfessionnels = async () => {\r\n+    try {\r\n+      const data = await getProfessionnels();\r\n+      const filtered = data.filter(p =>\r\n+        ['PSYCHOLOGUE', 'PSYCHIATRE'].includes(p.role)\r\n+      );\r\n+      setProfessionnels(filtered);\r\n+    } catch (err) {\r\n+      setError(\"Erreur lors du chargement des professionnels.\");\r\n+    }\r\n+  };\r\n \r\n-    const fetchUserInfo = async () => {\r\n-        try {\r\n-            const res = await api.get('/auth/me'); \r\n-            setRole(res.data.role);\r\n-            fetchFonctionnalites();\r\n-        } catch (err) {\r\n-            console.error(err);\r\n-            setError(\"Erreur lors de la récupération des informations utilisateur.\");\r\n-            setLoading(false); \r\n-        }\r\n-    };\r\n-\r\n-    const fetchFonctionnalites = async () => {\r\n-        setError(null);\r\n-        try {\r\n-            const res = await api.get('/fonctionnalites'); \r\n-            if (Array.isArray(res.data)) {\r\n-                setFonctionnalites(res.data);\r\n-            } else {\r\n-                throw new Error(\"Format de données inattendu de l'API.\");\r\n-            }\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors du chargement des fonctionnalités.\");\r\n-        } finally {\r\n-            setLoading(false);\r\n-        }\r\n-    };\r\n-\r\n-    const handleApiError = (err, defaultMessage) => {\r\n-        console.error(\"Erreur API:\", err);\r\n-        if (err.response) {\r\n-            switch (err.response.status) {\r\n-                case 403:\r\n-                    setError(\"Accès refusé : Vous n'avez pas les permissions nécessaires.\");\r\n-                    break;\r\n-                case 401:\r\n-                    setError(\"Session expirée ou non autorisée. Veuillez vous reconnecter.\");\r\n-                    break;\r\n-                case 404: \r\n-                    setError(\"La ressource demandée n'a pas été trouvée. Vérifiez l'URL ou si le backend est démarré.\");\r\n-                    break;\r\n-                default:\r\n-                    setError(err.response.data?.message || defaultMessage);\r\n-            }\r\n-        } else if (err.request) {\r\n-            setError(\"Aucune réponse du serveur. Vérifiez votre connexion internet ou si le backend est démarré et accessible.\");\r\n-        } else {\r\n-            setError(err.message || defaultMessage);\r\n-        }\r\n-    };\r\n-\r\n-    const resetForm = () => {\r\n-        setNom('');\r\n-        setDescription('');\r\n-        setType('');\r\n-        setStatut(true);\r\n-        setPremium(false);\r\n-        setLienFichier('');\r\n-        setCategorie('');\r\n-        setEditId(null);\r\n-        setError(null);\r\n-    };\r\n-\r\n-    const handleSubmit = async (e) => {\r\n-        e.preventDefault();\r\n-        if (!nom.trim()) {\r\n-            setError(\"Le nom de la fonctionnalité est obligatoire.\");\r\n-            return;\r\n-        }\r\n-\r\n-        const payload = { \r\n-            nom, \r\n-            description, \r\n-            type, \r\n-            statut, \r\n-            premium,\r\n-            lienFichier: lienFichier.trim() !== '' ? lienFichier.trim() : null,\r\n-            categorie: categorie.trim() !== '' ? categorie.trim() : null\r\n-        };\r\n-\r\n-        try {\r\n-            if (editId) {\r\n-                await api.put(`/fonctionnalites/${editId}`, payload);\r\n-                setSuccessMessage(\"Fonctionnalité modifiée avec succès !\");\r\n-            } else {\r\n-                await api.post('/fonctionnalites', payload);\r\n-                setSuccessMessage(\"Fonctionnalité ajoutée avec succès !\");\r\n-            }\r\n-            resetForm();\r\n-            setShowForm(false);\r\n-            fetchFonctionnalites();\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors de l'enregistrement de la fonctionnalité.\");\r\n-        }\r\n-    };\r\n-\r\n-    const handleEdit = (f) => {\r\n-        setNom(f.nom || '');\r\n-        setDescription(f.description || '');\r\n-        setType(f.type || '');\r\n-        setStatut(!!f.statut);\r\n-        setPremium(!!f.premium);\r\n-        setLienFichier(f.lienFichier || '');\r\n-        setCategorie(f.categorie || '');\r\n-        setEditId(f.id);\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-        setShowForm(true);\r\n-    };\r\n-\r\n-    // Ouvre la modal en mettant l'id à supprimer\r\n-    const openDeleteModal = (id) => {\r\n-        setModalDeleteId(id);\r\n-    };\r\n-\r\n-    // Ferme la modal\r\n-    const closeDeleteModal = () => {\r\n-        setModalDeleteId(null);\r\n-    };\r\n-\r\n-    // Confirme suppression\r\n-    const confirmDelete = async () => {\r\n-        if (!modalDeleteId) return;\r\n-        try {\r\n-            await api.delete(`/fonctionnalites/${modalDeleteId}`);\r\n-            setSuccessMessage(\"Fonctionnalité supprimée avec succès !\");\r\n-            fetchFonctionnalites();\r\n-            closeDeleteModal();\r\n-        } catch (err) {\r\n-            handleApiError(err, \"Erreur lors de la suppression de la fonctionnalité.\");\r\n-            closeDeleteModal();\r\n-        }\r\n-    };\r\n-\r\n-    if (role && role !== \"ADMIN\") {\r\n-        return (\r\n-            <div className=\"alert alert-danger mt-5 text-center\">\r\n-                Vous n'avez pas la permission d'accéder à cette page.\r\n-            </div>\r\n-        );\r\n+  const handleValidation = async (id, valide) => {\r\n+    try {\r\n+      await validateProfessionnel(id, valide);\r\n+      setProfessionnels(prev =>\r\n+        prev.map(p =>\r\n+          p.id === id ? { ...p, statutValidation: valide ? 'VALIDE' : 'REFUSE' } : p\r\n+        )\r\n+      );\r\n+    } catch {\r\n+      setError(\"Erreur de validation.\");\r\n     }\r\n+  };\r\n \r\n-    if (loading) {\r\n-        return <div className=\"text-center my-5\">Chargement des fonctionnalités...</div>;\r\n+  const handleDownloadDocument = async (filename) => {\r\n+    if (!filename) return;\r\n+    try {\r\n+      const blob = await downloadDocumentJustificatif(filename);\r\n+      const url = window.URL.createObjectURL(new Blob([blob]));\r\n+      const link = document.createElement('a');\r\n+      link.href = url;\r\n+      link.setAttribute('download', filename);\r\n+      document.body.appendChild(link);\r\n+      link.click();\r\n+      link.remove();\r\n+      window.URL.revokeObjectURL(url);\r\n+    } catch {\r\n+      setError(\"Erreur de téléchargement.\");\r\n     }\r\n+  };\r\n \r\n+  // Recherche par nom, prenom, email, specialite\r\n+  const filteredProfessionnels = professionnels.filter(pro => {\r\n+    const term = searchTerm.toLowerCase();\r\n     return (\r\n-        <div className=\"container mt-8 max-w-7xl px-4\">\r\n-            <h1 className=\"text-4xl font-extrabold text-gray-800 mb-8 text-center\">Gestion des Fonctionnalités</h1>\r\n+      (pro.nom?.toLowerCase().includes(term)) ||\r\n+      (pro.prenom?.toLowerCase().includes(term)) ||\r\n+      (pro.email?.toLowerCase().includes(term)) ||\r\n+      (pro.specialite?.toLowerCase().includes(term))\r\n+    );\r\n+  }).filter(pro => {\r\n+    if (filterStatut === 'TOUS') return true;\r\n+    return pro.statutValidation === filterStatut;\r\n+  });\r\n \r\n-            {error && (\r\n-                <div className=\"alert alert-danger alert-dismissible fade show mb-4\">\r\n-                    {error}\r\n-                    <button type=\"button\" className=\"btn-close\" onClick={() => setError(null)}></button>\r\n-                </div>\r\n-            )}\r\n+  return (\r\n+    <div className=\"p-4\">\r\n+      {/* Barre de recherche */}\r\n+      <div className=\"mb-6 max-w-md mx-auto\">\r\n+        <div className=\"relative\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n+            value={searchTerm}\r\n+            onChange={e => setSearchTerm(e.target.value)}\r\n+            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+          />\r\n+          <FontAwesomeIcon\r\n+            icon={faMagnifyingGlass}\r\n+            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n \r\n-            {successMessage && (\r\n-                <div className=\"alert alert-success alert-dismissible fade show mb-4\">\r\n-                    {successMessage}\r\n-                    <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage(null)}></button>\r\n-                </div>\r\n-            )}\r\n+      {/* Filtre par statut */}\r\n+      <div className=\"flex justify-center space-x-4 mb-6\">\r\n+        {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n+          <button\r\n+            key={status}\r\n+            onClick={() => setFilterStatut(status)}\r\n+            className={`px-4 py-2 rounded-md font-semibold border\r\n+              ${filterStatut === status\r\n+                ? 'bg-indigo-600 text-white border-indigo-600'\r\n+                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n+            `}\r\n+          >\r\n+            {status === 'TOUS' ? 'Tous' :\r\n+             status === 'EN_ATTENTE' ? 'En attente' :\r\n+             status === 'VALIDE' ? 'Validés' :\r\n+             'Refusés'}\r\n+          </button>\r\n+        ))}\r\n+      </div>\r\n \r\n-            {!showForm && (\r\n-                <div className=\"mb-6 flex justify-end\">\r\n-                    <button\r\n-                        onClick={() => {\r\n-                            resetForm();\r\n-                            setShowForm(true);\r\n-                        }}\r\n-                        className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+      {/* Tableau */}\r\n+      {filteredProfessionnels.length === 0 ? (\r\n+        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n+      ) : (\r\n+        <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n+          <table className=\"min-w-full divide-y divide-gray-200\">\r\n+            <thead className=\"bg-gray-50\">\r\n+              <tr>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Nom Prénom\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Email\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Téléphone\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Spécialité\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Statut\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Document\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Actions\r\n+                </th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n+              {filteredProfessionnels.map(pro => (\r\n+                <tr key={pro.id}>\r\n+                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n+                    {pro.nom} {pro.prenom}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm\">\r\n+                    <span\r\n+                      className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n+                        pro.statutValidation === 'EN_ATTENTE'\r\n+                          ? 'bg-yellow-100 text-yellow-800'\r\n+                          : pro.statutValidation === 'VALIDE'\r\n+                          ? 'bg-green-100 text-green-800'\r\n+                          : 'bg-red-100 text-red-800'\r\n+                      }`}\r\n                     >\r\n-                        <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\r\n-                        Ajouter une fonctionnalité\r\n-                    </button>\r\n-                </div>\r\n-            )}\r\n-\r\n-            {showForm && (\r\n-                <form onSubmit={handleSubmit} className=\"mb-8 bg-white p-6 rounded-lg shadow-lg border border-gray-200\">\r\n-                    <h3 className=\"mb-6 text-2xl font-semibold text-gray-700\">{editId ? 'Modifier une fonctionnalité' : 'Ajouter une fonctionnalité'}</h3>\r\n-                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n-                        <div>\r\n-                            <label htmlFor=\"nom\" className=\"block text-sm font-medium text-gray-700\">Nom <span className=\"text-red-500\">*</span></label>\r\n-                            <input\r\n-                                type=\"text\"\r\n-                                id=\"nom\"\r\n-                                value={nom}\r\n-                                onChange={(e) => setNom(e.target.value)}\r\n-                                required\r\n-                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                            />\r\n-                        </div>\r\n-                        <div>\r\n-                            <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type <span className=\"text-red-500\">*</span></label>\r\n-                            <select\r\n-                                id=\"type\"\r\n-                                value={type}\r\n-                                onChange={(e) => setType(e.target.value)}\r\n-                                required\r\n-                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                            >\r\n-                                <option value=\"\">Sélectionnez un type...</option>\r\n-                                <option value=\"citation\">Citation</option>\r\n-                                <option value=\"podcast\">Podcast</option>\r\n-                                <option value=\"article\">Article</option>\r\n-                                <option value=\"video\">Vidéo</option>\r\n-                                <option value=\"outil\">Outil interactif</option>\r\n-                                <option value=\"guide_pratique\">Guide Pratique</option>\r\n-                                <option value=\"journaling_prompt\">Prompt Journaling</option>\r\n-                                <option value=\"exercice_texte\">Exercice de Relaxation (texte)</option>\r\n-                                <option value=\"challenge\">Défi Bien-être</option>\r\n-                            </select>\r\n-                        </div>\r\n-                        <div>\r\n-                            <label htmlFor=\"categorie\" className=\"block text-sm font-medium text-gray-700\">Catégorie (Optionnel)</label>\r\n-                            <input\r\n-                                type=\"text\"\r\n-                                id=\"categorie\"\r\n-                                value={categorie}\r\n-                                onChange={(e) => setCategorie(e.target.value)}\r\n-                                placeholder=\"Ex: Méditation, Sommeil\"\r\n-                                className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                            />\r\n-                        </div>\r\n-                    </div>\r\n-                    <div className=\"mt-6\">\r\n-                        <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">Description / Contenu</label>\r\n-                        <textarea\r\n-                            id=\"description\"\r\n-                            rows=\"4\"\r\n-                            value={description}\r\n-                            onChange={(e) => setDescription(e.target.value)}\r\n-                            placeholder=\"Description détaillée ou contenu de la ressource\"\r\n-                            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                        />\r\n-                    </div>\r\n-                    <div className=\"mt-6\">\r\n-                        <label htmlFor=\"lienFichier\" className=\"block text-sm font-medium text-gray-700 mb-1\">Lien du Fichier (URL pour Vidéo/Podcast/Outil, optionnel)</label>\r\n-                        <input\r\n-                            type=\"url\"\r\n-                            id=\"lienFichier\"\r\n-                            value={lienFichier}\r\n-                            onChange={(e) => setLienFichier(e.target.value)}\r\n-                            placeholder=\"Ex: https://youtube.com/ma-video\"\r\n-                            className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n-                        />\r\n-                    </div>\r\n-                    <div className=\"flex items-center space-x-8 mt-6\">\r\n-                        <label className=\"inline-flex items-center\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={statut}\r\n-                                onChange={() => setStatut(!statut)}\r\n-                                className=\"form-checkbox h-5 w-5 text-indigo-600\"\r\n-                            />\r\n-                            <span className=\"ml-2 text-gray-700\">Actif</span>\r\n-                        </label>\r\n-                        <label className=\"inline-flex items-center\">\r\n-                            <input\r\n-                                type=\"checkbox\"\r\n-                                checked={premium}\r\n-                                onChange={() => setPremium(!premium)}\r\n-                                className=\"form-checkbox h-5 w-5 text-yellow-500\"\r\n-                            />\r\n-                            <span className=\"ml-2 text-gray-700\">Premium</span>\r\n-                        </label>\r\n-                    </div>\r\n-                    <div className=\"mt-8 flex justify-end space-x-4\">\r\n+                      {pro.statutValidation.replace('_', ' ')}\r\n+                    </span>\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {pro.documentJustificatif ? (\r\n+                      <button\r\n+                        onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n+                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n+                        title=\"Télécharger\"\r\n+                      >\r\n+                        <FontAwesomeIcon icon={faDownload} />\r\n+                      </button>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-400\">N/A</span>\r\n+                    )}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n+                      <>\r\n                         <button\r\n-                            type=\"submit\"\r\n-                            className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+                          onClick={() => handleValidation(pro.id, true)}\r\n+                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n+                          title=\"Valider\"\r\n                         >\r\n-                            <FontAwesomeIcon icon={editId ? faPencilAlt : faPlus} className=\"mr-2\" />\r\n-                            {editId ? 'Modifier' : 'Ajouter'}\r\n+                          <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n                         </button>\r\n-                        <button\r\n-                            type=\"button\"\r\n-                            onClick={() => {\r\n-                                resetForm();\r\n-                                setShowForm(false);\r\n-                            }}\r\n-                            className=\"rounded-md bg-gray-200 px-6 py-2 text-gray-700 shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n-                        >\r\n-                            Annuler\r\n-                        </button>\r\n-                    </div>\r\n-                </form>\r\n-            )}\r\n-\r\n-            {fonctionnalites.length === 0 ? (\r\n-                <div className=\"text-center p-6 bg-blue-50 rounded-md shadow-sm text-blue-700\">Aucune fonctionnalité trouvée.</div>\r\n-            ) : (\r\n-                <div className=\"overflow-x-auto rounded-lg shadow-lg border border-gray-200\">\r\n-                    <table className=\"min-w-full bg-white\">\r\n-                        <thead className=\"bg-gray-100\">\r\n-                            <tr>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">ID</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Nom</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Type</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Description</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Lien Fichier</th>\r\n-                                <th className=\"px-5 py-3 text-left text-sm font-semibold text-gray-600\">Catégorie</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Statut</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Premium</th>\r\n-                                <th className=\"px-5 py-3 text-center text-sm font-semibold text-gray-600\">Actions</th>\r\n-                            </tr>\r\n-                        </thead>\r\n-                        <tbody>\r\n-                            {fonctionnalites.map((f) => (\r\n-                                <tr key={f.id} className=\"hover:bg-gray-50\">\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.id}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.nom}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.type}</td>\r\n-                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-gray-600\">{f.description}</td>\r\n-                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-blue-600\">{f.lienFichier}</td>\r\n-                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.categorie || '-'}</td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n-                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.statut ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\r\n-                                            {f.statut ? 'Actif' : 'Inactif'}\r\n-                                        </span>\r\n-                                    </td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n-                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.premium ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>\r\n-                                            {f.premium ? 'Oui' : 'Non'}\r\n-                                        </span>\r\n-                                    </td>\r\n-                                    <td className=\"px-5 py-4 text-center text-sm space-x-4\">\r\n-                                        <button\r\n-                                            onClick={() => handleEdit(f)}\r\n-                                            aria-label={`Modifier ${f.nom}`}\r\n-                                            className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\r\n-                                            style={{ outline: 'none' }}\r\n-                                        >\r\n-                                            <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" />\r\n-                                        </button>\r\n-                                        <button\r\n-                                            onClick={() => openDeleteModal(f.id)}\r\n-                                            aria-label={`Supprimer ${f.nom}`}\r\n-                                            className=\"text-red-600 hover:text-red-900 focus:outline-none\"\r\n-                                            style={{ outline: 'none' }}\r\n-                                        >\r\n-                                            <FontAwesomeIcon icon={faTrash} size=\"lg\" />\r\n-                                        </button>\r\n-                                    </td>\r\n-                                </tr>\r\n-                            ))}\r\n-                        </tbody>\r\n-                    </table>\r\n-                </div>\r\n-            )}\r\n-\r\n-            {/* Modal de confirmation suppression */}\r\n-            {modalDeleteId && (\r\n-                <div\r\n-                    className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\r\n-                    aria-modal=\"true\"\r\n-                    role=\"dialog\"\r\n-                    aria-labelledby=\"modal-title\"\r\n-                    aria-describedby=\"modal-description\"\r\n-                >\r\n-                    <div className=\"bg-white rounded-lg shadow-xl max-w-sm w-full p-6\">\r\n-                        <h2 id=\"modal-title\" className=\"text-xl font-semibold text-gray-800 mb-4\">Confirmation de suppression</h2>\r\n-                        <p id=\"modal-description\" className=\"mb-6 text-gray-600\">Êtes-vous sûr de vouloir supprimer cette fonctionnalité ? Cette action est irréversible.</p>\r\n-                        <div className=\"flex justify-end space-x-4\">\r\n-                            <button\r\n-                                onClick={closeDeleteModal}\r\n-                                className=\"px-4 py-2 rounded-md bg-gray-200 text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n-                            >\r\n-                                Annuler\r\n-                            </button>\r\n-                            <button\r\n-                                onClick={confirmDelete}\r\n-                                className=\"px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n-                            >\r\n-                                Supprimer\r\n-                            </button>\r\n-                        </div>\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n+                        {pro.statutValidation === 'EN_ATTENTE' && (\r\n+                          <button\r\n+                            onClick={() => handleValidation(pro.id, false)}\r\n+                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n+                            title=\"Refuser\"\r\n+                          >\r\n+                            <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n+                          </button>\r\n+                        )}\r\n+                      </>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n+                    )}\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+            </tbody>\r\n+          </table>\r\n         </div>\r\n-    );\r\n-}\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n \r\n-export default AdminFonctionnalites;\r\n+export default GestionProfessionnels;\r\n"
                },
                {
                    "date": 1750889055929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,251 +1,183 @@\n import React, { useEffect, useState } from 'react';\r\n-import {\r\n-  getProfessionnels,\r\n-  downloadDocumentJustificatif,\r\n-  validateProfessionnel,\r\n-} from '../../services/serviceAdmin';\r\n+import { getAllUsers, updateUser, deleteUser } from '../../services/serviceAdmin';\r\n import api from '../../services/api';\r\n import { logout } from '../../services/serviceAuth';\r\n-import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n-import {\r\n-  faCheckCircle,\r\n-  faTimesCircle,\r\n-  faDownload,\r\n-  faMagnifyingGlass,\r\n-} from '@fortawesome/free-solid-svg-icons';\r\n-import { useNavigate } from 'react-router-dom';\r\n+import { Trash2 } from 'lucide-react';\r\n+import { motion } from 'framer-motion';\r\n \r\n-const GestionProfessionnels = () => {\r\n-  const [professionnels, setProfessionnels] = useState([]);\r\n-  const [searchTerm, setSearchTerm] = useState('');\r\n-  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n-  const [error, setError] = useState(null);\r\n-  const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n+const GestionUtilisateurs = () => {\r\n+    const [users, setUsers] = useState([]);\r\n+    const [loading, setLoading] = useState(true);\r\n+    const [error, setError] = useState(null);\r\n+    const [successMessage, setSuccessMessage] = useState(null);\r\n \r\n-  const navigate = useNavigate();\r\n+    const rolesDisponibles = ['USER', 'ADMIN', 'PSYCHOLOGUE', 'PSYCHIATRE','PREMIUM'];\r\n+    const [currentAdminEmail, setCurrentAdminEmail] = useState(null);\r\n+    const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n-  useEffect(() => {\r\n-    fetchUserInfoAndProfessionnels();\r\n-  }, []);\r\n+    useEffect(() => {\r\n+        fetchUserInfo();\r\n+    }, []);\r\n \r\n-  const fetchUserInfoAndProfessionnels = async () => {\r\n-    try {\r\n-      const res = await api.get('/auth/me');\r\n-      const fetchedRole = res.data.role;\r\n-      setCurrentAdminRole(fetchedRole);\r\n+    const fetchUserInfo = async () => {\r\n+        try {\r\n+            const res = await api.get('/auth/me');\r\n+            setCurrentAdminEmail(res.data.email);\r\n+            setCurrentAdminRole(res.data.role);\r\n+            if (res.data.role === 'ADMIN') {\r\n+                fetchUsers();\r\n+            } else {\r\n+                setError(\"Accès refusé : Vous n'avez pas la permission d'accéder à cette page.\");\r\n+                setLoading(false);\r\n+            }\r\n+        } catch (err) {\r\n+            setError(\"Erreur lors de la récupération des informations utilisateur. Veuillez vous reconnecter.\");\r\n+            setLoading(false);\r\n+        }\r\n+    };\r\n \r\n-      if (fetchedRole === 'ADMIN') {\r\n-        await fetchProfessionnels();\r\n-      } else {\r\n-        setError(\"Accès refusé.\");\r\n-        handleLogoutAndRedirect();\r\n-      }\r\n-    } catch (err) {\r\n-      handleLogoutAndRedirect();\r\n-    }\r\n-  };\r\n+    const handleLogout = async () => {\r\n+        try {\r\n+            await logout();\r\n+            window.location.href = '/connexion';\r\n+        } catch (err) {\r\n+            setError(\"Erreur lors de la déconnexion.\");\r\n+        }\r\n+    };\r\n \r\n-  const handleLogoutAndRedirect = async () => {\r\n-    try {\r\n-      await logout();\r\n-    } finally {\r\n-      navigate('/connexion');\r\n-    }\r\n-  };\r\n+    const fetchUsers = async () => {\r\n+        setLoading(true);\r\n+        setError(null);\r\n+        setSuccessMessage(null);\r\n+        try {\r\n+            const data = await getAllUsers();\r\n+            const filteredUsers = data.filter(user => user.role === 'USER');\r\n+            setUsers(filteredUsers);\r\n+        } catch (err) {\r\n+            if (err.response?.status === 403) {\r\n+                setError(\"Accès refusé.\");\r\n+            } else {\r\n+                setError(\"Impossible de charger les utilisateurs.\");\r\n+            }\r\n+        } finally {\r\n+            setLoading(false);\r\n+        }\r\n+    };\r\n \r\n-  const fetchProfessionnels = async () => {\r\n-    try {\r\n-      const data = await getProfessionnels();\r\n-      const filtered = data.filter(p =>\r\n-        ['PSYCHOLOGUE', 'PSYCHIATRE'].includes(p.role)\r\n-      );\r\n-      setProfessionnels(filtered);\r\n-    } catch (err) {\r\n-      setError(\"Erreur lors du chargement des professionnels.\");\r\n+    const handleRoleChange = async (userId, newRole) => {\r\n+        setError(null);\r\n+        setSuccessMessage(null);\r\n+        try {\r\n+            const roleUpdatePayload = { id: userId, role: newRole };\r\n+            await updateUser(userId, roleUpdatePayload);\r\n+            const updatedUser = users.find(u => u.id === userId);\r\n+            setSuccessMessage(`Rôle de ${updatedUser?.prenom || ''} ${updatedUser?.nom || ''} mis à jour en ${newRole}`);\r\n+            fetchUsers();\r\n+        } catch (err) {\r\n+            setError(\"Erreur lors de la mise à jour du rôle.\");\r\n+        }\r\n+    };\r\n+\r\n+    const handleDeleteUser = async (userId, userName) => {\r\n+        if (!window.confirm(`Êtes-vous sûr de vouloir supprimer l'utilisateur ${userName} ?`)) return;\r\n+        setError(null);\r\n+        setSuccessMessage(null);\r\n+        try {\r\n+            await deleteUser(userId);\r\n+            setSuccessMessage(`Utilisateur ${userName} supprimé avec succès.`);\r\n+            fetchUsers();\r\n+        } catch (err) {\r\n+            setError(\"Erreur lors de la suppression de l'utilisateur.\");\r\n+        }\r\n+    };\r\n+\r\n+    if (currentAdminRole && currentAdminRole !== \"ADMIN\") {\r\n+        return (\r\n+            <div className=\"alert alert-danger mt-5 text-center\">\r\n+                Vous n'avez pas la permission d'accéder à cette page.\r\n+            </div>\r\n+        );\r\n     }\r\n-  };\r\n \r\n-  const handleValidation = async (id, valide) => {\r\n-    try {\r\n-      await validateProfessionnel(id, valide);\r\n-      setProfessionnels(prev =>\r\n-        prev.map(p =>\r\n-          p.id === id ? { ...p, statutValidation: valide ? 'VALIDE' : 'REFUSE' } : p\r\n-        )\r\n-      );\r\n-    } catch {\r\n-      setError(\"Erreur de validation.\");\r\n+    if (loading) {\r\n+        return <div className=\"text-center py-8 text-gray-600\">Chargement des utilisateurs...</div>;\r\n     }\r\n-  };\r\n \r\n-  const handleDownloadDocument = async (filename) => {\r\n-    if (!filename) return;\r\n-    try {\r\n-      const blob = await downloadDocumentJustificatif(filename);\r\n-      const url = window.URL.createObjectURL(new Blob([blob]));\r\n-      const link = document.createElement('a');\r\n-      link.href = url;\r\n-      link.setAttribute('download', filename);\r\n-      document.body.appendChild(link);\r\n-      link.click();\r\n-      link.remove();\r\n-      window.URL.revokeObjectURL(url);\r\n-    } catch {\r\n-      setError(\"Erreur de téléchargement.\");\r\n+    if (error && error.includes(\"Accès refusé\")) {\r\n+        return <div className=\"text-center py-8 text-red-600\">{error}</div>;\r\n     }\r\n-  };\r\n \r\n-  // Recherche par nom, prenom, email, specialite\r\n-  const filteredProfessionnels = professionnels.filter(pro => {\r\n-    const term = searchTerm.toLowerCase();\r\n     return (\r\n-      (pro.nom?.toLowerCase().includes(term)) ||\r\n-      (pro.prenom?.toLowerCase().includes(term)) ||\r\n-      (pro.email?.toLowerCase().includes(term)) ||\r\n-      (pro.specialite?.toLowerCase().includes(term))\r\n-    );\r\n-  }).filter(pro => {\r\n-    if (filterStatut === 'TOUS') return true;\r\n-    return pro.statutValidation === filterStatut;\r\n-  });\r\n+        <div className=\"container mt-5\">\r\n+            {error && (\r\n+                <div className=\"alert alert-danger mt-3\">\r\n+                    {error}\r\n+                </div>\r\n+            )}\r\n+            {successMessage && (\r\n+                <div className=\"alert alert-success mt-3\">\r\n+                    {successMessage}\r\n+                </div>\r\n+            )}\r\n \r\n-  return (\r\n-    <div className=\"p-4\">\r\n-      {/* Barre de recherche */}\r\n-      <div className=\"mb-6 max-w-md mx-auto\">\r\n-        <div className=\"relative\">\r\n-          <input\r\n-            type=\"text\"\r\n-            placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n-            value={searchTerm}\r\n-            onChange={e => setSearchTerm(e.target.value)}\r\n-            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n-          />\r\n-          <FontAwesomeIcon\r\n-            icon={faMagnifyingGlass}\r\n-            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-\r\n-      {/* Filtre par statut */}\r\n-      <div className=\"flex justify-center space-x-4 mb-6\">\r\n-        {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n-          <button\r\n-            key={status}\r\n-            onClick={() => setFilterStatut(status)}\r\n-            className={`px-4 py-2 rounded-md font-semibold border\r\n-              ${filterStatut === status\r\n-                ? 'bg-indigo-600 text-white border-indigo-600'\r\n-                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n-            `}\r\n-          >\r\n-            {status === 'TOUS' ? 'Tous' :\r\n-             status === 'EN_ATTENTE' ? 'En attente' :\r\n-             status === 'VALIDE' ? 'Validés' :\r\n-             'Refusés'}\r\n-          </button>\r\n-        ))}\r\n-      </div>\r\n-\r\n-      {/* Tableau */}\r\n-      {filteredProfessionnels.length === 0 ? (\r\n-        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n-      ) : (\r\n-        <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n-          <table className=\"min-w-full divide-y divide-gray-200\">\r\n-            <thead className=\"bg-gray-50\">\r\n-              <tr>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Nom Prénom\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Email\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Téléphone\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Spécialité\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Statut\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Document\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Actions\r\n-                </th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n-              {filteredProfessionnels.map(pro => (\r\n-                <tr key={pro.id}>\r\n-                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n-                    {pro.nom} {pro.prenom}\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm\">\r\n-                    <span\r\n-                      className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n-                        pro.statutValidation === 'EN_ATTENTE'\r\n-                          ? 'bg-yellow-100 text-yellow-800'\r\n-                          : pro.statutValidation === 'VALIDE'\r\n-                          ? 'bg-green-100 text-green-800'\r\n-                          : 'bg-red-100 text-red-800'\r\n-                      }`}\r\n-                    >\r\n-                      {pro.statutValidation.replace('_', ' ')}\r\n-                    </span>\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n-                    {pro.documentJustificatif ? (\r\n-                      <button\r\n-                        onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n-                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n-                        title=\"Télécharger\"\r\n-                      >\r\n-                        <FontAwesomeIcon icon={faDownload} />\r\n-                      </button>\r\n-                    ) : (\r\n-                      <span className=\"text-gray-400\">N/A</span>\r\n-                    )}\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n-                    {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n-                      <>\r\n-                        <button\r\n-                          onClick={() => handleValidation(pro.id, true)}\r\n-                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n-                          title=\"Valider\"\r\n-                        >\r\n-                          <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n-                        </button>\r\n-                        {pro.statutValidation === 'EN_ATTENTE' && (\r\n-                          <button\r\n-                            onClick={() => handleValidation(pro.id, false)}\r\n-                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n-                            title=\"Refuser\"\r\n-                          >\r\n-                            <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n-                          </button>\r\n+            <div className=\"overflow-x-auto rounded-lg shadow-md border border-gray-200 mt-4\">\r\n+                <table className=\"min-w-full bg-white\">\r\n+                    <thead className=\"bg-blue-600 text-white\">\r\n+                        <tr>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">ID</th>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Nom</th>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Prénom</th>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Email</th>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Téléphone</th>\r\n+                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Rôle</th>\r\n+                            <th className=\"py-3 px-4 text-center text-xs font-medium uppercase\">Actions</th>\r\n+                        </tr>\r\n+                    </thead>\r\n+                    <tbody className=\"divide-y divide-gray-200\">\r\n+                        {users.length === 0 ? (\r\n+                            <tr>\r\n+                                <td colSpan=\"7\" className=\"py-4 px-4 text-center text-gray-500\">\r\n+                                    Aucun utilisateur trouvé.\r\n+                                </td>\r\n+                            </tr>\r\n+                        ) : (\r\n+                            users.map((user) => (\r\n+                                <tr key={user.id} className=\"hover:bg-gray-100\">\r\n+                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.id}</td>\r\n+                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.nom}</td>\r\n+                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.prenom}</td>\r\n+                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.email}</td>\r\n+                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.telephone || 'N/A'}</td>\r\n+                                    <td className=\"py-3 px-4 text-sm\">\r\n+                                        <select\r\n+                                            value={user.role}\r\n+                                            onChange={(e) => handleRoleChange(user.id, e.target.value)}\r\n+                                            className=\"block w-full py-1 px-2 border border-gray-300 rounded-md text-sm\"\r\n+                                        >\r\n+                                            {rolesDisponibles.map(role => (\r\n+                                                <option key={role} value={role}>{role}</option>\r\n+                                            ))}\r\n+                                        </select>\r\n+                                    </td>\r\n+                                    <td className=\"py-3 px-4 text-sm text-center\">\r\n+                                        <motion.button\r\n+                                            whileHover={{ scale: 1.2, rotate: -10 }}\r\n+                                            whileTap={{ scale: 0.9, rotate: 10 }}\r\n+                                            onClick={() => handleDeleteUser(user.id, `${user.prenom || ''} ${user.nom || ''}`)}\r\n+                                            className=\"text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-100 transition duration-200\"\r\n+                                            title={`Supprimer ${user.prenom || ''} ${user.nom || ''}`}\r\n+                                        >\r\n+                                            <Trash2 className=\"w-5 h-5\" />\r\n+                                        </motion.button>\r\n+                                    </td>\r\n+                                </tr>\r\n+                            ))\r\n                         )}\r\n-                      </>\r\n-                    ) : (\r\n-                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n-                    )}\r\n-                  </td>\r\n-                </tr>\r\n-              ))}\r\n-            </tbody>\r\n-          </table>\r\n+                    </tbody>\r\n+                </table>\r\n+            </div>\r\n         </div>\r\n-      )}\r\n-    </div>\r\n-  );\r\n+    );\r\n };\r\n \r\n-export default GestionProfessionnels;\r\n+export default GestionUtilisateurs;\r\n"
                },
                {
                    "date": 1750889104765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,183 +1,251 @@\n import React, { useEffect, useState } from 'react';\r\n-import { getAllUsers, updateUser, deleteUser } from '../../services/serviceAdmin';\r\n+import {\r\n+  getProfessionnels,\r\n+  downloadDocumentJustificatif,\r\n+  validateProfessionnel,\r\n+} from '../../services/serviceAdmin';\r\n import api from '../../services/api';\r\n import { logout } from '../../services/serviceAuth';\r\n-import { Trash2 } from 'lucide-react';\r\n-import { motion } from 'framer-motion';\r\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n+import {\r\n+  faCheckCircle,\r\n+  faTimesCircle,\r\n+  faDownload,\r\n+  faMagnifyingGlass,\r\n+} from '@fortawesome/free-solid-svg-icons';\r\n+import { useNavigate } from 'react-router-dom';\r\n \r\n-const GestionUtilisateurs = () => {\r\n-    const [users, setUsers] = useState([]);\r\n-    const [loading, setLoading] = useState(true);\r\n-    const [error, setError] = useState(null);\r\n-    const [successMessage, setSuccessMessage] = useState(null);\r\n+const GestionProfessionnels = () => {\r\n+  const [professionnels, setProfessionnels] = useState([]);\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n+  const [error, setError] = useState(null);\r\n+  const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n-    const rolesDisponibles = ['USER', 'ADMIN', 'PSYCHOLOGUE', 'PSYCHIATRE','PREMIUM'];\r\n-    const [currentAdminEmail, setCurrentAdminEmail] = useState(null);\r\n-    const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n+  const navigate = useNavigate();\r\n \r\n-    useEffect(() => {\r\n-        fetchUserInfo();\r\n-    }, []);\r\n+  useEffect(() => {\r\n+    fetchUserInfoAndProfessionnels();\r\n+  }, []);\r\n \r\n-    const fetchUserInfo = async () => {\r\n-        try {\r\n-            const res = await api.get('/auth/me');\r\n-            setCurrentAdminEmail(res.data.email);\r\n-            setCurrentAdminRole(res.data.role);\r\n-            if (res.data.role === 'ADMIN') {\r\n-                fetchUsers();\r\n-            } else {\r\n-                setError(\"Accès refusé : Vous n'avez pas la permission d'accéder à cette page.\");\r\n-                setLoading(false);\r\n-            }\r\n-        } catch (err) {\r\n-            setError(\"Erreur lors de la récupération des informations utilisateur. Veuillez vous reconnecter.\");\r\n-            setLoading(false);\r\n-        }\r\n-    };\r\n+  const fetchUserInfoAndProfessionnels = async () => {\r\n+    try {\r\n+      const res = await api.get('/auth/me');\r\n+      const fetchedRole = res.data.role;\r\n+      setCurrentAdminRole(fetchedRole);\r\n \r\n-    const handleLogout = async () => {\r\n-        try {\r\n-            await logout();\r\n-            window.location.href = '/connexion';\r\n-        } catch (err) {\r\n-            setError(\"Erreur lors de la déconnexion.\");\r\n-        }\r\n-    };\r\n+      if (fetchedRole === 'ADMIN') {\r\n+        await fetchProfessionnels();\r\n+      } else {\r\n+        setError(\"Accès refusé.\");\r\n+        handleLogoutAndRedirect();\r\n+      }\r\n+    } catch (err) {\r\n+      handleLogoutAndRedirect();\r\n+    }\r\n+  };\r\n \r\n-    const fetchUsers = async () => {\r\n-        setLoading(true);\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-        try {\r\n-            const data = await getAllUsers();\r\n-            const filteredUsers = data.filter(user => user.role === 'USER');\r\n-            setUsers(filteredUsers);\r\n-        } catch (err) {\r\n-            if (err.response?.status === 403) {\r\n-                setError(\"Accès refusé.\");\r\n-            } else {\r\n-                setError(\"Impossible de charger les utilisateurs.\");\r\n-            }\r\n-        } finally {\r\n-            setLoading(false);\r\n-        }\r\n-    };\r\n+  const handleLogoutAndRedirect = async () => {\r\n+    try {\r\n+      await logout();\r\n+    } finally {\r\n+      navigate('/connexion');\r\n+    }\r\n+  };\r\n \r\n-    const handleRoleChange = async (userId, newRole) => {\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-        try {\r\n-            const roleUpdatePayload = { id: userId, role: newRole };\r\n-            await updateUser(userId, roleUpdatePayload);\r\n-            const updatedUser = users.find(u => u.id === userId);\r\n-            setSuccessMessage(`Rôle de ${updatedUser?.prenom || ''} ${updatedUser?.nom || ''} mis à jour en ${newRole}`);\r\n-            fetchUsers();\r\n-        } catch (err) {\r\n-            setError(\"Erreur lors de la mise à jour du rôle.\");\r\n-        }\r\n-    };\r\n-\r\n-    const handleDeleteUser = async (userId, userName) => {\r\n-        if (!window.confirm(`Êtes-vous sûr de vouloir supprimer l'utilisateur ${userName} ?`)) return;\r\n-        setError(null);\r\n-        setSuccessMessage(null);\r\n-        try {\r\n-            await deleteUser(userId);\r\n-            setSuccessMessage(`Utilisateur ${userName} supprimé avec succès.`);\r\n-            fetchUsers();\r\n-        } catch (err) {\r\n-            setError(\"Erreur lors de la suppression de l'utilisateur.\");\r\n-        }\r\n-    };\r\n-\r\n-    if (currentAdminRole && currentAdminRole !== \"ADMIN\") {\r\n-        return (\r\n-            <div className=\"alert alert-danger mt-5 text-center\">\r\n-                Vous n'avez pas la permission d'accéder à cette page.\r\n-            </div>\r\n-        );\r\n+  const fetchProfessionnels = async () => {\r\n+    try {\r\n+      const data = await getProfessionnels();\r\n+      const filtered = data.filter(p =>\r\n+        ['PSYCHOLOGUE', 'PSYCHIATRE'].includes(p.role)\r\n+      );\r\n+      setProfessionnels(filtered);\r\n+    } catch (err) {\r\n+      setError(\"Erreur lors du chargement des professionnels.\");\r\n     }\r\n+  };\r\n \r\n-    if (loading) {\r\n-        return <div className=\"text-center py-8 text-gray-600\">Chargement des utilisateurs...</div>;\r\n+  const handleValidation = async (id, valide) => {\r\n+    try {\r\n+      await validateProfessionnel(id, valide);\r\n+      setProfessionnels(prev =>\r\n+        prev.map(p =>\r\n+          p.id === id ? { ...p, statutValidation: valide ? 'VALIDE' : 'REFUSE' } : p\r\n+        )\r\n+      );\r\n+    } catch {\r\n+      setError(\"Erreur de validation.\");\r\n     }\r\n+  };\r\n \r\n-    if (error && error.includes(\"Accès refusé\")) {\r\n-        return <div className=\"text-center py-8 text-red-600\">{error}</div>;\r\n+  const handleDownloadDocument = async (filename) => {\r\n+    if (!filename) return;\r\n+    try {\r\n+      const blob = await downloadDocumentJustificatif(filename);\r\n+      const url = window.URL.createObjectURL(new Blob([blob]));\r\n+      const link = document.createElement('a');\r\n+      link.href = url;\r\n+      link.setAttribute('download', filename);\r\n+      document.body.appendChild(link);\r\n+      link.click();\r\n+      link.remove();\r\n+      window.URL.revokeObjectURL(url);\r\n+    } catch {\r\n+      setError(\"Erreur de téléchargement.\");\r\n     }\r\n+  };\r\n \r\n+  // Recherche par nom, prenom, email, specialite\r\n+  const filteredProfessionnels = professionnels.filter(pro => {\r\n+    const term = searchTerm.toLowerCase();\r\n     return (\r\n-        <div className=\"container mt-5\">\r\n-            {error && (\r\n-                <div className=\"alert alert-danger mt-3\">\r\n-                    {error}\r\n-                </div>\r\n-            )}\r\n-            {successMessage && (\r\n-                <div className=\"alert alert-success mt-3\">\r\n-                    {successMessage}\r\n-                </div>\r\n-            )}\r\n+      (pro.nom?.toLowerCase().includes(term)) ||\r\n+      (pro.prenom?.toLowerCase().includes(term)) ||\r\n+      (pro.email?.toLowerCase().includes(term)) ||\r\n+      (pro.specialite?.toLowerCase().includes(term))\r\n+    );\r\n+  }).filter(pro => {\r\n+    if (filterStatut === 'TOUS') return true;\r\n+    return pro.statutValidation === filterStatut;\r\n+  });\r\n \r\n-            <div className=\"overflow-x-auto rounded-lg shadow-md border border-gray-200 mt-4\">\r\n-                <table className=\"min-w-full bg-white\">\r\n-                    <thead className=\"bg-blue-600 text-white\">\r\n-                        <tr>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">ID</th>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Nom</th>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Prénom</th>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Email</th>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Téléphone</th>\r\n-                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Rôle</th>\r\n-                            <th className=\"py-3 px-4 text-center text-xs font-medium uppercase\">Actions</th>\r\n-                        </tr>\r\n-                    </thead>\r\n-                    <tbody className=\"divide-y divide-gray-200\">\r\n-                        {users.length === 0 ? (\r\n-                            <tr>\r\n-                                <td colSpan=\"7\" className=\"py-4 px-4 text-center text-gray-500\">\r\n-                                    Aucun utilisateur trouvé.\r\n-                                </td>\r\n-                            </tr>\r\n-                        ) : (\r\n-                            users.map((user) => (\r\n-                                <tr key={user.id} className=\"hover:bg-gray-100\">\r\n-                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.id}</td>\r\n-                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.nom}</td>\r\n-                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.prenom}</td>\r\n-                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.email}</td>\r\n-                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.telephone || 'N/A'}</td>\r\n-                                    <td className=\"py-3 px-4 text-sm\">\r\n-                                        <select\r\n-                                            value={user.role}\r\n-                                            onChange={(e) => handleRoleChange(user.id, e.target.value)}\r\n-                                            className=\"block w-full py-1 px-2 border border-gray-300 rounded-md text-sm\"\r\n-                                        >\r\n-                                            {rolesDisponibles.map(role => (\r\n-                                                <option key={role} value={role}>{role}</option>\r\n-                                            ))}\r\n-                                        </select>\r\n-                                    </td>\r\n-                                    <td className=\"py-3 px-4 text-sm text-center\">\r\n-                                        <motion.button\r\n-                                            whileHover={{ scale: 1.2, rotate: -10 }}\r\n-                                            whileTap={{ scale: 0.9, rotate: 10 }}\r\n-                                            onClick={() => handleDeleteUser(user.id, `${user.prenom || ''} ${user.nom || ''}`)}\r\n-                                            className=\"text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-100 transition duration-200\"\r\n-                                            title={`Supprimer ${user.prenom || ''} ${user.nom || ''}`}\r\n-                                        >\r\n-                                            <Trash2 className=\"w-5 h-5\" />\r\n-                                        </motion.button>\r\n-                                    </td>\r\n-                                </tr>\r\n-                            ))\r\n+  return (\r\n+    <div className=\"p-4\">\r\n+      {/* Barre de recherche */}\r\n+      <div className=\"mb-6 max-w-md mx-auto\">\r\n+        <div className=\"relative\">\r\n+          <input\r\n+            type=\"text\"\r\n+            placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n+            value={searchTerm}\r\n+            onChange={e => setSearchTerm(e.target.value)}\r\n+            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+          />\r\n+          <FontAwesomeIcon\r\n+            icon={faMagnifyingGlass}\r\n+            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      {/* Filtre par statut */}\r\n+      <div className=\"flex justify-center space-x-4 mb-6\">\r\n+        {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n+          <button\r\n+            key={status}\r\n+            onClick={() => setFilterStatut(status)}\r\n+            className={`px-4 py-2 rounded-md font-semibold border\r\n+              ${filterStatut === status\r\n+                ? 'bg-indigo-600 text-white border-indigo-600'\r\n+                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n+            `}\r\n+          >\r\n+            {status === 'TOUS' ? 'Tous' :\r\n+             status === 'EN_ATTENTE' ? 'En attente' :\r\n+             status === 'VALIDE' ? 'Validés' :\r\n+             'Refusés'}\r\n+          </button>\r\n+        ))}\r\n+      </div>\r\n+\r\n+      {/* Tableau */}\r\n+      {filteredProfessionnels.length === 0 ? (\r\n+        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n+      ) : (\r\n+        <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n+          <table className=\"min-w-full divide-y divide-gray-200\">\r\n+            <thead className=\"bg-gray-50\">\r\n+              <tr>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Nom Prénom\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Email\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Téléphone\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Spécialité\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Statut\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Document\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Actions\r\n+                </th>\r\n+              </tr>\r\n+            </thead>\r\n+            <tbody className=\"bg-primary divide-y divide-gray-200\">\r\n+              {filteredProfessionnels.map(pro => (\r\n+                <tr key={pro.id}>\r\n+                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n+                    {pro.nom} {pro.prenom}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm\">\r\n+                    <span\r\n+                      className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n+                        pro.statutValidation === 'EN_ATTENTE'\r\n+                          ? 'bg-yellow-100 text-yellow-800'\r\n+                          : pro.statutValidation === 'VALIDE'\r\n+                          ? 'bg-green-100 text-green-800'\r\n+                          : 'bg-red-100 text-red-800'\r\n+                      }`}\r\n+                    >\r\n+                      {pro.statutValidation.replace('_', ' ')}\r\n+                    </span>\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {pro.documentJustificatif ? (\r\n+                      <button\r\n+                        onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n+                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n+                        title=\"Télécharger\"\r\n+                      >\r\n+                        <FontAwesomeIcon icon={faDownload} />\r\n+                      </button>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-400\">N/A</span>\r\n+                    )}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n+                    {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n+                      <>\r\n+                        <button\r\n+                          onClick={() => handleValidation(pro.id, true)}\r\n+                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n+                          title=\"Valider\"\r\n+                        >\r\n+                          <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n+                        </button>\r\n+                        {pro.statutValidation === 'EN_ATTENTE' && (\r\n+                          <button\r\n+                            onClick={() => handleValidation(pro.id, false)}\r\n+                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n+                            title=\"Refuser\"\r\n+                          >\r\n+                            <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n+                          </button>\r\n                         )}\r\n-                    </tbody>\r\n-                </table>\r\n-            </div>\r\n+                      </>\r\n+                    ) : (\r\n+                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n+                    )}\r\n+                  </td>\r\n+                </tr>\r\n+              ))}\r\n+            </tbody>\r\n+          </table>\r\n         </div>\r\n-    );\r\n+      )}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default GestionUtilisateurs;\r\n+export default GestionProfessionnels;\r\n"
                },
                {
                    "date": 1750889115185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n                   Actions\r\n                 </th>\r\n               </tr>\r\n             </thead>\r\n-            <tbody className=\"bg-primary divide-y divide-gray-200\">\r\n+            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n               {filteredProfessionnels.map(pro => (\r\n                 <tr key={pro.id}>\r\n                   <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n                     {pro.nom} {pro.prenom}\r\n"
                },
                {
                    "date": 1750889126577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n         <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n       ) : (\r\n         <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n           <table className=\"min-w-full divide-y divide-gray-200\">\r\n-            <thead className=\"bg-gray-50\">\r\n+            <thead className=\"bg-primary-50\">\r\n               <tr>\r\n                 <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n                   Nom Prénom\r\n                 </th>\r\n"
                },
                {
                    "date": 1750889239461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n const GestionProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [searchTerm, setSearchTerm] = useState('');\r\n-  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n+  const [filterStatut, setFilterStatut] = useState('TOUS');\r\n   const [error, setError] = useState(null);\r\n   const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n   const navigate = useNavigate();\r\n@@ -94,9 +94,8 @@\n       setError(\"Erreur de téléchargement.\");\r\n     }\r\n   };\r\n \r\n-  // Recherche par nom, prenom, email, specialite\r\n   const filteredProfessionnels = professionnels.filter(pro => {\r\n     const term = searchTerm.toLowerCase();\r\n     return (\r\n       (pro.nom?.toLowerCase().includes(term)) ||\r\n@@ -110,35 +109,35 @@\n   });\r\n \r\n   return (\r\n     <div className=\"p-4\">\r\n-      {/* Barre de recherche */}\r\n+      {/* Recherche */}\r\n       <div className=\"mb-6 max-w-md mx-auto\">\r\n         <div className=\"relative\">\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n             value={searchTerm}\r\n             onChange={e => setSearchTerm(e.target.value)}\r\n-            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n+            className=\"w-full pl-10 pr-4 py-2 border border-primary-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n           />\r\n           <FontAwesomeIcon\r\n             icon={faMagnifyingGlass}\r\n-            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n+            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-primary-400\"\r\n           />\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Filtre par statut */}\r\n+      {/* Filtres */}\r\n       <div className=\"flex justify-center space-x-4 mb-6\">\r\n         {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n           <button\r\n             key={status}\r\n             onClick={() => setFilterStatut(status)}\r\n             className={`px-4 py-2 rounded-md font-semibold border\r\n               ${filterStatut === status\r\n-                ? 'bg-indigo-600 text-white border-indigo-600'\r\n-                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n+                ? 'bg-primary-600 text-white border-primary-600'\r\n+                : 'bg-white text-primary-700 border-primary-300 hover:bg-primary-100'}\r\n             `}\r\n           >\r\n             {status === 'TOUS' ? 'Tous' :\r\n              status === 'EN_ATTENTE' ? 'En attente' :\r\n@@ -149,47 +148,32 @@\n       </div>\r\n \r\n       {/* Tableau */}\r\n       {filteredProfessionnels.length === 0 ? (\r\n-        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n+        <p className=\"text-center text-primary-600\">Aucun professionnel correspondant.</p>\r\n       ) : (\r\n         <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n-          <table className=\"min-w-full divide-y divide-gray-200\">\r\n-            <thead className=\"bg-primary-50\">\r\n+          <table className=\"min-w-full divide-y divide-primary-200\">\r\n+            <thead className=\"bg-primary-100\">\r\n               <tr>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Nom Prénom\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Email\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Téléphone\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Spécialité\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n-                  Statut\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Document\r\n-                </th>\r\n-                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n-                  Actions\r\n-                </th>\r\n+                {['Nom Prénom', 'Email', 'Téléphone', 'Spécialité', 'Statut', 'Document', 'Actions'].map((header, i) => (\r\n+                  <th\r\n+                    key={i}\r\n+                    className=\"px-6 py-3 text-left text-xs font-medium text-primary-700 uppercase text-center\"\r\n+                  >\r\n+                    {header}\r\n+                  </th>\r\n+                ))}\r\n               </tr>\r\n             </thead>\r\n-            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n+            <tbody className=\"bg-white divide-y divide-primary-200\">\r\n               {filteredProfessionnels.map(pro => (\r\n                 <tr key={pro.id}>\r\n-                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n-                    {pro.nom} {pro.prenom}\r\n-                  </td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm\">\r\n+                  <td className=\"px-6 py-4 text-sm font-medium text-primary-900\">{pro.nom} {pro.prenom}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-primary-700\">{pro.email}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-primary-700\">{pro.telephone || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-primary-700 capitalize\">{pro.specialite || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-center\">\r\n                     <span\r\n                       className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n                         pro.statutValidation === 'EN_ATTENTE'\r\n                           ? 'bg-yellow-100 text-yellow-800'\r\n@@ -204,39 +188,39 @@\n                   <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n                     {pro.documentJustificatif ? (\r\n                       <button\r\n                         onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n-                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n+                        className=\"text-primary-600 hover:text-primary-800\"\r\n                         title=\"Télécharger\"\r\n                       >\r\n                         <FontAwesomeIcon icon={faDownload} />\r\n                       </button>\r\n                     ) : (\r\n-                      <span className=\"text-gray-400\">N/A</span>\r\n+                      <span className=\"text-primary-400\">N/A</span>\r\n                     )}\r\n                   </td>\r\n                   <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n                     {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n                       <>\r\n                         <button\r\n                           onClick={() => handleValidation(pro.id, true)}\r\n-                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n+                          className=\"text-green-600 hover:text-green-800 mx-2\"\r\n                           title=\"Valider\"\r\n                         >\r\n                           <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n                         </button>\r\n                         {pro.statutValidation === 'EN_ATTENTE' && (\r\n                           <button\r\n                             onClick={() => handleValidation(pro.id, false)}\r\n-                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n+                            className=\"text-red-600 hover:text-red-800 mx-2\"\r\n                             title=\"Refuser\"\r\n                           >\r\n                             <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n                           </button>\r\n                         )}\r\n                       </>\r\n                     ) : (\r\n-                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n+                      <span className=\"text-primary-500 text-xs\">Déjà validé</span>\r\n                     )}\r\n                   </td>\r\n                 </tr>\r\n               ))}\r\n"
                },
                {
                    "date": 1750889274869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n const GestionProfessionnels = () => {\r\n   const [professionnels, setProfessionnels] = useState([]);\r\n   const [searchTerm, setSearchTerm] = useState('');\r\n-  const [filterStatut, setFilterStatut] = useState('TOUS');\r\n+  const [filterStatut, setFilterStatut] = useState('TOUS'); // TOUS, EN_ATTENTE, VALIDE, REFUSE\r\n   const [error, setError] = useState(null);\r\n   const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n \r\n   const navigate = useNavigate();\r\n@@ -94,8 +94,9 @@\n       setError(\"Erreur de téléchargement.\");\r\n     }\r\n   };\r\n \r\n+  // Recherche par nom, prenom, email, specialite\r\n   const filteredProfessionnels = professionnels.filter(pro => {\r\n     const term = searchTerm.toLowerCase();\r\n     return (\r\n       (pro.nom?.toLowerCase().includes(term)) ||\r\n@@ -109,35 +110,35 @@\n   });\r\n \r\n   return (\r\n     <div className=\"p-4\">\r\n-      {/* Recherche */}\r\n+      {/* Barre de recherche */}\r\n       <div className=\"mb-6 max-w-md mx-auto\">\r\n         <div className=\"relative\">\r\n           <input\r\n             type=\"text\"\r\n             placeholder=\"Rechercher par nom, prénom, email ou spécialité...\"\r\n             value={searchTerm}\r\n             onChange={e => setSearchTerm(e.target.value)}\r\n-            className=\"w-full pl-10 pr-4 py-2 border border-primary-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-500\"\r\n+            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n           />\r\n           <FontAwesomeIcon\r\n             icon={faMagnifyingGlass}\r\n-            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-primary-400\"\r\n+            className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\r\n           />\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Filtres */}\r\n+      {/* Filtre par statut */}\r\n       <div className=\"flex justify-center space-x-4 mb-6\">\r\n         {['TOUS', 'EN_ATTENTE', 'VALIDE', 'REFUSE'].map(status => (\r\n           <button\r\n             key={status}\r\n             onClick={() => setFilterStatut(status)}\r\n             className={`px-4 py-2 rounded-md font-semibold border\r\n               ${filterStatut === status\r\n-                ? 'bg-primary-600 text-white border-primary-600'\r\n-                : 'bg-white text-primary-700 border-primary-300 hover:bg-primary-100'}\r\n+                ? 'bg-indigo-600 text-white border-indigo-600'\r\n+                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'}\r\n             `}\r\n           >\r\n             {status === 'TOUS' ? 'Tous' :\r\n              status === 'EN_ATTENTE' ? 'En attente' :\r\n@@ -148,32 +149,47 @@\n       </div>\r\n \r\n       {/* Tableau */}\r\n       {filteredProfessionnels.length === 0 ? (\r\n-        <p className=\"text-center text-primary-600\">Aucun professionnel correspondant.</p>\r\n+        <p className=\"text-center text-gray-600\">Aucun professionnel correspondant.</p>\r\n       ) : (\r\n         <div className=\"overflow-x-auto shadow-md rounded-lg\">\r\n-          <table className=\"min-w-full divide-y divide-primary-200\">\r\n-            <thead className=\"bg-primary-100\">\r\n+          <table className=\"min-w-full divide-y divide-gray-200\">\r\n+            <thead className=\"bg-primary-50\">\r\n               <tr>\r\n-                {['Nom Prénom', 'Email', 'Téléphone', 'Spécialité', 'Statut', 'Document', 'Actions'].map((header, i) => (\r\n-                  <th\r\n-                    key={i}\r\n-                    className=\"px-6 py-3 text-left text-xs font-medium text-primary-700 uppercase text-center\"\r\n-                  >\r\n-                    {header}\r\n-                  </th>\r\n-                ))}\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Nom Prénom\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Email\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Téléphone\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Spécialité\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">\r\n+                  Statut\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Document\r\n+                </th>\r\n+                <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">\r\n+                  Actions\r\n+                </th>\r\n               </tr>\r\n             </thead>\r\n-            <tbody className=\"bg-white divide-y divide-primary-200\">\r\n+            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n               {filteredProfessionnels.map(pro => (\r\n                 <tr key={pro.id}>\r\n-                  <td className=\"px-6 py-4 text-sm font-medium text-primary-900\">{pro.nom} {pro.prenom}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-primary-700\">{pro.email}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-primary-700\">{pro.telephone || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-primary-700 capitalize\">{pro.specialite || 'N/A'}</td>\r\n-                  <td className=\"px-6 py-4 text-sm text-center\">\r\n+                  <td className=\"px-6 py-4 text-sm font-medium text-gray-900\">\r\n+                    {pro.nom} {pro.prenom}\r\n+                  </td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.email}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500\">{pro.telephone || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm text-gray-500 capitalize\">{pro.specialite || 'N/A'}</td>\r\n+                  <td className=\"px-6 py-4 text-sm\">\r\n                     <span\r\n                       className={`px-2 inline-flex text-xs font-semibold rounded-full ${\r\n                         pro.statutValidation === 'EN_ATTENTE'\r\n                           ? 'bg-yellow-100 text-yellow-800'\r\n@@ -188,39 +204,39 @@\n                   <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n                     {pro.documentJustificatif ? (\r\n                       <button\r\n                         onClick={() => handleDownloadDocument(pro.documentJustificatif)}\r\n-                        className=\"text-primary-600 hover:text-primary-800\"\r\n+                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n                         title=\"Télécharger\"\r\n                       >\r\n                         <FontAwesomeIcon icon={faDownload} />\r\n                       </button>\r\n                     ) : (\r\n-                      <span className=\"text-primary-400\">N/A</span>\r\n+                      <span className=\"text-gray-400\">N/A</span>\r\n                     )}\r\n                   </td>\r\n                   <td className=\"px-6 py-4 text-center text-sm font-medium\">\r\n                     {(pro.statutValidation === 'EN_ATTENTE' || pro.statutValidation === 'REFUSE') ? (\r\n                       <>\r\n                         <button\r\n                           onClick={() => handleValidation(pro.id, true)}\r\n-                          className=\"text-green-600 hover:text-green-800 mx-2\"\r\n+                          className=\"text-green-600 hover:text-green-900 mx-2\"\r\n                           title=\"Valider\"\r\n                         >\r\n                           <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n                         </button>\r\n                         {pro.statutValidation === 'EN_ATTENTE' && (\r\n                           <button\r\n                             onClick={() => handleValidation(pro.id, false)}\r\n-                            className=\"text-red-600 hover:text-red-800 mx-2\"\r\n+                            className=\"text-red-600 hover:text-red-900 mx-2\"\r\n                             title=\"Refuser\"\r\n                           >\r\n                             <FontAwesomeIcon icon={faTimesCircle} size=\"lg\" />\r\n                           </button>\r\n                         )}\r\n                       </>\r\n                     ) : (\r\n-                      <span className=\"text-primary-500 text-xs\">Déjà validé</span>\r\n+                      <span className=\"text-gray-500 text-xs\">Déjà validé</span>\r\n                     )}\r\n                   </td>\r\n                 </tr>\r\n               ))}\r\n"
                }
            ],
            "date": 1750885048769,
            "name": "Commit-0",
            "content": "// src/pages/AdminFonctionnalites.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport api from '../../services/api'; \r\nimport { logout } from '../../services/serviceAuth'; \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction AdminFonctionnalites() {\r\n    const [fonctionnalites, setFonctionnalites] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [successMessage, setSuccessMessage] = useState(null);\r\n\r\n    const [nom, setNom] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [type, setType] = useState('');\r\n    const [statut, setStatut] = useState(true);\r\n    const [premium, setPremium] = useState(false);\r\n    const [lienFichier, setLienFichier] = useState('');\r\n    const [categorie, setCategorie] = useState('');\r\n    const [editId, setEditId] = useState(null);\r\n\r\n    const [role, setRole] = useState(null);\r\n    const [email, setEmail] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchUserInfo();\r\n    }, []);\r\n\r\n    const fetchUserInfo = async () => {\r\n        try {\r\n            const res = await api.get('/auth/me'); \r\n            setRole(res.data.role);\r\n            setEmail(res.data.email);\r\n            fetchFonctionnalites();\r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(\"Erreur lors de la récupération des informations utilisateur.\");\r\n            setLoading(false); \r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await logout(); \r\n        } catch (err) {\r\n            console.error(err);\r\n            setError(\"Erreur lors de la déconnexion.\");\r\n        }\r\n    };\r\n\r\n    const fetchFonctionnalites = async () => {\r\n        setError(null);\r\n        try {\r\n            const res = await api.get('/fonctionnalites'); \r\n            if (Array.isArray(res.data)) {\r\n                setFonctionnalites(res.data);\r\n            } else {\r\n                throw new Error(\"Format de données inattendu de l'API.\");\r\n            }\r\n        } catch (err) {\r\n            handleApiError(err, \"Erreur lors du chargement des fonctionnalités.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleApiError = (err, defaultMessage) => {\r\n        console.error(\"Erreur API:\", err);\r\n        if (err.response) {\r\n            switch (err.response.status) {\r\n                case 403:\r\n                    setError(\"Accès refusé : Vous n'avez pas les permissions nécessaires.\");\r\n                    break;\r\n                case 401:\r\n                    setError(\"Session expirée ou non autorisée. Veuillez vous reconnecter.\");\r\n                    break;\r\n                case 404: \r\n                    setError(\"La ressource demandée n'a pas été trouvée. Vérifiez l'URL ou si le backend est démarré.\");\r\n                    break;\r\n                default:\r\n                    setError(err.response.data?.message || defaultMessage);\r\n            }\r\n        } else if (err.request) {\r\n            setError(\"Aucune réponse du serveur. Vérifiez votre connexion internet ou si le backend est démarré et accessible.\");\r\n        } else {\r\n            setError(err.message || defaultMessage);\r\n        }\r\n    };\r\n\r\n    const resetForm = () => {\r\n        setNom('');\r\n        setDescription('');\r\n        setType('');\r\n        setStatut(true);\r\n        setPremium(false);\r\n        setLienFichier('');\r\n        setCategorie('');\r\n        setEditId(null);\r\n        setError(null);\r\n        setSuccessMessage(null);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!nom.trim()) {\r\n            setError(\"Le nom de la fonctionnalité est obligatoire.\");\r\n            return;\r\n        }\r\n\r\n        const payload = { \r\n            nom, \r\n            description, \r\n            type, \r\n            statut, \r\n            premium,\r\n            lienFichier: lienFichier.trim() !== '' ? lienFichier.trim() : null,\r\n            categorie: categorie.trim() !== '' ? categorie.trim() : null\r\n        };\r\n\r\n        try {\r\n            if (editId) {\r\n                await api.put(`/fonctionnalites/${editId}`, payload);\r\n                setSuccessMessage(\"Fonctionnalité modifiée avec succès !\");\r\n            } else {\r\n                await api.post('/fonctionnalites', payload);\r\n                setSuccessMessage(\"Fonctionnalité ajoutée avec succès !\");\r\n            }\r\n            resetForm();\r\n            fetchFonctionnalites();\r\n        } catch (err) {\r\n            handleApiError(err, \"Erreur lors de l'enregistrement de la fonctionnalité.\");\r\n        }\r\n    };\r\n\r\n    const handleEdit = (f) => {\r\n        setNom(f.nom || '');\r\n        setDescription(f.description || '');\r\n        setType(f.type || '');\r\n        setStatut(!!f.statut);\r\n        setPremium(!!f.premium);\r\n        setLienFichier(f.lienFichier || '');\r\n        setCategorie(f.categorie || '');\r\n        setEditId(f.id);\r\n        setError(null);\r\n        setSuccessMessage(null);\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        if (!window.confirm(\"Êtes-vous sûr de vouloir supprimer cette fonctionnalité ?\")) return;\r\n        try {\r\n            await api.delete(`/fonctionnalites/${id}`);\r\n            setSuccessMessage(\"Fonctionnalité supprimée avec succès !\");\r\n            fetchFonctionnalites();\r\n        } catch (err) {\r\n            handleApiError(err, \"Erreur lors de la suppression de la fonctionnalité.\");\r\n        }\r\n    };\r\n\r\n    if (role && role !== \"ADMIN\") {\r\n        return (\r\n            <div className=\"alert alert-danger mt-5 text-center\">\r\n                Vous n'avez pas la permission d'accéder à cette page.\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (loading) {\r\n        return <div className=\"text-center my-5\">Chargement des fonctionnalités...</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-8 max-w-7xl px-4\">\r\n            <h1 className=\"text-4xl font-extrabold text-gray-800 mb-8 text-center\">Gestion des Fonctionnalités</h1>\r\n\r\n            {error && (\r\n                <div className=\"alert alert-danger alert-dismissible fade show mb-4\">\r\n                    {error}\r\n                    <button type=\"button\" className=\"btn-close\" onClick={() => setError(null)}></button>\r\n                </div>\r\n            )}\r\n\r\n            {successMessage && (\r\n                <div className=\"alert alert-success alert-dismissible fade show mb-4\">\r\n                    {successMessage}\r\n                    <button type=\"button\" className=\"btn-close\" onClick={() => setSuccessMessage(null)}></button>\r\n                </div>\r\n            )}\r\n\r\n            <form onSubmit={handleSubmit} className=\"mb-8 bg-white p-6 rounded-lg shadow-lg border border-gray-200\">\r\n                <h3 className=\"mb-6 text-2xl font-semibold text-gray-700\">{editId ? 'Modifier une fonctionnalité' : 'Ajouter une fonctionnalité'}</h3>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                    <div>\r\n                        <label htmlFor=\"nom\" className=\"block text-sm font-medium text-gray-700\">Nom <span className=\"text-red-500\">*</span></label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"nom\"\r\n                            value={nom}\r\n                            onChange={(e) => setNom(e.target.value)}\r\n                            required\r\n                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">Type <span className=\"text-red-500\">*</span></label>\r\n                        <select\r\n                            id=\"type\"\r\n                            value={type}\r\n                            onChange={(e) => setType(e.target.value)}\r\n                            required\r\n                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:ring-indigo-500\"\r\n                        >\r\n                            <option value=\"\">Sélectionnez un type...</option>\r\n                            <option value=\"citation\">Citation</option>\r\n                            <option value=\"podcast\">Podcast</option>\r\n                            <option value=\"article\">Article</option>\r\n                            <option value=\"video\">Vidéo</option>\r\n                            <option value=\"outil\">Outil interactif</option>\r\n                            <option value=\"guide_pratique\">Guide Pratique</option>\r\n                            <option value=\"journaling_prompt\">Prompt Journaling</option>\r\n                            <option value=\"exercice_texte\">Exercice de Relaxation (texte)</option>\r\n                            <option value=\"challenge\">Défi Bien-être</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"categorie\" className=\"block text-sm font-medium text-gray-700\">Catégorie (Optionnel)</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"categorie\"\r\n                            value={categorie}\r\n                            onChange={(e) => setCategorie(e.target.value)}\r\n                            placeholder=\"Ex: Méditation, Sommeil\"\r\n                            className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-6\">\r\n                    <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700 mb-1\">Description / Contenu</label>\r\n                    <textarea\r\n                        id=\"description\"\r\n                        rows=\"4\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                        placeholder=\"Description détaillée ou contenu de la ressource\"\r\n                        className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n                    />\r\n                </div>\r\n                <div className=\"mt-6\">\r\n                    <label htmlFor=\"lienFichier\" className=\"block text-sm font-medium text-gray-700 mb-1\">Lien du Fichier (URL pour Vidéo/Podcast/Outil, optionnel)</label>\r\n                    <input\r\n                        type=\"url\"\r\n                        id=\"lienFichier\"\r\n                        value={lienFichier}\r\n                        onChange={(e) => setLienFichier(e.target.value)}\r\n                        placeholder=\"Ex: https://youtube.com/ma-video\"\r\n                        className=\"block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm placeholder-gray-400 focus:border-indigo-500 focus:ring-indigo-500\"\r\n                    />\r\n                </div>\r\n                <div className=\"flex items-center space-x-8 mt-6\">\r\n                    <label className=\"inline-flex items-center\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={statut}\r\n                            onChange={() => setStatut(!statut)}\r\n                            className=\"form-checkbox h-5 w-5 text-indigo-600\"\r\n                        />\r\n                        <span className=\"ml-2 text-gray-700\">Actif</span>\r\n                    </label>\r\n                    <label className=\"inline-flex items-center\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            checked={premium}\r\n                            onChange={() => setPremium(!premium)}\r\n                            className=\"form-checkbox h-5 w-5 text-yellow-500\"\r\n                        />\r\n                        <span className=\"ml-2 text-gray-700\">Premium</span>\r\n                    </label>\r\n                </div>\r\n                <div className=\"mt-8 flex justify-end space-x-4\">\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"inline-flex items-center rounded-md bg-indigo-600 px-6 py-2 text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n                    >\r\n                        <FontAwesomeIcon icon={editId ? faPencilAlt : faPlus} className=\"mr-2\" />\r\n                        {editId ? 'Modifier' : 'Ajouter'}\r\n                    </button>\r\n                    {editId && (\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={resetForm}\r\n                            className=\"rounded-md bg-gray-200 px-6 py-2 text-gray-700 shadow-sm hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400\"\r\n                        >\r\n                            Annuler\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </form>\r\n\r\n            {fonctionnalites.length === 0 ? (\r\n                <div className=\"text-center p-6 bg-blue-50 rounded-md shadow-sm text-blue-700\">Aucune fonctionnalité trouvée.</div>\r\n            ) : (\r\n                <div className=\"overflow-x-auto rounded-lg shadow-lg border border-gray-200\">\r\n                    <table className=\"min-w-full bg-white\">\r\n                        <thead className=\"bg-indigo-600 text-white\">\r\n                            <tr>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">ID</th>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Nom</th>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Type</th>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Description</th>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Lien Fichier</th>\r\n                                <th className=\"px-5 py-3 text-left text-sm font-semibold\">Catégorie</th>\r\n                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Statut</th>\r\n                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Premium</th>\r\n                                <th className=\"px-5 py-3 text-center text-sm font-semibold\">Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {fonctionnalites.map((f) => (\r\n                                <tr key={f.id} className=\"hover:bg-gray-50 border-b border-gray-100\">\r\n                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.id}</td>\r\n                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.nom}</td>\r\n                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.type}</td>\r\n                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-gray-600\">{f.description}</td>\r\n                                    <td className=\"px-5 py-4 max-w-xs truncate text-sm text-blue-600\">{f.lienFichier}</td>\r\n                                    <td className=\"px-5 py-4 text-sm text-gray-900\">{f.categorie || '-'}</td>\r\n                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.statut ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\r\n                                            {f.statut ? 'Actif' : 'Inactif'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td className=\"px-5 py-4 text-center text-sm\">\r\n                                        <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${f.premium ? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'}`}>\r\n                                            {f.premium ? 'Oui' : 'Non'}\r\n                                        </span>\r\n                                    </td>\r\n                                    <td className=\"px-5 py-4 text-center text-sm space-x-3\">\r\n                                        <button\r\n                                            onClick={() => handleEdit(f)}\r\n                                            aria-label={`Modifier ${f.nom}`}\r\n                                            className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\r\n                                            style={{ outline: 'none' }}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPencilAlt} size=\"lg\" />\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => handleDelete(f.id)}\r\n                                            aria-label={`Supprimer ${f.nom}`}\r\n                                            className=\"text-red-600 hover:text-red-900 focus:outline-none\"\r\n                                            style={{ outline: 'none' }}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrash} size=\"lg\" />\r\n                                        </button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AdminFonctionnalites;\r\n"
        }
    ]
}