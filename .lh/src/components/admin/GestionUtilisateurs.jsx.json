{
    "sourceFile": "src/components/admin/GestionUtilisateurs.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1750889061886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1750889061886,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { getAllUsers, updateUser, deleteUser } from '../../services/serviceAdmin';\r\nimport api from '../../services/api';\r\nimport { logout } from '../../services/serviceAuth';\r\nimport { Trash2 } from 'lucide-react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst GestionUtilisateurs = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [successMessage, setSuccessMessage] = useState(null);\r\n\r\n    const rolesDisponibles = ['USER', 'ADMIN', 'PSYCHOLOGUE', 'PSYCHIATRE','PREMIUM'];\r\n    const [currentAdminEmail, setCurrentAdminEmail] = useState(null);\r\n    const [currentAdminRole, setCurrentAdminRole] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchUserInfo();\r\n    }, []);\r\n\r\n    const fetchUserInfo = async () => {\r\n        try {\r\n            const res = await api.get('/auth/me');\r\n            setCurrentAdminEmail(res.data.email);\r\n            setCurrentAdminRole(res.data.role);\r\n            if (res.data.role === 'ADMIN') {\r\n                fetchUsers();\r\n            } else {\r\n                setError(\"Accès refusé : Vous n'avez pas la permission d'accéder à cette page.\");\r\n                setLoading(false);\r\n            }\r\n        } catch (err) {\r\n            setError(\"Erreur lors de la récupération des informations utilisateur. Veuillez vous reconnecter.\");\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            await logout();\r\n            window.location.href = '/connexion';\r\n        } catch (err) {\r\n            setError(\"Erreur lors de la déconnexion.\");\r\n        }\r\n    };\r\n\r\n    const fetchUsers = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n        setSuccessMessage(null);\r\n        try {\r\n            const data = await getAllUsers();\r\n            const filteredUsers = data.filter(user => user.role === 'USER');\r\n            setUsers(filteredUsers);\r\n        } catch (err) {\r\n            if (err.response?.status === 403) {\r\n                setError(\"Accès refusé.\");\r\n            } else {\r\n                setError(\"Impossible de charger les utilisateurs.\");\r\n            }\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRoleChange = async (userId, newRole) => {\r\n        setError(null);\r\n        setSuccessMessage(null);\r\n        try {\r\n            const roleUpdatePayload = { id: userId, role: newRole };\r\n            await updateUser(userId, roleUpdatePayload);\r\n            const updatedUser = users.find(u => u.id === userId);\r\n            setSuccessMessage(`Rôle de ${updatedUser?.prenom || ''} ${updatedUser?.nom || ''} mis à jour en ${newRole}`);\r\n            fetchUsers();\r\n        } catch (err) {\r\n            setError(\"Erreur lors de la mise à jour du rôle.\");\r\n        }\r\n    };\r\n\r\n    const handleDeleteUser = async (userId, userName) => {\r\n        if (!window.confirm(`Êtes-vous sûr de vouloir supprimer l'utilisateur ${userName} ?`)) return;\r\n        setError(null);\r\n        setSuccessMessage(null);\r\n        try {\r\n            await deleteUser(userId);\r\n            setSuccessMessage(`Utilisateur ${userName} supprimé avec succès.`);\r\n            fetchUsers();\r\n        } catch (err) {\r\n            setError(\"Erreur lors de la suppression de l'utilisateur.\");\r\n        }\r\n    };\r\n\r\n    if (currentAdminRole && currentAdminRole !== \"ADMIN\") {\r\n        return (\r\n            <div className=\"alert alert-danger mt-5 text-center\">\r\n                Vous n'avez pas la permission d'accéder à cette page.\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (loading) {\r\n        return <div className=\"text-center py-8 text-gray-600\">Chargement des utilisateurs...</div>;\r\n    }\r\n\r\n    if (error && error.includes(\"Accès refusé\")) {\r\n        return <div className=\"text-center py-8 text-red-600\">{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            {error && (\r\n                <div className=\"alert alert-danger mt-3\">\r\n                    {error}\r\n                </div>\r\n            )}\r\n            {successMessage && (\r\n                <div className=\"alert alert-success mt-3\">\r\n                    {successMessage}\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"overflow-x-auto rounded-lg shadow-md border border-gray-200 mt-4\">\r\n                <table className=\"min-w-full bg-white\">\r\n                    <thead className=\"bg-blue-600 text-white\">\r\n                        <tr>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">ID</th>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Nom</th>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Prénom</th>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Email</th>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Téléphone</th>\r\n                            <th className=\"py-3 px-4 text-left text-xs font-medium uppercase\">Rôle</th>\r\n                            <th className=\"py-3 px-4 text-center text-xs font-medium uppercase\">Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody className=\"divide-y divide-gray-200\">\r\n                        {users.length === 0 ? (\r\n                            <tr>\r\n                                <td colSpan=\"7\" className=\"py-4 px-4 text-center text-gray-500\">\r\n                                    Aucun utilisateur trouvé.\r\n                                </td>\r\n                            </tr>\r\n                        ) : (\r\n                            users.map((user) => (\r\n                                <tr key={user.id} className=\"hover:bg-gray-100\">\r\n                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.id}</td>\r\n                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.nom}</td>\r\n                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.prenom}</td>\r\n                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.email}</td>\r\n                                    <td className=\"py-3 px-4 text-sm text-gray-900\">{user.telephone || 'N/A'}</td>\r\n                                    <td className=\"py-3 px-4 text-sm\">\r\n                                        <select\r\n                                            value={user.role}\r\n                                            onChange={(e) => handleRoleChange(user.id, e.target.value)}\r\n                                            className=\"block w-full py-1 px-2 border border-gray-300 rounded-md text-sm\"\r\n                                        >\r\n                                            {rolesDisponibles.map(role => (\r\n                                                <option key={role} value={role}>{role}</option>\r\n                                            ))}\r\n                                        </select>\r\n                                    </td>\r\n                                    <td className=\"py-3 px-4 text-sm text-center\">\r\n                                        <motion.button\r\n                                            whileHover={{ scale: 1.2, rotate: -10 }}\r\n                                            whileTap={{ scale: 0.9, rotate: 10 }}\r\n                                            onClick={() => handleDeleteUser(user.id, `${user.prenom || ''} ${user.nom || ''}`)}\r\n                                            className=\"text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-100 transition duration-200\"\r\n                                            title={`Supprimer ${user.prenom || ''} ${user.nom || ''}`}\r\n                                        >\r\n                                            <Trash2 className=\"w-5 h-5\" />\r\n                                        </motion.button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GestionUtilisateurs;\r\n"
        }
    ]
}